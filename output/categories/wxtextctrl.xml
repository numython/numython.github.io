<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Numython (Publicaciones sobre wxTextCtrl)</title><link>https://numython.github.io/</link><description></description><atom:link href="https://numython.github.io/categories/wxtextctrl.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><lastBuildDate>Sun, 08 May 2022 22:10:03 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Un mini editor de texto con wxPython</title><link>https://numython.github.io/posts/2016/03/un-mini-editor-de-texto-con-wxpython/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;p&gt;En esta entrada vamos a explicar cómo desarrollar un editor de texto muy sencillo, que cumpla con algunas funciones muy básicas, tal como un bloc de notas de Windows.&lt;br&gt;&lt;br&gt;El resultado final será más o menos el siguiente:&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-3FI4UfHa5z4/VMx2-zuG70I/AAAAAAAABaQ/BP9XL6SDw7o/s1600/Captura.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="213" src="https://4.bp.blogspot.com/-3FI4UfHa5z4/VMx2-zuG70I/AAAAAAAABaQ/BP9XL6SDw7o/s1600/Captura.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;Primeramente vamos a importar los módulos a utilizar:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;import wx&lt;br&gt;import os&lt;br&gt;import os.path&lt;br&gt;&lt;/pre&gt;&lt;br&gt;El módulo wx para la librería gráfica (wxPython), y el módulo os para las operaciones con archivos de texto plano (guardar, abrir, etc...).&lt;br&gt;&lt;br&gt;Una vez importados los módulos necesarios, habremos de definir una estructura base para la aplicación. Para ello extenderemos una clase de wx.Frame, tal cómo se muestra enseguida:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;class LABTxt(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;&lt;br&gt;    def configurarEditor(self):&lt;br&gt;        """ Configura las características iniciales del editor """&lt;br&gt; &lt;br&gt;    def crearMenu(self):  &lt;br&gt;        """ Crea la barra de menú """&lt;br&gt; &lt;br&gt;    def abrirArchivo(self, event):&lt;br&gt;        """ Abre un archivo de texto plano"""&lt;br&gt; &lt;br&gt;    def guardarArchivoComo(self, event):&lt;br&gt;        """ Guarda el archivo actual abriendo un cuadro de dialogo """&lt;br&gt;  &lt;br&gt;    def guardarArchivo(self,event):&lt;br&gt;        """ Guarda el archivo actual """&lt;br&gt; &lt;br&gt;    def copiar(self,event):&lt;br&gt;        """ Copia el texto seleccionado al portapapeles """&lt;br&gt;   &lt;br&gt;    def pegar(self,event):&lt;br&gt;        """ Pega el texto ubicado en el portapapeles """&lt;br&gt; &lt;br&gt;    def configurarTema(self,event):&lt;br&gt;        """ Configura el tema a utilizar """&lt;br&gt;  &lt;br&gt;    def ayuda(self,event):&lt;br&gt;        """ Muestra la ayuda de la aplicacion """&lt;br&gt;  &lt;br&gt;    def acerca(self, event):&lt;br&gt;        """ Breve descripción del programa """&lt;br&gt;&lt;br&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    fr = LABTxt(None, "LABTxt 0.0.1")&lt;br&gt;    app.MainLoop()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;En lo anterior se define una clase LABTxt derivada de wx.Frame, con ciertos métodos definidos que posteriormente desarrollaremos y que, evidentemente, le dan funcionalidad a la aplicación.&lt;br&gt;&lt;br&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;El método __init__&lt;/b&gt;&lt;/span&gt;&lt;br&gt;En el método __init__ (comúnmente nombrado "constructor" de la clase) se colocarán los elementos básicos de la aplicación, en este caso un wx.TextCtrl y el Sizer correspondiente, tal como se muestra enseguida:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;def __init__(self,parent,title):&lt;br&gt;    wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;    if os.path.isfile("icono.png"):&lt;br&gt;        self.SetIcon(wx.Icon('icono.png'))&lt;br&gt;    self.archivo='untitled.txt'&lt;br&gt;    p=wx.Panel(self, -1)&lt;br&gt;  &lt;br&gt;    # Sizer&lt;br&gt;    sz=wx.BoxSizer(wx.VERTICAL)&lt;br&gt;  &lt;br&gt;    # Editor&lt;br&gt;    self.editor=wx.TextCtrl(p, -1, "", style=wx.TE_MULTILINE)&lt;br&gt;    self.configurarEditor()&lt;br&gt;  &lt;br&gt;    # Agregar al sizer&lt;br&gt;    sz.Add(self.editor, 1, wx.EXPAND)&lt;br&gt;    p.SetSizer(sz)&lt;br&gt;  &lt;br&gt;    # Crear barra de menu&lt;br&gt;    self.crearMenu()&lt;br&gt;    self.Show()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;Colocamos un ícono a la aplicación (en el caso de que este exista), se crea un panel sobre el cual se agregará el control de texto. Enseguida se agrega un wx.TextCtrl con la propiedad style definida como wx.TE_MULTILINE, que permitirá tener un campo de texto multilínea, simulando de esta manera el editor que necesitamos. Se "llama" al método configurarEditor que simplemente configura la fuente y color de fondo del mismo. Finalmente se crea la barra de menús y se muestra la ventana con el método Show.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;El método configurarEditor&lt;/b&gt;&lt;/span&gt;&lt;br&gt;Este método define las características de la fuente y el color de fondo a utilizar.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;El método crearMenu&lt;/b&gt;&lt;/span&gt;&lt;br&gt;Aquí se crea la barra de menús con sus respectivos ítems y se agrega la funcionalidad (eventos) a cada uno de ellos, mediante el uso del método Bind de la clase wx.Frame.&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;def crearMenu(self):  &lt;br&gt;    """ Crea la barra de menú """&lt;br&gt;    marchivo=wx.Menu()&lt;br&gt;    abrir=marchivo.Append(-1, "Abrir\tCtrl-O")&lt;br&gt;    guardar=marchivo.Append(-1, "Guardar\tCtrl-S")&lt;br&gt;    guardarComo=marchivo.Append(-1, "Guardar como")&lt;br&gt;  &lt;br&gt;    meditar=wx.Menu()&lt;br&gt;    copiar=meditar.Append(-1, "Copiar\tCtrl-C")&lt;br&gt;    pegar=meditar.Append(-1, "Pegar\tCtrl-V")&lt;br&gt;  &lt;br&gt;    self.mtema=wx.Menu()&lt;br&gt;    classic=self.mtema.Append(-1, "Classic")&lt;br&gt;    dark=self.mtema.Append(-1, "Dark")&lt;br&gt;    retro=self.mtema.Append(-1, "Retro")&lt;br&gt;    pink=self.mtema.Append(-1, "Pink")&lt;br&gt;  &lt;br&gt;    mayuda=wx.Menu()&lt;br&gt;    ayuda=mayuda.Append(-1, "Ayuda")&lt;br&gt;    acerca=mayuda.Append(-1, "Acerca de...")&lt;br&gt;  &lt;br&gt;    barraMenu=wx.MenuBar()&lt;br&gt;    barraMenu.Append(marchivo, "Archivo")&lt;br&gt;    barraMenu.Append(meditar, "Editar")&lt;br&gt;    barraMenu.Append(self.mtema, "Seleccionar tema")&lt;br&gt;    barraMenu.Append(mayuda, "Ayuda")&lt;br&gt;    self.SetMenuBar(barraMenu)&lt;br&gt;  &lt;br&gt;    # Definición de "eventos"&lt;br&gt;    self.Bind(wx.EVT_MENU, self.abrirArchivo, abrir)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.guardarArchivoComo, guardarComo)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.guardarArchivo, guardar)&lt;br&gt;  &lt;br&gt;    self.Bind(wx.EVT_MENU, self.copiar, copiar)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.pegar, pegar)&lt;br&gt;  &lt;br&gt;    self.Bind(wx.EVT_MENU, self.configurarTema, classic)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.configurarTema, dark)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.configurarTema, retro)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.configurarTema, pink)&lt;br&gt;  &lt;br&gt;    self.Bind(wx.EVT_MENU, self.acerca, acerca)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.ayuda, ayuda)&lt;br&gt;&lt;/pre&gt;&lt;br&gt;Notará que cada ítem de los menús se "conecta" a un método de la propia clase que define la acción que se ejecutará en cada caso.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;El editor...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;Finalmente os dejo el código completo del editor. Desde luego existen muchas mejoras que pueden hacerse.&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;# -*- coding: utf-8 -*-&lt;br&gt;# ================================&lt;br&gt;# Por: Jorge De Los Santos  &lt;br&gt;# E-mail: delossantosmfq@gmail.com&lt;br&gt;# Licencia: BSD License&lt;br&gt;# ================================&lt;br&gt;&lt;br&gt;import wx&lt;br&gt;import os&lt;br&gt;import os.path&lt;br&gt;&lt;br&gt;class LABTxt(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;        if os.path.isfile("icono.png"):&lt;br&gt;            self.SetIcon(wx.Icon('icono.png'))&lt;br&gt;        self.archivo='untitled.txt'&lt;br&gt;        p=wx.Panel(self, -1)&lt;br&gt;  &lt;br&gt;        # Sizer&lt;br&gt;        sz=wx.BoxSizer(wx.VERTICAL)&lt;br&gt;  &lt;br&gt;        # Editor&lt;br&gt;        self.editor=wx.TextCtrl(p, -1, "", style=wx.TE_MULTILINE)&lt;br&gt;        self.configurarEditor()&lt;br&gt;  &lt;br&gt;        # Agregar al sizer&lt;br&gt;        sz.Add(self.editor, 1, wx.EXPAND)&lt;br&gt;        p.SetSizer(sz)&lt;br&gt;  &lt;br&gt;        # Crear barra de menu&lt;br&gt;        self.crearMenu()&lt;br&gt;        self.Show()&lt;br&gt;&lt;br&gt;    def configurarEditor(self):&lt;br&gt;        """ Configura las características iniciales del editor """&lt;br&gt;        self.fuente=wx.Font(12, wx.MODERN, wx.NORMAL, wx.NORMAL)&lt;br&gt;        self.fuente.SetFaceName("Courier New")&lt;br&gt;        self.editor.SetFont(self.fuente)&lt;br&gt;        self.editor.SetBackgroundStyle(True)&lt;br&gt; &lt;br&gt;    def crearMenu(self):  &lt;br&gt;        """ Crea la barra de menú """&lt;br&gt;        marchivo=wx.Menu()&lt;br&gt;        abrir=marchivo.Append(-1, "Abrir\tCtrl-O")&lt;br&gt;        guardar=marchivo.Append(-1, "Guardar\tCtrl-S")&lt;br&gt;        guardarComo=marchivo.Append(-1, "Guardar como")&lt;br&gt;  &lt;br&gt;        meditar=wx.Menu()&lt;br&gt;        copiar=meditar.Append(-1, "Copiar\tCtrl-C")&lt;br&gt;        pegar=meditar.Append(-1, "Pegar\tCtrl-V")&lt;br&gt;  &lt;br&gt;        self.mtema=wx.Menu()&lt;br&gt;        classic=self.mtema.Append(-1, "Classic")&lt;br&gt;        dark=self.mtema.Append(-1, "Dark")&lt;br&gt;        retro=self.mtema.Append(-1, "Retro")&lt;br&gt;        pink=self.mtema.Append(-1, "Pink")&lt;br&gt;  &lt;br&gt;        mayuda=wx.Menu()&lt;br&gt;        ayuda=mayuda.Append(-1, "Ayuda")&lt;br&gt;        acerca=mayuda.Append(-1, "Acerca de...")&lt;br&gt;  &lt;br&gt;        barraMenu=wx.MenuBar()&lt;br&gt;        barraMenu.Append(marchivo, "Archivo")&lt;br&gt;        barraMenu.Append(meditar, "Editar")&lt;br&gt;        barraMenu.Append(self.mtema, "Seleccionar tema")&lt;br&gt;        barraMenu.Append(mayuda, "Ayuda")&lt;br&gt;        self.SetMenuBar(barraMenu)&lt;br&gt;  &lt;br&gt;        # Definición de "eventos"&lt;br&gt;        self.Bind(wx.EVT_MENU, self.abrirArchivo, abrir)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.guardarArchivoComo, guardarComo)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.guardarArchivo, guardar)&lt;br&gt;  &lt;br&gt;        self.Bind(wx.EVT_MENU, self.copiar, copiar)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.pegar, pegar)&lt;br&gt;  &lt;br&gt;        self.Bind(wx.EVT_MENU, self.configurarTema, classic)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.configurarTema, dark)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.configurarTema, retro)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.configurarTema, pink)&lt;br&gt;  &lt;br&gt;        self.Bind(wx.EVT_MENU, self.acerca, acerca)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.ayuda, ayuda)&lt;br&gt;&lt;br&gt;    def abrirArchivo(self, event):&lt;br&gt;        dlg=wx.FileDialog(self, "Abrir archivo", os.getcwd(), style=wx.OPEN)&lt;br&gt;        if dlg.ShowModal() == wx.ID_OK:&lt;br&gt;            try:&lt;br&gt;                fid=open(dlg.GetPath(),'r')&lt;br&gt;                texto=fid.readlines()&lt;br&gt;                self.texto="".join(texto)&lt;br&gt;                self.texto = self.texto.decode("utf8")&lt;br&gt;                fid.close()&lt;br&gt;                self.editor.SetValue(self.texto)&lt;br&gt;                self.archivo=dlg.GetPath()&lt;br&gt;                self.SetTitle("LABTxt "+self.archivo)&lt;br&gt;            except:&lt;br&gt;                wx.MessageBox(u"Archivo no válido","Error")&lt;br&gt;        dlg.Destroy()&lt;br&gt;&lt;br&gt;    def guardarArchivoComo(self, event):&lt;br&gt;        """ Guarda el archivo actual abriendo un cuadro de dialogo """&lt;br&gt;        dlg=wx.FileDialog(self, "Guardar", os.getcwd(), style=wx.SAVE)&lt;br&gt;        if dlg.ShowModal() == wx.ID_OK:&lt;br&gt;            fid=open(dlg.GetPath(),'w')&lt;br&gt;            txt=str(self.editor.GetValue().encode('utf8'))&lt;br&gt;            fid.write(txt)&lt;br&gt;            fid.close()&lt;br&gt;            self.archivo=dlg.GetPath()&lt;br&gt;            self.SetTitle("LABTxt 0.0.1  "+self.archivo)&lt;br&gt;        dlg.Destroy()&lt;br&gt;&lt;br&gt;    def guardarArchivo(self,event):&lt;br&gt;        """ Guarda el archivo actual """&lt;br&gt;        if hasattr(self, 'archivo'):&lt;br&gt;            fid=open(self.archivo,'w')&lt;br&gt;            txt=str(self.editor.GetValue().encode('utf8'))&lt;br&gt;            fid.write(txt)&lt;br&gt;            fid.close()&lt;br&gt;            wx.MessageBox("Hecho","LABTxt")&lt;br&gt;            self.SetTitle("LABTxt 0.0.1  "+self.archivo)&lt;br&gt;        else:&lt;br&gt;            self.guardarArchivoComo(None)&lt;br&gt;&lt;br&gt;    def copiar(self,event):&lt;br&gt;        """ Copia el texto seleccionado al portapapeles """&lt;br&gt;        texto=wx.TextDataObject(self.editor.GetStringSelection())&lt;br&gt;        if wx.TheClipboard.Open():&lt;br&gt;            wx.TheClipboard.SetData(texto)&lt;br&gt;            wx.TheClipboard.Close()&lt;br&gt;&lt;br&gt;    def pegar(self,event):&lt;br&gt;        """ Pega el texto ubicado en el portapapeles """&lt;br&gt;        txt=wx.TextDataObject()&lt;br&gt;        if wx.TheClipboard.Open():&lt;br&gt;            success=wx.TheClipboard.GetData(txt)&lt;br&gt;            wx.TheClipboard.Close()&lt;br&gt;        if success:&lt;br&gt;            self.editor.SetInsertionPoint(self.editor.GetInsertionPoint()) &lt;br&gt;            self.editor.write(txt.GetText())&lt;br&gt; &lt;br&gt;    def configurarTema(self,event):&lt;br&gt;         tema_sel=self.mtema.FindItemById(event.GetId()).GetText()&lt;br&gt;         temas={'Classic':((0,0,255),(255,255,255)),&lt;br&gt;        'Dark':((200,200,200),(0,0,0)),&lt;br&gt;        'Retro':((0,255,0),(0,0,0)),&lt;br&gt;        'Pink':((20,50,50),(250,180,180))}&lt;br&gt;        self.editor.SetForegroundColour(temas[tema_sel][0])&lt;br&gt;        self.editor.SetBackgroundColour(temas[tema_sel][1])&lt;br&gt;        self.editor.Refresh()&lt;br&gt;  &lt;br&gt;    def ayuda(self,event):&lt;br&gt;        wx.MessageBox("No disponible","LABTxt")&lt;br&gt;&lt;br&gt;    def acerca(self, event):&lt;br&gt;        descripcion=""" Editor de texto sin formato desarrollado en&lt;br&gt;        wxPython """&lt;br&gt;        info=wx.AboutDialogInfo()&lt;br&gt;        info.SetName('LABTxt')&lt;br&gt;        info.SetDescription(descripcion)&lt;br&gt;        info.SetVersion('0.0.1')&lt;br&gt;        info.SetLicense('BSD License')&lt;br&gt;        info.SetDevelopers(['Jorge De Los Santos'])&lt;br&gt;        info.SetWebSite(('labdls.blogspot.mx','LAB DLS'))&lt;br&gt;        info.SetCopyright('(c) 2014')&lt;br&gt;        wx.AboutBox(info)&lt;br&gt;&lt;br&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    fr = LABTxt(None, "LABTxt 0.0.1")&lt;br&gt;    app.MainLoop()&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;</description><category>MiniApps</category><category>wxPython</category><category>wxTextCtrl</category><guid>https://numython.github.io/posts/2016/03/un-mini-editor-de-texto-con-wxpython/</guid><pubDate>Tue, 22 Mar 2016 10:27:00 GMT</pubDate></item><item><title>Primer aplicación en wxPython</title><link>https://numython.github.io/posts/2016/03/primer-aplicacion-en-wxpython/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;&lt;a href="http://www.wxpython.org/"&gt;wxPython&lt;/a&gt; es un binding de la biblioteca gráfica wxWidgets para el lenguaje de programación Python. La biblioteca wxWidgets se caracteriza por ser multiplataforma, por lo que su uso junto a Python permite el desarrollo rápido de aplicaciones gráficas multiplataforma.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Para desarrollar una aplicación en wxPython, normalmente primero debe crearse una clase heredada de wx.Frame:&lt;/div&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;import wx&lt;br&gt;&lt;br&gt;class MiAplicacion(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;&lt;/pre&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;En el código anterior primero se importa el módulo &lt;span&gt;wx&lt;/span&gt;, enseguida se define una clase llamada &lt;b&gt;MiAplicacion&lt;/b&gt;, la cual hereda de &lt;span&gt;wx.Frame&lt;/span&gt;. El método &lt;span&gt;__init__&lt;/span&gt; de la clase creada debe contener al menos dos argumentos de entrada, self y parent, donde &lt;span&gt;self&lt;/span&gt; es una cadena utilizada por convención para referenciar a un objeto de la propia clase y&lt;span&gt; parent&lt;/span&gt; es el objeto gráfico padre del Frame que se creará cuando instanciemos un objeto de esta clase. El otro argumento definido, title, será una cadena que se mostrará en la parte superior de la ventana. El método &lt;span&gt;__init__&lt;/span&gt; podría considerarse como el "constructor" de la clase, cuando instanciemos un objeto de esa clase, se pasarán como argumentos de entrada los parámetros definidos en &lt;span&gt;__init__&lt;/span&gt;, exceptuando self.&lt;br&gt;&lt;br&gt;&lt;/div&gt;Una vez definida la clase, ahora vamos a instanciar un objeto de esa clase como sigue:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    frame = MiAplicacion(None, u"Mi aplicación")&lt;br&gt;    frame.Show()&lt;br&gt;    app.MainLoop()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Primero se crea un objeto de la clase wx.App, el cuál se encargará de "lanzar" la aplicación y ejecutar las órdenes necesarias para poder interactuar con la interfaz gráfica. Luego, se define un objeto frame de la clase &lt;b&gt;MiAplicación&lt;/b&gt;, teniendo como primer argumento None, indicando que no tendrá un objeto gráfico padre, como segundo argumento se pasa una cadena de texto con el título que queremos colocar en la parte superior de la ventana. Finalmente, el método MainLoop de la clase wx.App inicia la aplicación wxPython. En la siguiente figura se muestra la ventana resultante.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-NjuF491TD2A/VopLWQ-hW2I/AAAAAAAABn8/rVvk3G6Hvlc/s1600/img_01.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="266" src="https://4.bp.blogspot.com/-NjuF491TD2A/VopLWQ-hW2I/AAAAAAAABn8/rVvk3G6Hvlc/s400/img_01.PNG" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Es recomendable que el método Show sea implementado dentro del método __init__ de la clase derivada de wx.Frame, además podemos centrar la interfaz gráfica en la pantalla para obtener una mejor visualización, quedando nuestro código como sigue:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;pre class="brush: python"&gt;# -*- coding: utf8 -*-&lt;br&gt;import wx&lt;br&gt;&lt;br&gt;class MiAplicacion(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;        self.Centre(True)&lt;br&gt;        self.Show()&lt;br&gt;&lt;br&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    frame = MiAplicacion(None, u"Mi aplicación")&lt;br&gt;    app.MainLoop()&lt;/pre&gt;&lt;br&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;¿Y... cómo añadir controles?&lt;/span&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;Hasta ahora tenemos simplemente la ventana de la aplicación, sin ningún tipo de control gráfico que nos permita interactuar con el programa. Para añadir controles, en principio, la cuestión no es muy complicada, sólo habrá que especificar el tipo de control y algunos parámetros requeridos, véase el ejemplo a continuación que muestra como agregar un campo de texto editable (wx.TextCtrl) que permite emular un editor de texto plano:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;# -*- coding: utf8 -*-&lt;br&gt;import wx&lt;br&gt;&lt;br&gt;class MiAplicacion(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(400,300))&lt;br&gt; boton = wx.TextCtrl(self, style=wx.TE_MULTILINE)&lt;br&gt; self.Centre(True)&lt;br&gt; self.Show()&lt;br&gt;&lt;br&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    frame = MiAplicacion(None, u"Mi aplicación")&lt;br&gt;    app.MainLoop()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-ArthMktsvw8/VopRPVLJAqI/AAAAAAAABoQ/NGR3zNOI7Bc/s1600/img_02.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="https://2.bp.blogspot.com/-ArthMktsvw8/VopRPVLJAqI/AAAAAAAABoQ/NGR3zNOI7Bc/s320/img_02.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;Como puede observarse, en el código sólo se añade una línea, en la cual se instancia un objeto de la clase wx.TextCtrl, pasándole como parent el Frame principal, y el argumento style especificando que se permita el uso de líneas múltiples dentro de ese control.&lt;br&gt;&lt;br&gt;¿Y si quiero añadir más controles?, bueno aquí la cuestión se complica un poco, pero vamos, nada que no se pueda resolver. Aunque para ello ha de introducirse otro concepto básico en el desarrollo de aplicaciones en wxPython: los Sizers, que son clases que permiten alinear y organizar los objetos dentro de una ventana o contenedores, mediante algoritmos de posicionamiento. Evidentemente esto lo estaremos tratando en otro post, para no alargarnos demasiado.&lt;br&gt;&lt;br&gt;Para tener una referencia más sólida respecto al desarrollo de aplicaciones en wxPython es recomendable que revisen el siguiente libro:&lt;br&gt;&lt;br&gt;&lt;a href="http://serv.yanchick.org/Books/%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/python/Manning.Publications.wxPython.in.Action.Mar.2006.pdf"&gt;wxPython in Action  [Noel Rappin and Robin Dunn]&lt;/a&gt;&lt;/div&gt;</description><category>wxFrame</category><category>wxPython</category><category>wxTextCtrl</category><guid>https://numython.github.io/posts/2016/03/primer-aplicacion-en-wxpython/</guid><pubDate>Tue, 22 Mar 2016 10:25:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Numython (Publicaciones sobre wxPython)</title><link>https://numython.github.io/</link><description></description><atom:link href="https://numython.github.io/categories/wxpython.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><lastBuildDate>Thu, 05 Apr 2018 01:24:02 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>wxdx, una GUI para cálculo elemental</title><link>https://numython.github.io/posts/wxdx-una-gui-para-calculo-elemental/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div&gt;&lt;p&gt;En este blog ya hemos tratado algunas veces cómo desarrollar interfaces gráficas utilizando wxPython 
(véase &lt;a href="https://numython.github.io/categories/wxpython/"&gt;aquí&lt;/a&gt;). En este post vamos a presentar el 
desarrollo de una mini-aplicación que calcula límites, derivadas e integrales utilizando SymPy como 
motor de cálculo simbólico.&lt;/p&gt;
&lt;p&gt;En la siguiente imagen se muestra la interfaz gráfica resultante:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://numython.github.io/img/wxdx.PNG"&gt; &lt;/p&gt;
&lt;p&gt;Ahora vamos a describir un poco el diseño y funcionamiento de la aplicación. Como puede notarse 
la aplicación está basada en la clase &lt;a href="http://docs.wxwidgets.org/3.1/classwx_notebook.html"&gt;&lt;code&gt;wxNotebook&lt;/code&gt;&lt;/a&gt;, 
teniéndose cuatro páginas: Límites, Derivadas, Integrales indefinidas y Ayuda. Cada página del 
Notebook contiene un instancia heredada de &lt;code&gt;wxPanel&lt;/code&gt;, misma que contiene todos los controles 
necesarios en cada uno de los casos.&lt;/p&gt;
&lt;p&gt;El proceso de cálculo es básicamente como sigue: se lee una función $f(x)$ introducida en los 
&lt;code&gt;wxTextCtrl&lt;/code&gt; correspondientes y se hace un preprocesamiento mínimo, enseguida se transforma 
el string leído en una expresión de SymPy, para luego llevar a cabo la operación 
requerida. El resultado de la operación dado por SymPy se muestra en un canvas de Matplotlib, 
en el cual se renderiza la expresión LaTeX del resultado obtenido.&lt;/p&gt;
&lt;p&gt;El código de la aplicación completa se adjunta a continuación.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/a6962f0bf47aded8280642ff85b42da8.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;# -*- coding: utf-8 -*-
# 
# Author:   Pedro Jorge De Los Santos 
# E-mail:   delossantosmfq@gmail.com
# Version:  0.1.0
# License: MIT
# 
import wx 
import wx.html
import webbrowser
import sympy
import matplotlib
matplotlib.use('WXAgg')
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.figure import Figure
from sympy import (sin,cos,tan,sec,csc,cot,ln,log,exp,asin,acos,atan) # Algunas funciones


class wxdx(wx.Frame):
    def __init__(self,parent):
        __version__ = "0.1.0"
        title = u"wxdx %s"%(__version__,)
        wx.Frame.__init__(self,parent=None,title=title,size=(400,250))
        
        self.nb = wx.Notebook(self)
        
        # NoteBook Pages
        self.derivada = Derivada(self.nb)
        self.integral = Integral(self.nb)
        self.limite = Limite(self.nb)
        self.ayuda = Ayuda(self.nb)
        
        self.nb.AddPage(self.limite, u"Límite")        
        self.nb.AddPage(self.derivada, "Derivada")
        self.nb.AddPage(self.integral, "Integral indefinida")
        self.nb.AddPage(self.ayuda, "Ayuda")
        
        self.SetMinSize(self.GetSize()) # Actual -&amp;gt; Tamaño mínimo
        self.Centre(True)
        self.Show()


class Derivada(wx.Panel):
    def __init__(self,parent):
        wx.Panel.__init__(self,parent,wx.ID_ANY)
        self.initCanvas()
        self.initCtrls()
        self.SetSizer(self.mainsz)
   
    def initCtrls(self):
        """
        Inicializa todos los componentes
        """
        # Sizers
        self.mainsz = wx.BoxSizer(wx.VERTICAL)
        self.funsz = wx.BoxSizer(wx.HORIZONTAL)
        
        self.funlabel = wx.StaticText(self, wx.ID_ANY, " f(x) ")
        self.fun = wx.TextCtrl(self, wx.ID_ANY, "")
        self.boton = wx.Button(self, wx.ID_ANY, "Calcular")
        
        # Fonts
        font1 = wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL)
        font1.SetPointSize(12)
        self.funlabel.SetFont(font1)
        self.fun.SetFont(font1)
        self.fun.SetForegroundColour((0,0,255))
        
        self.funsz.Add(self.funlabel, 1, wx.EXPAND|wx.ALL, 2)
        self.funsz.Add(self.fun, 8, wx.EXPAND|wx.ALL, 2)
        self.funsz.Add(self.boton, 2, wx.EXPAND|wx.ALL, 2)
        
        self.mainsz.Add(self.funsz, 1, wx.EXPAND|wx.ALL, 5)
        self.mainsz.Add(self.canvas, 1, wx.ALIGN_CENTRE|wx.ALL, 5)
        
        self.Bind(wx.EVT_BUTTON, self.derivar, self.boton)
        
    def initCanvas(self):
        """
        Inicializa el Canvas
        """
        self.figure = Figure()
        
        # FigureCanvas
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.figure.set_facecolor((1,1,1)) # ...
        self.string = self.figure.text(0.05, 0.5, "")
        self.string.set_fontsize(18)
        
    def derivar(self,event):
        x = sympy.Symbol("x")
        fx = self.fun.GetValue() # Función original
        if "^" in fx: fx = fx.replace("^","**") # Convertir ^ a notación Python (**)
        Fx = sympy.diff(eval(fx)) # Función derivada
        str_Fx = "$\\frac{d}{dx} \\left(%s \\right)\, = \,%s$"%(sympy.latex(eval(fx)), sympy.latex(Fx))
        print(str_Fx)
        self.string.set_text(str_Fx)
        self.canvas.draw() # "Redibujar"


class Integral(wx.Panel):
    def __init__(self,parent):
        wx.Panel.__init__(self,parent,wx.ID_ANY)
        self.initCanvas()
        self.initCtrls()
        self.SetSizer(self.mainsz)

        
    def initCtrls(self):
        self.mainsz = wx.BoxSizer(wx.VERTICAL)
        self.funsz = wx.BoxSizer(wx.HORIZONTAL)
        
        self.funlabel = wx.StaticText(self, wx.ID_ANY, " f(x) ")
        self.fun = wx.TextCtrl(self, wx.ID_ANY, "")
        self.boton = wx.Button(self, wx.ID_ANY, "Calcular")
        
        # Fonts
        font1 = wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL)
        font1.SetPointSize(12)
        self.funlabel.SetFont(font1)
        self.fun.SetFont(font1)
        self.fun.SetForegroundColour((0,0,255))
        
        self.funsz.Add(self.funlabel, 1, wx.EXPAND|wx.ALL, 2)
        self.funsz.Add(self.fun, 8, wx.EXPAND|wx.ALL, 2)
        self.funsz.Add(self.boton, 2, wx.EXPAND|wx.ALL, 2)
        
        self.mainsz.Add(self.funsz, 1, wx.EXPAND|wx.ALL, 5)
        self.mainsz.Add(self.canvas, 6, wx.EXPAND|wx.ALL, 5)
        
        self.Bind(wx.EVT_BUTTON, self.integrar, self.boton)
        
    def initCanvas(self):
        self.figure = Figure()
        
        # FigureCanvas
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.figure.set_facecolor((1,1,1))
        self.string = self.figure.text(0.05, 0.5, "")
        self.string.set_fontsize(18)
        
    def integrar(self,event):
        x = sympy.Symbol("x")
        fx = self.fun.GetValue() # Función original
        if "^" in fx: fx = fx.replace("^","**")
        Fx = sympy.integrate(eval(fx)) # Función integrada
        str_Fx = "$\int \, (%s) \,dx \,= \,%s + C$"%(sympy.latex(eval(fx)), sympy.latex(Fx))
        self.string.set_text(str_Fx)
        self.canvas.draw()
        

class Limite(wx.Panel):
    def __init__(self,parent):
        wx.Panel.__init__(self,parent,wx.ID_ANY)
        self.initCanvas()
        self.initCtrls()
        self.SetSizer(self.mainsz)

    def initCtrls(self):
        """
        Inicializa todos los controles y sizers necesarios
        """
        self.mainsz = wx.BoxSizer(wx.VERTICAL)
        self.funsz = wx.BoxSizer(wx.HORIZONTAL)
        self.valsz = wx.BoxSizer(wx.HORIZONTAL)
        
        self.funlabel = wx.StaticText(self, wx.ID_ANY, " f(x) ")
        self.fun = wx.TextCtrl(self, wx.ID_ANY, "")
        self.boton = wx.Button(self, wx.ID_ANY, "Calcular")
        
        dir_opts = "None|+|-".split("|")
        self.x0label = wx.StaticText(self, wx.ID_ANY, "a", style=wx.ALIGN_CENTER)
        self.x0 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.limitdirlabel = wx.StaticText(self, wx.ID_ANY, u"Lím. Lat.")
        self.limitdir = wx.ComboBox(self, wx.ID_ANY, choices=dir_opts)
        
        # Configurando el tamaño/color de fuente 
        font1 = wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL)
        _all_ctrls = [self.x0label, self.limitdirlabel, self.x0, self.limitdir, 
                      self.fun, self.funlabel]
        for ctrl in _all_ctrls: 
            ctrl.SetFont(font1)
            if ctrl in [self.x0, self.fun, self.limitdir]:
                ctrl.SetForegroundColour((0,0,255))
        
        # Agregando controles a los sizers
        self.funsz.Add(self.funlabel, 1, wx.EXPAND|wx.ALL, 2)
        self.funsz.Add(self.fun, 8, wx.EXPAND|wx.ALL, 2)
        self.funsz.Add(self.boton, 2, wx.EXPAND|wx.ALL, 2)
        
        self.valsz.Add(self.x0label, 1, wx.EXPAND|wx.ALL, 2)     
        self.valsz.Add(self.x0, 3, wx.EXPAND|wx.ALL, 2) 
        self.valsz.AddSpacer(30)    
        self.valsz.Add(self.limitdirlabel, 1, wx.EXPAND|wx.ALL, 2)     
        self.valsz.Add(self.limitdir, 2, wx.EXPAND|wx.ALL, 2)     
           
        self.mainsz.Add(self.funsz, 1, wx.EXPAND|wx.ALL, 5)
        self.mainsz.Add(self.valsz, 1, wx.EXPAND|wx.ALL, 5)
        self.mainsz.Add(self.canvas, 6, wx.EXPAND|wx.ALL, 5)
        
        self.Bind(wx.EVT_BUTTON, self.calcular, self.boton)
        
    def initCanvas(self):
        """
        Inicializa el Canvas que muestra los resultados estilizados
        mediante el TeX render de Matplotlib.
        """
        self.figure = Figure()
        
        # FigureCanvas
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.figure.set_facecolor((1,1,1))
        self.string = self.figure.text(0.05, 0.5, "")
        self.string.set_fontsize(18)
        
    def calcular(self,event):
        """
        Calcula el límite y muestra el resultado en el canvas
        destinado para tal propósito
        """
        x = sympy.Symbol("x")
        try:
            fx = self.fun.GetValue() # Función original
            x0 = float(self.x0.GetValue())
            limdir = self.limitdir.GetStringSelection()
        except:
            title = "WXDX"
            msg = "Valores incorrectos"
            style = wx.ICON_EXCLAMATION
            dlg = wx.MessageDialog(None, message=msg, 
                               caption=title, style=style)
            dlg.ShowModal()
            dlg.Destroy()
            return False
        if "^" in fx: fx = fx.replace("^","**")
        if limdir=="+" or limdir=="-":
            Fx = sympy.limit(eval(fx), x, x0, dir=limdir) # Calculando el límite
        else:
            Fx = sympy.limit(eval(fx), x, x0) # Calculando el límite
        str_Fx = "$\lim_{x &amp;gt; %s} (%s) \,= \,%s$"%(x0, sympy.latex(eval(fx)), sympy.latex(Fx))
        self.string.set_text(str_Fx)
        self.canvas.draw()



class Ayuda(wx.html.HtmlWindow):
    """
    Para mostrar la ayuda utilizando la sintaxis HTML
    """
    def __init__(self,parent):
        wx.html.HtmlWindow.__init__(self,parent)
        self.SetPage(AYUDA_STRING)
    
    def OnLinkClicked(self, link):
        """
        Permite abrir los links en el explorador por default del 
        usuario, en lugar de abrirlos en este mismo control.
        """
        webbrowser.open(link.GetHref())
        


AYUDA_STRING = u"""
&amp;lt;h3&amp;gt;Ayuda&amp;lt;/h3&amp;gt;

&amp;lt;div align="justify"&amp;gt;
&amp;lt;p&amp;gt;
En el caso de integrales y derivadas simplemente ingrese 
una función f(x) en el campo correspondiente y presione 
el botón calcular para ejecutar la operación.
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
Para calcular límites, debe especificar adicionalmente el 
valor al que "tiende" la variable. Y en caso necesario 
puede especificar si va a calcular un límite lateral, escogiendo 
una opción del menú, (+) para límites por la derecha y (-) para 
límites por la izquierda.
&amp;lt;/p&amp;gt;

&amp;lt;h3&amp;gt;¿Cómo insertar funciones?&amp;lt;/h3&amp;gt;

&amp;lt;p&amp;gt;
Para insertar las expresiones de una función f(x), debe 
utilizar los operadores aritméticos adecuados, por ejemplo, para 
una función lineal:
&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;tt&amp;gt;f(x) = 2*x + 1&amp;lt;/tt&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;
Deberá colocar el operador de multiplicación entre la constante y 
la variable x.
&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;
Para funciones que involucren operaciones de potenciación, puede 
indicarlas utilizando la notación de doble asterisco (**) de Python o 
bien el acento circunflejo (^), más característico en software 
de ingeniería, por ejemplo, para f(x)=2x&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt; + 2:
&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;tt&amp;gt;f(x) = 2*x^2 + 2&amp;lt;/tt&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;h3&amp;gt;Acerca de...&amp;lt;/h3&amp;gt;

&amp;lt;p&amp;gt;
Esta es una pequeña aplicación desarrollada en wxPython, con 
fines didácticos, para mostrar las posibilidades de integración 
con otras librerías del entorno Python.
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
Más información en 
&amp;lt;a href="http://numython.github.io"&amp;gt;Numython&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;/div&amp;gt;
"""


class App(wx.App):
    def OnInit(self):
        frame = wxdx(None)
        return True

def run():
    REDIRECT = False
    app = App(REDIRECT)
    app.MainLoop()


if __name__=='__main__':
    run()
&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>MiniApps</category><category>wxPython</category><guid>https://numython.github.io/posts/wxdx-una-gui-para-calculo-elemental/</guid><pubDate>Mon, 12 Dec 2016 22:25:00 GMT</pubDate></item><item><title>Almacenando imágenes como código utilizando img2py</title><link>https://numython.github.io/posts/2016/04/almacenando-imagenes-como-codigo/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;En esta breve entrada vamos a hablar de cómo utilizar la función &lt;code style="white-space: pre;"&gt;ìmg2py&lt;/code&gt; de wxPython, para generar códigos a partir de imágenes, y posteriormente poder utilizarlas en conjunto con&lt;code style="white-space: pre;"&gt;PyEmbeddedImage&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-GNkXb7B7Fz4/Vv4wXGbxfmI/AAAAAAAAB-I/LRZOGisJ2p0Aohh7P_4CbgbaWaSpCdT1A/s1600/img_01.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="113" src="https://3.bp.blogspot.com/-GNkXb7B7Fz4/Vv4wXGbxfmI/AAAAAAAAB-I/LRZOGisJ2p0Aohh7P_4CbgbaWaSpCdT1A/s400/img_01.png" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Lo primero que debemos hacer es importar la función del módulo &lt;code style="white-space: pre;"&gt;wx.tools.img2py&lt;/code&gt;:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;from&lt;/span&gt; wx.tools.img2py &lt;span class="im"&gt;import&lt;/span&gt; img2py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Y posteriormente sólo llamaremos a la función pasando como argumentos el archivo de la imagen y el archivo Python de salida, por ejemplo:&lt;/div&gt;&lt;br&gt;&lt;pre&gt;&lt;code&gt;img2py("icono.png", "icono.py")&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Con lo anterior se obtendrá un archivo Python &lt;code style="white-space: pre;"&gt;icono.py&lt;/code&gt; que contiene algo parecido a lo siguiente:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;#----------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# This file was generated by C:\Users\User\Desktop\LABPro\_blogs_\Posts\test_app.py&lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;from&lt;/span&gt; wx.lib.embeddedimage &lt;span class="im"&gt;import&lt;/span&gt; PyEmbeddedImage&lt;br&gt;&lt;br&gt;icono &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; PyEmbeddedImage(&lt;br&gt;    &lt;span class="st" style="color: #4070a0;"&gt;"iVBORw0KGgoAAAANSUhEUgAAAA0AAAANCAYAAABy6+R8AAAABHNCSVQICAgIfAhkiAAAAAlw"&lt;/span&gt;&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;"SFlzAAAN1wAADdcBQiibeAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoA"&lt;/span&gt;&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;"AABlSURBVCiRY2TAChryGBgYJmKXY2BgwiWBD7D819JqQxfMfHHXZMY7ZdyaGBgYKtEFNdk+"&lt;/span&gt;&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;"4bWJLOeR5ydsgtrsnxiSBe5hiG/9IrX2xR+OD4z/tbT+E20FI6M249Wr1+jnp0GuCQD2OxXd"&lt;/span&gt;&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;"g2khLwAAAABJRU5ErkJggg=="&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Luego, ese código generado lo podremos utilizar posteriormente en nuestras aplicaciones, por ejemplo para un icono:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;span class="im"&gt;from&lt;/span&gt; icono &lt;span class="im"&gt;import&lt;/span&gt; icono&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Frame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"wxPython"&lt;/span&gt;)&lt;br&gt;    fr.SetIcon(icono.GetIcon())&lt;br&gt;    fr.Show()&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;strong&gt;¿Y si necesito &lt;em&gt;embeber&lt;/em&gt; varias imágenes en un mismo archivo Python?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Si, es bastante probable que necesite esto, hacer una colección de imagenes embebidas en un mismo archivo Python, la cuestión es muy parecida, sólo tenemos que agregar el &lt;em&gt;keyword argument&lt;/em&gt;&lt;code style="white-space: pre;"&gt;append&lt;/code&gt; a la función &lt;code style="white-space: pre;"&gt;img2py&lt;/code&gt; para evitar que borre lo que se ha colocado anteriormente, un pequeño ejemplo:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; glob&lt;br&gt;&lt;span class="im"&gt;from&lt;/span&gt; wx.tools.img2py &lt;span class="im"&gt;import&lt;/span&gt; img2py&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; img &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; glob.glob(&lt;span class="st" style="color: #4070a0;"&gt;"img/*.png"&lt;/span&gt;):&lt;br&gt;        img2py(img,&lt;span class="st" style="color: #4070a0;"&gt;"iconos.py"&lt;/span&gt;, append&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Lo anterior &lt;em&gt;incrusta&lt;/em&gt; el código correspondiente a todas las imágenes PNG contenidas en la carpeta &lt;code style="white-space: pre;"&gt;img/&lt;/code&gt;.&lt;/div&gt;</description><category>Avanzado</category><category>Imágenes</category><category>wxIcon</category><category>wxPython</category><guid>https://numython.github.io/posts/2016/04/almacenando-imagenes-como-codigo/</guid><pubDate>Fri, 01 Apr 2016 14:15:00 GMT</pubDate></item><item><title>Un mini editor de texto con wxPython</title><link>https://numython.github.io/posts/2016/03/un-mini-editor-de-texto-con-wxpython/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;p&gt;En esta entrada vamos a explicar cómo desarrollar un editor de texto muy sencillo, que cumpla con algunas funciones muy básicas, tal como un bloc de notas de Windows.&lt;br&gt;&lt;br&gt;El resultado final será más o menos el siguiente:&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-3FI4UfHa5z4/VMx2-zuG70I/AAAAAAAABaQ/BP9XL6SDw7o/s1600/Captura.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="213" src="https://4.bp.blogspot.com/-3FI4UfHa5z4/VMx2-zuG70I/AAAAAAAABaQ/BP9XL6SDw7o/s1600/Captura.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;Primeramente vamos a importar los módulos a utilizar:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;import wx&lt;br&gt;import os&lt;br&gt;import os.path&lt;br&gt;&lt;/pre&gt;&lt;br&gt;El módulo wx para la librería gráfica (wxPython), y el módulo os para las operaciones con archivos de texto plano (guardar, abrir, etc...).&lt;br&gt;&lt;br&gt;Una vez importados los módulos necesarios, habremos de definir una estructura base para la aplicación. Para ello extenderemos una clase de wx.Frame, tal cómo se muestra enseguida:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;class LABTxt(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;&lt;br&gt;    def configurarEditor(self):&lt;br&gt;        """ Configura las características iniciales del editor """&lt;br&gt; &lt;br&gt;    def crearMenu(self):  &lt;br&gt;        """ Crea la barra de menú """&lt;br&gt; &lt;br&gt;    def abrirArchivo(self, event):&lt;br&gt;        """ Abre un archivo de texto plano"""&lt;br&gt; &lt;br&gt;    def guardarArchivoComo(self, event):&lt;br&gt;        """ Guarda el archivo actual abriendo un cuadro de dialogo """&lt;br&gt;  &lt;br&gt;    def guardarArchivo(self,event):&lt;br&gt;        """ Guarda el archivo actual """&lt;br&gt; &lt;br&gt;    def copiar(self,event):&lt;br&gt;        """ Copia el texto seleccionado al portapapeles """&lt;br&gt;   &lt;br&gt;    def pegar(self,event):&lt;br&gt;        """ Pega el texto ubicado en el portapapeles """&lt;br&gt; &lt;br&gt;    def configurarTema(self,event):&lt;br&gt;        """ Configura el tema a utilizar """&lt;br&gt;  &lt;br&gt;    def ayuda(self,event):&lt;br&gt;        """ Muestra la ayuda de la aplicacion """&lt;br&gt;  &lt;br&gt;    def acerca(self, event):&lt;br&gt;        """ Breve descripción del programa """&lt;br&gt;&lt;br&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    fr = LABTxt(None, "LABTxt 0.0.1")&lt;br&gt;    app.MainLoop()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;En lo anterior se define una clase LABTxt derivada de wx.Frame, con ciertos métodos definidos que posteriormente desarrollaremos y que, evidentemente, le dan funcionalidad a la aplicación.&lt;br&gt;&lt;br&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;El método __init__&lt;/b&gt;&lt;/span&gt;&lt;br&gt;En el método __init__ (comúnmente nombrado "constructor" de la clase) se colocarán los elementos básicos de la aplicación, en este caso un wx.TextCtrl y el Sizer correspondiente, tal como se muestra enseguida:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;def __init__(self,parent,title):&lt;br&gt;    wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;    if os.path.isfile("icono.png"):&lt;br&gt;        self.SetIcon(wx.Icon('icono.png'))&lt;br&gt;    self.archivo='untitled.txt'&lt;br&gt;    p=wx.Panel(self, -1)&lt;br&gt;  &lt;br&gt;    # Sizer&lt;br&gt;    sz=wx.BoxSizer(wx.VERTICAL)&lt;br&gt;  &lt;br&gt;    # Editor&lt;br&gt;    self.editor=wx.TextCtrl(p, -1, "", style=wx.TE_MULTILINE)&lt;br&gt;    self.configurarEditor()&lt;br&gt;  &lt;br&gt;    # Agregar al sizer&lt;br&gt;    sz.Add(self.editor, 1, wx.EXPAND)&lt;br&gt;    p.SetSizer(sz)&lt;br&gt;  &lt;br&gt;    # Crear barra de menu&lt;br&gt;    self.crearMenu()&lt;br&gt;    self.Show()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;Colocamos un ícono a la aplicación (en el caso de que este exista), se crea un panel sobre el cual se agregará el control de texto. Enseguida se agrega un wx.TextCtrl con la propiedad style definida como wx.TE_MULTILINE, que permitirá tener un campo de texto multilínea, simulando de esta manera el editor que necesitamos. Se "llama" al método configurarEditor que simplemente configura la fuente y color de fondo del mismo. Finalmente se crea la barra de menús y se muestra la ventana con el método Show.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;El método configurarEditor&lt;/b&gt;&lt;/span&gt;&lt;br&gt;Este método define las características de la fuente y el color de fondo a utilizar.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;El método crearMenu&lt;/b&gt;&lt;/span&gt;&lt;br&gt;Aquí se crea la barra de menús con sus respectivos ítems y se agrega la funcionalidad (eventos) a cada uno de ellos, mediante el uso del método Bind de la clase wx.Frame.&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;def crearMenu(self):  &lt;br&gt;    """ Crea la barra de menú """&lt;br&gt;    marchivo=wx.Menu()&lt;br&gt;    abrir=marchivo.Append(-1, "Abrir\tCtrl-O")&lt;br&gt;    guardar=marchivo.Append(-1, "Guardar\tCtrl-S")&lt;br&gt;    guardarComo=marchivo.Append(-1, "Guardar como")&lt;br&gt;  &lt;br&gt;    meditar=wx.Menu()&lt;br&gt;    copiar=meditar.Append(-1, "Copiar\tCtrl-C")&lt;br&gt;    pegar=meditar.Append(-1, "Pegar\tCtrl-V")&lt;br&gt;  &lt;br&gt;    self.mtema=wx.Menu()&lt;br&gt;    classic=self.mtema.Append(-1, "Classic")&lt;br&gt;    dark=self.mtema.Append(-1, "Dark")&lt;br&gt;    retro=self.mtema.Append(-1, "Retro")&lt;br&gt;    pink=self.mtema.Append(-1, "Pink")&lt;br&gt;  &lt;br&gt;    mayuda=wx.Menu()&lt;br&gt;    ayuda=mayuda.Append(-1, "Ayuda")&lt;br&gt;    acerca=mayuda.Append(-1, "Acerca de...")&lt;br&gt;  &lt;br&gt;    barraMenu=wx.MenuBar()&lt;br&gt;    barraMenu.Append(marchivo, "Archivo")&lt;br&gt;    barraMenu.Append(meditar, "Editar")&lt;br&gt;    barraMenu.Append(self.mtema, "Seleccionar tema")&lt;br&gt;    barraMenu.Append(mayuda, "Ayuda")&lt;br&gt;    self.SetMenuBar(barraMenu)&lt;br&gt;  &lt;br&gt;    # Definición de "eventos"&lt;br&gt;    self.Bind(wx.EVT_MENU, self.abrirArchivo, abrir)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.guardarArchivoComo, guardarComo)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.guardarArchivo, guardar)&lt;br&gt;  &lt;br&gt;    self.Bind(wx.EVT_MENU, self.copiar, copiar)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.pegar, pegar)&lt;br&gt;  &lt;br&gt;    self.Bind(wx.EVT_MENU, self.configurarTema, classic)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.configurarTema, dark)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.configurarTema, retro)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.configurarTema, pink)&lt;br&gt;  &lt;br&gt;    self.Bind(wx.EVT_MENU, self.acerca, acerca)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.ayuda, ayuda)&lt;br&gt;&lt;/pre&gt;&lt;br&gt;Notará que cada ítem de los menús se "conecta" a un método de la propia clase que define la acción que se ejecutará en cada caso.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;El editor...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;Finalmente os dejo el código completo del editor. Desde luego existen muchas mejoras que pueden hacerse.&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;# -*- coding: utf-8 -*-&lt;br&gt;# ================================&lt;br&gt;# Por: Jorge De Los Santos  &lt;br&gt;# E-mail: delossantosmfq@gmail.com&lt;br&gt;# Licencia: BSD License&lt;br&gt;# ================================&lt;br&gt;&lt;br&gt;import wx&lt;br&gt;import os&lt;br&gt;import os.path&lt;br&gt;&lt;br&gt;class LABTxt(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;        if os.path.isfile("icono.png"):&lt;br&gt;            self.SetIcon(wx.Icon('icono.png'))&lt;br&gt;        self.archivo='untitled.txt'&lt;br&gt;        p=wx.Panel(self, -1)&lt;br&gt;  &lt;br&gt;        # Sizer&lt;br&gt;        sz=wx.BoxSizer(wx.VERTICAL)&lt;br&gt;  &lt;br&gt;        # Editor&lt;br&gt;        self.editor=wx.TextCtrl(p, -1, "", style=wx.TE_MULTILINE)&lt;br&gt;        self.configurarEditor()&lt;br&gt;  &lt;br&gt;        # Agregar al sizer&lt;br&gt;        sz.Add(self.editor, 1, wx.EXPAND)&lt;br&gt;        p.SetSizer(sz)&lt;br&gt;  &lt;br&gt;        # Crear barra de menu&lt;br&gt;        self.crearMenu()&lt;br&gt;        self.Show()&lt;br&gt;&lt;br&gt;    def configurarEditor(self):&lt;br&gt;        """ Configura las características iniciales del editor """&lt;br&gt;        self.fuente=wx.Font(12, wx.MODERN, wx.NORMAL, wx.NORMAL)&lt;br&gt;        self.fuente.SetFaceName("Courier New")&lt;br&gt;        self.editor.SetFont(self.fuente)&lt;br&gt;        self.editor.SetBackgroundStyle(True)&lt;br&gt; &lt;br&gt;    def crearMenu(self):  &lt;br&gt;        """ Crea la barra de menú """&lt;br&gt;        marchivo=wx.Menu()&lt;br&gt;        abrir=marchivo.Append(-1, "Abrir\tCtrl-O")&lt;br&gt;        guardar=marchivo.Append(-1, "Guardar\tCtrl-S")&lt;br&gt;        guardarComo=marchivo.Append(-1, "Guardar como")&lt;br&gt;  &lt;br&gt;        meditar=wx.Menu()&lt;br&gt;        copiar=meditar.Append(-1, "Copiar\tCtrl-C")&lt;br&gt;        pegar=meditar.Append(-1, "Pegar\tCtrl-V")&lt;br&gt;  &lt;br&gt;        self.mtema=wx.Menu()&lt;br&gt;        classic=self.mtema.Append(-1, "Classic")&lt;br&gt;        dark=self.mtema.Append(-1, "Dark")&lt;br&gt;        retro=self.mtema.Append(-1, "Retro")&lt;br&gt;        pink=self.mtema.Append(-1, "Pink")&lt;br&gt;  &lt;br&gt;        mayuda=wx.Menu()&lt;br&gt;        ayuda=mayuda.Append(-1, "Ayuda")&lt;br&gt;        acerca=mayuda.Append(-1, "Acerca de...")&lt;br&gt;  &lt;br&gt;        barraMenu=wx.MenuBar()&lt;br&gt;        barraMenu.Append(marchivo, "Archivo")&lt;br&gt;        barraMenu.Append(meditar, "Editar")&lt;br&gt;        barraMenu.Append(self.mtema, "Seleccionar tema")&lt;br&gt;        barraMenu.Append(mayuda, "Ayuda")&lt;br&gt;        self.SetMenuBar(barraMenu)&lt;br&gt;  &lt;br&gt;        # Definición de "eventos"&lt;br&gt;        self.Bind(wx.EVT_MENU, self.abrirArchivo, abrir)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.guardarArchivoComo, guardarComo)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.guardarArchivo, guardar)&lt;br&gt;  &lt;br&gt;        self.Bind(wx.EVT_MENU, self.copiar, copiar)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.pegar, pegar)&lt;br&gt;  &lt;br&gt;        self.Bind(wx.EVT_MENU, self.configurarTema, classic)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.configurarTema, dark)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.configurarTema, retro)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.configurarTema, pink)&lt;br&gt;  &lt;br&gt;        self.Bind(wx.EVT_MENU, self.acerca, acerca)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.ayuda, ayuda)&lt;br&gt;&lt;br&gt;    def abrirArchivo(self, event):&lt;br&gt;        dlg=wx.FileDialog(self, "Abrir archivo", os.getcwd(), style=wx.OPEN)&lt;br&gt;        if dlg.ShowModal() == wx.ID_OK:&lt;br&gt;            try:&lt;br&gt;                fid=open(dlg.GetPath(),'r')&lt;br&gt;                texto=fid.readlines()&lt;br&gt;                self.texto="".join(texto)&lt;br&gt;                self.texto = self.texto.decode("utf8")&lt;br&gt;                fid.close()&lt;br&gt;                self.editor.SetValue(self.texto)&lt;br&gt;                self.archivo=dlg.GetPath()&lt;br&gt;                self.SetTitle("LABTxt "+self.archivo)&lt;br&gt;            except:&lt;br&gt;                wx.MessageBox(u"Archivo no válido","Error")&lt;br&gt;        dlg.Destroy()&lt;br&gt;&lt;br&gt;    def guardarArchivoComo(self, event):&lt;br&gt;        """ Guarda el archivo actual abriendo un cuadro de dialogo """&lt;br&gt;        dlg=wx.FileDialog(self, "Guardar", os.getcwd(), style=wx.SAVE)&lt;br&gt;        if dlg.ShowModal() == wx.ID_OK:&lt;br&gt;            fid=open(dlg.GetPath(),'w')&lt;br&gt;            txt=str(self.editor.GetValue().encode('utf8'))&lt;br&gt;            fid.write(txt)&lt;br&gt;            fid.close()&lt;br&gt;            self.archivo=dlg.GetPath()&lt;br&gt;            self.SetTitle("LABTxt 0.0.1  "+self.archivo)&lt;br&gt;        dlg.Destroy()&lt;br&gt;&lt;br&gt;    def guardarArchivo(self,event):&lt;br&gt;        """ Guarda el archivo actual """&lt;br&gt;        if hasattr(self, 'archivo'):&lt;br&gt;            fid=open(self.archivo,'w')&lt;br&gt;            txt=str(self.editor.GetValue().encode('utf8'))&lt;br&gt;            fid.write(txt)&lt;br&gt;            fid.close()&lt;br&gt;            wx.MessageBox("Hecho","LABTxt")&lt;br&gt;            self.SetTitle("LABTxt 0.0.1  "+self.archivo)&lt;br&gt;        else:&lt;br&gt;            self.guardarArchivoComo(None)&lt;br&gt;&lt;br&gt;    def copiar(self,event):&lt;br&gt;        """ Copia el texto seleccionado al portapapeles """&lt;br&gt;        texto=wx.TextDataObject(self.editor.GetStringSelection())&lt;br&gt;        if wx.TheClipboard.Open():&lt;br&gt;            wx.TheClipboard.SetData(texto)&lt;br&gt;            wx.TheClipboard.Close()&lt;br&gt;&lt;br&gt;    def pegar(self,event):&lt;br&gt;        """ Pega el texto ubicado en el portapapeles """&lt;br&gt;        txt=wx.TextDataObject()&lt;br&gt;        if wx.TheClipboard.Open():&lt;br&gt;            success=wx.TheClipboard.GetData(txt)&lt;br&gt;            wx.TheClipboard.Close()&lt;br&gt;        if success:&lt;br&gt;            self.editor.SetInsertionPoint(self.editor.GetInsertionPoint()) &lt;br&gt;            self.editor.write(txt.GetText())&lt;br&gt; &lt;br&gt;    def configurarTema(self,event):&lt;br&gt;         tema_sel=self.mtema.FindItemById(event.GetId()).GetText()&lt;br&gt;         temas={'Classic':((0,0,255),(255,255,255)),&lt;br&gt;        'Dark':((200,200,200),(0,0,0)),&lt;br&gt;        'Retro':((0,255,0),(0,0,0)),&lt;br&gt;        'Pink':((20,50,50),(250,180,180))}&lt;br&gt;        self.editor.SetForegroundColour(temas[tema_sel][0])&lt;br&gt;        self.editor.SetBackgroundColour(temas[tema_sel][1])&lt;br&gt;        self.editor.Refresh()&lt;br&gt;  &lt;br&gt;    def ayuda(self,event):&lt;br&gt;        wx.MessageBox("No disponible","LABTxt")&lt;br&gt;&lt;br&gt;    def acerca(self, event):&lt;br&gt;        descripcion=""" Editor de texto sin formato desarrollado en&lt;br&gt;        wxPython """&lt;br&gt;        info=wx.AboutDialogInfo()&lt;br&gt;        info.SetName('LABTxt')&lt;br&gt;        info.SetDescription(descripcion)&lt;br&gt;        info.SetVersion('0.0.1')&lt;br&gt;        info.SetLicense('BSD License')&lt;br&gt;        info.SetDevelopers(['Jorge De Los Santos'])&lt;br&gt;        info.SetWebSite(('labdls.blogspot.mx','LAB DLS'))&lt;br&gt;        info.SetCopyright('(c) 2014')&lt;br&gt;        wx.AboutBox(info)&lt;br&gt;&lt;br&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    fr = LABTxt(None, "LABTxt 0.0.1")&lt;br&gt;    app.MainLoop()&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;</description><category>MiniApps</category><category>wxPython</category><category>wxTextCtrl</category><guid>https://numython.github.io/posts/2016/03/un-mini-editor-de-texto-con-wxpython/</guid><pubDate>Tue, 22 Mar 2016 10:27:00 GMT</pubDate></item><item><title>Primer aplicación en wxPython</title><link>https://numython.github.io/posts/2016/03/primer-aplicacion-en-wxpython/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;&lt;a href="http://www.wxpython.org/"&gt;wxPython&lt;/a&gt; es un binding de la biblioteca gráfica wxWidgets para el lenguaje de programación Python. La biblioteca wxWidgets se caracteriza por ser multiplataforma, por lo que su uso junto a Python permite el desarrollo rápido de aplicaciones gráficas multiplataforma.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Para desarrollar una aplicación en wxPython, normalmente primero debe crearse una clase heredada de wx.Frame:&lt;/div&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;import wx&lt;br&gt;&lt;br&gt;class MiAplicacion(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;&lt;/pre&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;En el código anterior primero se importa el módulo &lt;span&gt;wx&lt;/span&gt;, enseguida se define una clase llamada &lt;b&gt;MiAplicacion&lt;/b&gt;, la cual hereda de &lt;span&gt;wx.Frame&lt;/span&gt;. El método &lt;span&gt;__init__&lt;/span&gt; de la clase creada debe contener al menos dos argumentos de entrada, self y parent, donde &lt;span&gt;self&lt;/span&gt; es una cadena utilizada por convención para referenciar a un objeto de la propia clase y&lt;span&gt; parent&lt;/span&gt; es el objeto gráfico padre del Frame que se creará cuando instanciemos un objeto de esta clase. El otro argumento definido, title, será una cadena que se mostrará en la parte superior de la ventana. El método &lt;span&gt;__init__&lt;/span&gt; podría considerarse como el "constructor" de la clase, cuando instanciemos un objeto de esa clase, se pasarán como argumentos de entrada los parámetros definidos en &lt;span&gt;__init__&lt;/span&gt;, exceptuando self.&lt;br&gt;&lt;br&gt;&lt;/div&gt;Una vez definida la clase, ahora vamos a instanciar un objeto de esa clase como sigue:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    frame = MiAplicacion(None, u"Mi aplicación")&lt;br&gt;    frame.Show()&lt;br&gt;    app.MainLoop()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Primero se crea un objeto de la clase wx.App, el cuál se encargará de "lanzar" la aplicación y ejecutar las órdenes necesarias para poder interactuar con la interfaz gráfica. Luego, se define un objeto frame de la clase &lt;b&gt;MiAplicación&lt;/b&gt;, teniendo como primer argumento None, indicando que no tendrá un objeto gráfico padre, como segundo argumento se pasa una cadena de texto con el título que queremos colocar en la parte superior de la ventana. Finalmente, el método MainLoop de la clase wx.App inicia la aplicación wxPython. En la siguiente figura se muestra la ventana resultante.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-NjuF491TD2A/VopLWQ-hW2I/AAAAAAAABn8/rVvk3G6Hvlc/s1600/img_01.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="266" src="https://4.bp.blogspot.com/-NjuF491TD2A/VopLWQ-hW2I/AAAAAAAABn8/rVvk3G6Hvlc/s400/img_01.PNG" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Es recomendable que el método Show sea implementado dentro del método __init__ de la clase derivada de wx.Frame, además podemos centrar la interfaz gráfica en la pantalla para obtener una mejor visualización, quedando nuestro código como sigue:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;pre class="brush: python"&gt;# -*- coding: utf8 -*-&lt;br&gt;import wx&lt;br&gt;&lt;br&gt;class MiAplicacion(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;        self.Centre(True)&lt;br&gt;        self.Show()&lt;br&gt;&lt;br&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    frame = MiAplicacion(None, u"Mi aplicación")&lt;br&gt;    app.MainLoop()&lt;/pre&gt;&lt;br&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;¿Y... cómo añadir controles?&lt;/span&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;Hasta ahora tenemos simplemente la ventana de la aplicación, sin ningún tipo de control gráfico que nos permita interactuar con el programa. Para añadir controles, en principio, la cuestión no es muy complicada, sólo habrá que especificar el tipo de control y algunos parámetros requeridos, véase el ejemplo a continuación que muestra como agregar un campo de texto editable (wx.TextCtrl) que permite emular un editor de texto plano:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;# -*- coding: utf8 -*-&lt;br&gt;import wx&lt;br&gt;&lt;br&gt;class MiAplicacion(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(400,300))&lt;br&gt; boton = wx.TextCtrl(self, style=wx.TE_MULTILINE)&lt;br&gt; self.Centre(True)&lt;br&gt; self.Show()&lt;br&gt;&lt;br&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    frame = MiAplicacion(None, u"Mi aplicación")&lt;br&gt;    app.MainLoop()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-ArthMktsvw8/VopRPVLJAqI/AAAAAAAABoQ/NGR3zNOI7Bc/s1600/img_02.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="https://2.bp.blogspot.com/-ArthMktsvw8/VopRPVLJAqI/AAAAAAAABoQ/NGR3zNOI7Bc/s320/img_02.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;Como puede observarse, en el código sólo se añade una línea, en la cual se instancia un objeto de la clase wx.TextCtrl, pasándole como parent el Frame principal, y el argumento style especificando que se permita el uso de líneas múltiples dentro de ese control.&lt;br&gt;&lt;br&gt;¿Y si quiero añadir más controles?, bueno aquí la cuestión se complica un poco, pero vamos, nada que no se pueda resolver. Aunque para ello ha de introducirse otro concepto básico en el desarrollo de aplicaciones en wxPython: los Sizers, que son clases que permiten alinear y organizar los objetos dentro de una ventana o contenedores, mediante algoritmos de posicionamiento. Evidentemente esto lo estaremos tratando en otro post, para no alargarnos demasiado.&lt;br&gt;&lt;br&gt;Para tener una referencia más sólida respecto al desarrollo de aplicaciones en wxPython es recomendable que revisen el siguiente libro:&lt;br&gt;&lt;br&gt;&lt;a href="http://serv.yanchick.org/Books/%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/python/Manning.Publications.wxPython.in.Action.Mar.2006.pdf"&gt;wxPython in Action  [Noel Rappin and Robin Dunn]&lt;/a&gt;&lt;/div&gt;</description><category>wxFrame</category><category>wxPython</category><category>wxTextCtrl</category><guid>https://numython.github.io/posts/2016/03/primer-aplicacion-en-wxpython/</guid><pubDate>Tue, 22 Mar 2016 10:25:00 GMT</pubDate></item><item><title>Imágenes en menús de wxPython</title><link>https://numython.github.io/posts/2016/03/imagenes-en-menus-de-wxpython/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;Los menús en wxPython se definen de manera muy sencilla creando primeramente la barra de menú principal, derivada de la clase &lt;span&gt;wx.MenuBar&lt;/span&gt;, enseguida se definen los menús principales que compondrán la barra de menú, derivando estos de la clase&lt;span&gt; wx.Menu&lt;/span&gt;, finalmente se agregan los sub-menús que tienen cómo base la clase &lt;span&gt;wx.MenuItem&lt;/span&gt;. En el siguiente esquema se muestra la jerarquía de menús en wxPython.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=9181413740889187353" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=9181413740889187353" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=9181413740889187353" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;/a&gt;&lt;a href="http://2.bp.blogspot.com/-r8eYG6YYEqM/VpwY4YP-YJI/AAAAAAAABrY/jKJ8BfN2Y_s/s1600/wxmenu.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-r8eYG6YYEqM/VpwY4YP-YJI/AAAAAAAABrY/jKJ8BfN2Y_s/s1600/wxmenu.png"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div class="figure"&gt;&lt;/div&gt;Un ejemplo muy básico:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.mb &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.MenuBar() &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Creamos barra de menú&lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Creamos el menú archivo&lt;/span&gt;&lt;br&gt;&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Menu()&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Creamos los MenuItem (Guardar, Abrir)&lt;/span&gt;&lt;br&gt;&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.guardar &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.MenuItem(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="st" style="color: #4070a0;"&gt;"Guardar"&lt;/span&gt;)&lt;br&gt;&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo.AppendItem(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.guardar)&lt;br&gt;&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.abrir &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.MenuItem(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="st" style="color: #4070a0;"&gt;"Abrir"&lt;/span&gt;,&lt;span class="st" style="color: #4070a0;"&gt;""&lt;/span&gt;)&lt;br&gt;&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo.AppendItem(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.abrir)&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Agregando el menú "Archivo" a la barra&lt;/span&gt;&lt;br&gt;&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.mb.Append(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo, &lt;span class="st" style="color: #4070a0;"&gt;"Archivo"&lt;/span&gt;)&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Configurando a "mb" como la barra de menú del Frame&lt;/span&gt;&lt;br&gt;&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.SetMenuBar(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.mb)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;En lo anterior se supone que todo ese código está inmerso dentro de una clase heredada de &lt;code style="white-space: pre;"&gt;wx.Frame&lt;/code&gt;. Así, se crea una barra de menú similar a lo mostrado en la siguiente imagen:&lt;/div&gt;&lt;div class="figure"&gt;&lt;br&gt;&lt;div class="caption"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-OJKUA24TEVI/VpwY4Zy14YI/AAAAAAAABrc/t78yJZ5aLtA/s1600/img1.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-OJKUA24TEVI/VpwY4Zy14YI/AAAAAAAABrc/t78yJZ5aLtA/s1600/img1.png"&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="caption"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="caption"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Para agregar una imagen al menú, se debe utilizar el método &lt;code style="white-space: pre;"&gt;SetBitmap&lt;/code&gt; de la clase &lt;code style="white-space: pre;"&gt;wx.MenuItem&lt;/code&gt;, pasando como parámetro un objeto de la clase &lt;code style="white-space: pre;"&gt;wx.Bitmap&lt;/code&gt;, el cual deberá contener la información necesaria de la imagen o icono a utilizar, debe tomarse en cuenta que el método &lt;code style="white-space: pre;"&gt;SetBitmap&lt;/code&gt; deberá "llamarse" antes de agregar el sub-menú al menú padre, de lo contrario no se verá reflejado dicho método.&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Enseguida se adjunta el código completo de una aplicación wxPython que incluye imágenes en menús.&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; MiAplicacion(wx.Frame):&lt;br&gt;  &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;    wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;300&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;200&lt;/span&gt;))&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.createMenu() &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Llamamos al método que inicializa el menú&lt;/span&gt;&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Centre(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;    &lt;br&gt;  &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; createMenu(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;):&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;"""&lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;    Crea el menú de la aplicación&lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;    """&lt;/span&gt;&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Menú archivo&lt;/span&gt;&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Menu()&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Agregamos el sub-menú Guardar&lt;/span&gt;&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.guardar &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.MenuItem(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="st" style="color: #4070a0;"&gt;"Guardar"&lt;/span&gt;)&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.guardar.SetBitmap(wx.Bitmap( &lt;span class="st" style="color: #4070a0;"&gt;u"img/ic_save.png"&lt;/span&gt;, wx.BITMAP_TYPE_ANY ))&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo.AppendItem(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.guardar)&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Agregamos el sub-menú Abrir&lt;/span&gt;&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.abrir &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.MenuItem(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="st" style="color: #4070a0;"&gt;"Abrir"&lt;/span&gt;)&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.abrir.SetBitmap(wx.Bitmap( &lt;span class="st" style="color: #4070a0;"&gt;u"img/ic_open.png"&lt;/span&gt;, wx.BITMAP_TYPE_ANY ))&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo.AppendItem(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.abrir)&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Agregamos el sub-menú Imprimir&lt;/span&gt;&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.imprimir &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.MenuItem(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="st" style="color: #4070a0;"&gt;"Imprimir"&lt;/span&gt;)&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.imprimir.SetBitmap(wx.Bitmap( &lt;span class="st" style="color: #4070a0;"&gt;u"img/ic_print.png"&lt;/span&gt;, wx.BITMAP_TYPE_ANY ))&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo.AppendItem(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.imprimir)&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Agregamos el sub-menú Salir&lt;/span&gt;&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.salir &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.MenuItem(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="st" style="color: #4070a0;"&gt;"Salir"&lt;/span&gt;)&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.salir.SetBitmap(wx.Bitmap( &lt;span class="st" style="color: #4070a0;"&gt;u"img/ic_exit.png"&lt;/span&gt;, wx.BITMAP_TYPE_ANY ))&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo.AppendItem(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.salir)&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Creamos la barra de menú principal y la configuramos&lt;/span&gt;&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.mb &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.MenuBar()&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.mb.Append(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.archivo, &lt;span class="st" style="color: #4070a0;"&gt;"Archivo"&lt;/span&gt;)&lt;br&gt;    &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.SetMenuBar(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.mb)&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;  app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;  frame &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; MiAplicacion(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Imágenes Menú"&lt;/span&gt;)&lt;br&gt;  app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="figure"&gt;&lt;br&gt;&lt;div class="caption"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-aLIBhIG0F8c/VpwY4ed7L1I/AAAAAAAABrU/TlfK-Yk2POA/s1600/img2.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-aLIBhIG0F8c/VpwY4ed7L1I/AAAAAAAABrU/TlfK-Yk2POA/s1600/img2.png"&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="caption"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="caption"&gt;Note que la clase &lt;span&gt;wx.Bitmap&lt;/span&gt; necesita como parámetro de entrada la ruta donde se encuentra la imagen y una constante &lt;span&gt;wx.BITMAP_TYPE_ANY&lt;/span&gt;, que simplemente especifica el tipo de imagen leída. Puede consultar más en la documentación de &lt;span&gt;&lt;a href="http://www.wxpython.org/docs/api/wx.Bitmap-class.html"&gt;wx.Bitmap&lt;/a&gt;.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</description><category>wxMenu</category><category>wxMenuBar</category><category>wxMenuItem</category><category>wxPython</category><guid>https://numython.github.io/posts/2016/03/imagenes-en-menus-de-wxpython/</guid><pubDate>Tue, 22 Mar 2016 10:24:00 GMT</pubDate></item><item><title>Borrar líneas en Matplotlib de manera interactiva</title><link>https://numython.github.io/posts/2016/02/borrar-lineas-en-matplotlib-de-manera/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;Matplotlib es una librería normalmente utilizada para trazar gráficas que habrán de exportarse como un archivo "estático" e incluirse en algún tipo de documento posteriormente. Pero además, Matplotlib también tiene algunas características que permiten que el usuario pueda interactuar, tales como los widgets o los eventos definidos por el usuario. Y esta última característica vamos a aprovechar en este post para ver cómo poder borrar líneas de una gráfica Matplotlib una vez que esta ha sido creada, esto mediante la selección a través del mouse.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Los eventos en Matplotlib se "conectan" utilizando el método &lt;code style="white-space: pre;"&gt;mpl_connect&lt;/code&gt; de la clase &lt;code style="white-space: pre;"&gt;FigureCanvas&lt;/code&gt;, mediante la sintaxis siguiente:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;hevt &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.canvas.mpl_connect(&lt;span class="st" style="color: #4070a0;"&gt;'tipo_evento'&lt;/span&gt;, fun)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Donde &lt;code style="white-space: pre;"&gt;hevt&lt;/code&gt; es una variable en la cual se guarda la referencia al evento y que puede ser utilizada para desconectarlo cuando no lo necesitemos más, &lt;code style="white-space: pre;"&gt;fig&lt;/code&gt; es una instancia de la clase &lt;code style="white-space: pre;"&gt;Figure&lt;/code&gt;, &lt;code style="white-space: pre;"&gt;tipo_evento&lt;/code&gt; es uno de los eventos que pueden ser conectados en Matplotlib, cuya lista puede ver &lt;a href="http://matplotlib.org/users/event_handling.html#event-connections"&gt;aquí&lt;/a&gt;, y &lt;code style="white-space: pre;"&gt;fun&lt;/code&gt; es una función en la cual deberá programarse la respuesta de nuestro programa cuando se lance el evento.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Por ahora nos interesa el tipo de evento &lt;code style="white-space: pre;"&gt;pick_event&lt;/code&gt;, el cual se "lanza" cuando un objeto en el canvas actual es seleccionado. Así, para conectar nuestro evento haremos algo como lo siguiente:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;pick &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.canvas.mpl_connect(&lt;span class="st" style="color: #4070a0;"&gt;"pick_event"&lt;/span&gt;, OnSelect)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Ahora vamos a por todo el código y enseguida explicamos para qué cada cosa:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnSelect(event):&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    dlg &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.MessageDialog(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Desea borrar"&lt;/span&gt;,&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;'Matplotlib Demo'&lt;/span&gt;, wx.YES_NO&lt;span class="op" style="color: #666666;"&gt;|&lt;/span&gt;wx.ICON_QUESTION)&lt;br&gt;    &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; dlg.ShowModal() &lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt; wx.ID_YES:&lt;br&gt;        event.artist.remove()&lt;br&gt;    dlg.Destroy()&lt;br&gt;    app.MainLoop()&lt;br&gt;    fig.canvas.draw()&lt;br&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Definir datos a plotear&lt;/span&gt;&lt;br&gt;X &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.random.random((&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;))&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Crear figure y axes&lt;/span&gt;&lt;br&gt;fig &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; plt.figure()&lt;br&gt;ax &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.add_subplot(&lt;span class="dv" style="color: #40a070;"&gt;111&lt;/span&gt;)&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Graficar datos&lt;/span&gt;&lt;br&gt;ax.plot(X, picker&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Conectar evento "pick_event"&lt;/span&gt;&lt;br&gt;pick &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.canvas.mpl_connect(&lt;span class="st" style="color: #4070a0;"&gt;"pick_event"&lt;/span&gt;, OnSelect)&lt;br&gt;plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-3IUBZXZPaX0/Vs12S30wNaI/AAAAAAAABxU/cD9orfSktFo/s1600/img_01.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="268" src="https://4.bp.blogspot.com/-3IUBZXZPaX0/Vs12S30wNaI/AAAAAAAABxU/cD9orfSktFo/s320/img_01.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Primero, importamos, claro, los módulos a utilizar. Lo de wxPython es &lt;em&gt;opcional&lt;/em&gt;, sólo nos servirá para confirmar si realmente queremos borrar cierta línea y puede sustituirse con cualquier otra librería gráfica, Tkinter por ejemplo. Luego, definimos unos datos aleatorios, creamos nuestra &lt;code style="white-space: pre;"&gt;Figure&lt;/code&gt; y nuestro &lt;code style="white-space: pre;"&gt;Axes&lt;/code&gt; de la manera en que se debe, y posteriormente &lt;em&gt;ploteamos&lt;/em&gt; los datos utilizando &lt;code style="white-space: pre;"&gt;plot&lt;/code&gt;, pero adicionando el&lt;em&gt;keyword argument&lt;/em&gt; &lt;code style="white-space: pre;"&gt;picker=True&lt;/code&gt; para decirle a Matplotlib que para nuestro objeto gráfico resultante requerimos que esté disponible para ser seleccionado mediante el mouse. Y finalmente conectamos el evento de tipo &lt;code style="white-space: pre;"&gt;"pick_event"&lt;/code&gt; al canvas correspondiente, pasando a la función &lt;code style="white-space: pre;"&gt;OnSelect&lt;/code&gt; como la encargada de &lt;em&gt;dar una respuesta&lt;/em&gt; a ese evento.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;La función &lt;code style="white-space: pre;"&gt;OnSelect&lt;/code&gt; bien puede reducirse a dos líneas si es que no requerimos confirmación de borrado, algo como:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnSelect(event):&lt;br&gt;    event.artist.remove()&lt;br&gt;    fig.canvas.draw()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;El resto de código es para crear un cuadro de diálogo en wxPython que nos pregunta si realmente queremos borrar la línea que hemos seleccionado.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/Python%20para%20Ingenieros/Posts/Borrar%20lineas%20en%20Matplotlib%20de%20manera%20interactiva/img/img_01.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Podríamos &lt;em&gt;mejorar&lt;/em&gt; un poquito nuestro "demo" si por ejemplo cada vez que seleccionamos una línea esta sea modificada para distinguirse un poco más del resto, por ejemplo modificar su grosor, y en caso de no confirmar su borrado entonces regresar al aspecto original. Agregando algunas líneas nos queda un código más o menos como este:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnSelect(event):&lt;br&gt;    klw &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;&lt;br&gt;    event.artist.set_lw(event.artist.get_lw() &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; klw)&lt;br&gt;    fig.canvas.draw()&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    dlg &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.MessageDialog(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Desea borrar"&lt;/span&gt;,&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;'Matplotlib Demo'&lt;/span&gt;, wx.YES_NO&lt;span class="op" style="color: #666666;"&gt;|&lt;/span&gt;wx.ICON_QUESTION)&lt;br&gt;    &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; dlg.ShowModal() &lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt; wx.ID_YES:&lt;br&gt;        event.artist.remove()&lt;br&gt;    &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;else&lt;/span&gt;:&lt;br&gt;        event.artist.set_lw(event.artist.get_lw() &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt; klw)&lt;br&gt;    dlg.Destroy()&lt;br&gt;    app.MainLoop()&lt;br&gt;    fig.canvas.draw()&lt;br&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Definir datos a plotear&lt;/span&gt;&lt;br&gt;X &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.random.random((&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;))&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Crear figure y axes&lt;/span&gt;&lt;br&gt;fig &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; plt.figure()&lt;br&gt;ax &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.add_subplot(&lt;span class="dv" style="color: #40a070;"&gt;111&lt;/span&gt;)&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Graficar datos&lt;/span&gt;&lt;br&gt;ax.plot(X, picker&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Conectar evento "pick_event"&lt;/span&gt;&lt;br&gt;pick &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.canvas.mpl_connect(&lt;span class="st" style="color: #4070a0;"&gt;"pick_event"&lt;/span&gt;, OnSelect)&lt;br&gt;plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/Python%20para%20Ingenieros/Posts/Borrar%20lineas%20en%20Matplotlib%20de%20manera%20interactiva/img/img_02.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-yqflea3-OII/Vs12TDN5p0I/AAAAAAAABxY/Q6NiQ0rhYms/s1600/img_02.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="267" src="https://1.bp.blogspot.com/-yqflea3-OII/Vs12TDN5p0I/AAAAAAAABxY/Q6NiQ0rhYms/s320/img_02.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Y bueno, con esto finalizamos esta pequeña introducción a las formas interactivas de Matplotlib, desde luego existen muchas posibilidades para implementar, de tal modo que nos quede algo más &lt;em&gt;chulo&lt;/em&gt;.&lt;/div&gt;</description><category>mathjax</category><category>matplotlib</category><category>wxPython</category><guid>https://numython.github.io/posts/2016/02/borrar-lineas-en-matplotlib-de-manera/</guid><pubDate>Wed, 24 Feb 2016 15:24:00 GMT</pubDate></item><item><title>Utilizando grillas en wxPython (wx.grid.Grid)</title><link>https://numython.github.io/posts/2016/02/las-grillas-o-conjunto-de-celdas-se/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;Las grillas o conjunto de celdas se utilizan para mostrar conjuntos de datos numéricos y/o cualquier otro tipo en una interfaz sencilla y muy similar a las tradicionales celdas de las hojas de cálculos.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;En wxPython para crear una grilla debemos importar el módulo &lt;code style="white-space: pre;"&gt;wx.grid&lt;/code&gt; y utilizar la clase &lt;code style="white-space: pre;"&gt;Grid&lt;/code&gt; de dicho módulo. Para inicializar/instanciar un objeto de la clase &lt;code style="white-space: pre;"&gt;Grid&lt;/code&gt; debemos pasarle como argumentos mínimos el objeto padre y un ID, y enseguida debemos definir el número de filas y columnas que compondrán la grilla utilizando el método &lt;code style="white-space: pre;"&gt;CreateGrid&lt;/code&gt;, tal cómo se observa en el siguiente ejemplo:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx.grid &lt;span class="im"&gt;as&lt;/span&gt; wxgrid&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;250&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;250&lt;/span&gt;))&lt;br&gt;        &lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wxgrid.Grid(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.CreateGrid(&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;)&lt;br&gt;        &lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Centre(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Test Grid"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/wxPython/Posts/Utilizando%20grillas%20de%20celdas%20en%20wxPython%20(wx.grid.Grid)/img/img_01.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-cwwDXrmxmqM/VsyJcCahecI/AAAAAAAABwM/VGZTNcZshW4/s1600/img_01.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-cwwDXrmxmqM/VsyJcCahecI/AAAAAAAABwM/VGZTNcZshW4/s1600/img_01.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;h3 id="insertando-valores"&gt;&lt;/h3&gt;&lt;h3 id="insertando-valores"&gt;Insertando valores&lt;/h3&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Y ahora, ¿cómo insertamos valores en cada celda?. Para &lt;em&gt;rellenar&lt;/em&gt; las celdas de una grilla utilizamos el método &lt;code style="white-space: pre;"&gt;SetCellValue&lt;/code&gt;, pasando como argumentos la posición fila-columna de la celda y un string con el valor a insertar. Algo como:&lt;/div&gt;&lt;br&gt;&lt;pre&gt;&lt;code&gt;self.grid.SetCellValue(fila,columna,valor)&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Donde &lt;code style="white-space: pre;"&gt;fila&lt;/code&gt; y &lt;code style="white-space: pre;"&gt;columna&lt;/code&gt; son valores enteros que especifican la posición de la celda y &lt;code style="white-space: pre;"&gt;valor&lt;/code&gt; una cadena de caracteres. Veamos el siguiente ejemplo:&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx.grid &lt;span class="im"&gt;as&lt;/span&gt; wxgrid&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;250&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;250&lt;/span&gt;))&lt;br&gt;        &lt;br&gt;        filas &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;&lt;br&gt;        columnas &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wxgrid.Grid(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.CreateGrid(filas,columnas)&lt;br&gt;        &lt;br&gt;        &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; i &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;range&lt;/span&gt;(filas):&lt;br&gt;            &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; j &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;range&lt;/span&gt;(columnas):&lt;br&gt;                valor &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="st" style="color: #4070a0;"&gt;"(&lt;/span&gt;&lt;span class="sc" style="color: #4070a0;"&gt;%s&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;,&lt;/span&gt;&lt;span class="sc" style="color: #4070a0;"&gt;%s&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;)"&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;%&lt;/span&gt;(i,j)&lt;br&gt;                &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.SetCellValue(i,j,valor)&lt;br&gt;        &lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Centre(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Test Grid"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/wxPython/Posts/Utilizando%20grillas%20de%20celdas%20en%20wxPython%20(wx.grid.Grid)/img/img_02.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-UlfQS0upsFg/VsyJcHgwuZI/AAAAAAAABwU/0eCeRn6oeJA/s1600/img_02.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-UlfQS0upsFg/VsyJcHgwuZI/AAAAAAAABwU/0eCeRn6oeJA/s1600/img_02.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;h3 id="modificando-el-color-de-celdas"&gt;Modificando el color de celdas&lt;/h3&gt;&lt;div style="text-align: justify;"&gt;Para modificar el color de una celda debemos utilizar el método &lt;code style="white-space: pre;"&gt;SetCellBackgroundColour&lt;/code&gt; al cual se le pasan como argumentos la posición de la celda y el color a usar (en forma de cadena hexadecimal o bien mediante la clase &lt;code style="white-space: pre;"&gt;wx.Colour&lt;/code&gt;). En el siguiente ejemplo se muestra como colorear las filas impares de un color determinado:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx.grid &lt;span class="im"&gt;as&lt;/span&gt; wxgrid&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;250&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;250&lt;/span&gt;))&lt;br&gt;        &lt;br&gt;        filas &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;&lt;br&gt;        columnas &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wxgrid.Grid(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.CreateGrid(filas,columnas)&lt;br&gt;        &lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Asignando valores&lt;/span&gt;&lt;br&gt;        &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; i &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;range&lt;/span&gt;(filas):&lt;br&gt;            &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; j &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;range&lt;/span&gt;(columnas):&lt;br&gt;                valor &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="st" style="color: #4070a0;"&gt;"(&lt;/span&gt;&lt;span class="sc" style="color: #4070a0;"&gt;%s&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;,&lt;/span&gt;&lt;span class="sc" style="color: #4070a0;"&gt;%s&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;)"&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;%&lt;/span&gt;(i,j)&lt;br&gt;                &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.SetCellValue(i,j,valor)&lt;br&gt;        &lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Modificando el color de fondo&lt;/span&gt;&lt;br&gt;        &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; ii &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;range&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,filas,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;):&lt;br&gt;            &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; jj &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;range&lt;/span&gt;(columnas):&lt;br&gt;                &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.SetCellBackgroundColour(ii,jj,&lt;span class="st" style="color: #4070a0;"&gt;"#fafa77"&lt;/span&gt;)&lt;br&gt;        &lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Centre(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Test Grid"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/wxPython/Posts/Utilizando%20grillas%20de%20celdas%20en%20wxPython%20(wx.grid.Grid)/img/img_03.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-W4JTmMutuB0/VsyJcNM4oxI/AAAAAAAABwQ/XNZJ1MP5TLw/s1600/img_03.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-W4JTmMutuB0/VsyJcNM4oxI/AAAAAAAABwQ/XNZJ1MP5TLw/s1600/img_03.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Para quitar las etiquetas de filas, que a veces pueden resultar poco convenientes, puede utilizar el método &lt;code style="white-space: pre;"&gt;SetRowLabelSize&lt;/code&gt; y pasar 0 (cero) como argumento.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.SetRowLabelSize(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="personalizando-encabezados-y-anchos-de-columnas"&gt;&lt;/h3&gt;&lt;h3 id="personalizando-encabezados-y-anchos-de-columnas"&gt;Personalizando encabezados y anchos de columnas&lt;/h3&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Los encabezados (&lt;em&gt;headers&lt;/em&gt;) de columnas por defecto están rotulados como en una hoja de cálculo (letras en orden alfabético), pero pueden personalizarse utilizando el método &lt;code style="white-space: pre;"&gt;SetColLabelValue&lt;/code&gt;. Además también puede modificarse el ancho por defecto que tienen las columnas mediante el método &lt;code style="white-space: pre;"&gt;SetColSize&lt;/code&gt;. En el siguiente ejemplo se muestra lo mencionado anteriormente:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx.grid &lt;span class="im"&gt;as&lt;/span&gt; wxgrid&lt;br&gt;&lt;span class="im"&gt;from&lt;/span&gt; random &lt;span class="im"&gt;import&lt;/span&gt; randint&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;250&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;250&lt;/span&gt;))&lt;br&gt;        &lt;br&gt;        filas &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;&lt;br&gt;        columnas &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wxgrid.Grid(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.CreateGrid(filas,columnas)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.SetRowLabelSize(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;)&lt;br&gt;        &lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Asignando valores aleatorios&lt;/span&gt;&lt;br&gt;        &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; i &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;range&lt;/span&gt;(filas):&lt;br&gt;            &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; j &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;range&lt;/span&gt;(columnas):&lt;br&gt;                valor &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="st" style="color: #4070a0;"&gt;"&lt;/span&gt;&lt;span class="sc" style="color: #4070a0;"&gt;%g&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;%&lt;/span&gt;(randint(&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;))&lt;br&gt;                &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.SetCellValue(i,j,valor)&lt;br&gt;        &lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Modificando el color de fondo&lt;/span&gt;&lt;br&gt;        &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; ii &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;range&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,filas,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;):&lt;br&gt;            &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; jj &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;range&lt;/span&gt;(columnas):&lt;br&gt;                &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.SetCellBackgroundColour(ii,jj,&lt;span class="st" style="color: #4070a0;"&gt;"#fafa77"&lt;/span&gt;)&lt;br&gt;        &lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Modificando los encabezados y anchos de columna&lt;/span&gt;&lt;br&gt;        encabezados &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; [&lt;span class="st" style="color: #4070a0;"&gt;"Tiempo (s)"&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Amplitud (mm)"&lt;/span&gt;]&lt;br&gt;        anchos &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; [&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;]&lt;br&gt;        &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; n,col &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;enumerate&lt;/span&gt;(&lt;span class="bu"&gt;range&lt;/span&gt;(columnas)):&lt;br&gt;            &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.SetColLabelValue(col,encabezados[n])&lt;br&gt;            &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.SetColSize(col,anchos[n])&lt;br&gt;        &lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Centre(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Test Grid"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/wxPython/Posts/Utilizando%20grillas%20de%20celdas%20en%20wxPython%20(wx.grid.Grid)/img/img_04.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Non89NEhu4M/VsyJc6xweCI/AAAAAAAABwY/wjRtyn3SpAk/s1600/img_04.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-Non89NEhu4M/VsyJc6xweCI/AAAAAAAABwY/wjRtyn3SpAk/s1600/img_04.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Y bueno, hasta aquí esta entrada introductoria al uso de grillas en wxPython, ya estaremos viendo posteriormente características más avanzadas que permitan personalizar mejor una grilla.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;h3 id="y-una-mini-aplicación"&gt;Y una mini-aplicación&lt;/h3&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;A continuación se adjunta una mini-aplicación en la cual se utiliza un grilla de 2x2 para emular los elementos de una matriz de 2x2, de la cual habrá de calcularse el determinante. Esta mini-aplicación incluye algunas consideraciones básicas sobre eventos en la grilla que posiblemente resulten de utilidad para el lector:&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx.grid &lt;span class="im"&gt;as&lt;/span&gt; wxgrid&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;200&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;200&lt;/span&gt;))&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.panel &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Panel(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.sz &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.BoxSizer(wx.VERTICAL)&lt;br&gt;        &lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Grilla&lt;/span&gt;&lt;br&gt;        filas &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;&lt;br&gt;        columnas &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wxgrid.Grid(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.panel, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.CreateGrid(filas,columnas)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.SetRowLabelSize(&lt;span class="dv" style="color: #40a070;"&gt;60&lt;/span&gt;)&lt;br&gt;        &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; col &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;range&lt;/span&gt;(columnas):&lt;br&gt;            &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.SetColSize(col, &lt;span class="dv" style="color: #40a070;"&gt;60&lt;/span&gt;)&lt;br&gt;            &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.SetColLabelValue(col, &lt;span class="st" style="color: #4070a0;"&gt;"&lt;/span&gt;&lt;span class="sc" style="color: #4070a0;"&gt;%s&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;%&lt;/span&gt;(col&lt;span class="dv" style="color: #40a070;"&gt;+1&lt;/span&gt;))&lt;br&gt;        &lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Campo de texto para resultados&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.res &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.TextCtrl(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.panel, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u""&lt;/span&gt;, style&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;wx.TE_CENTRE)&lt;br&gt;        &lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Botón para calcular&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.bt &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.panel, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Calcular"&lt;/span&gt;)&lt;br&gt;        &lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Agregando elementos al sizer&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.sz.Add(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid, &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;, wx.EXPAND&lt;span class="op" style="color: #666666;"&gt;|&lt;/span&gt;wx.ALL, &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.sz.Add(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.res, &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, wx.EXPAND&lt;span class="op" style="color: #666666;"&gt;|&lt;/span&gt;wx.ALL, &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.sz.Add(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.bt, &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, wx.ALIGN_CENTRE&lt;span class="op" style="color: #666666;"&gt;|&lt;/span&gt;wx.ALL, &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;)&lt;br&gt;        &lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Conectando eventos &lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Bind(wx.EVT_BUTTON, &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.OnCalc, &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.bt)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Bind(wxgrid.EVT_GRID_CELL_CHANGED, &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.OnCellEdit)&lt;br&gt;        &lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.panel.SetSizer(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.sz)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Centre(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;        &lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnCalc(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,event):&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;"""&lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;        Ejecuta el cálculo del determinante, utilizando &lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;        como punto de entrada la matriz obtenida mediante &lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;        el método GetMatrix. El resultado obtenido se &lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;        muestra en el TextCtrl destinado para tal uso.&lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;        """&lt;/span&gt;&lt;br&gt;        M &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.GetMatrix()&lt;br&gt;        &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; M &lt;span class="op" style="color: #666666;"&gt;is&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;:&lt;br&gt;            wx.MessageBox(&lt;span class="st" style="color: #4070a0;"&gt;"Rellene todas las celdas..."&lt;/span&gt;)&lt;br&gt;            &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;return&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;&lt;br&gt;        det &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; (M[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;][&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;]&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;M[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;][&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;]) &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt; (M[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;][&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;]&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;M[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;][&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;])&lt;br&gt;        res &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="st" style="color: #4070a0;"&gt;"det(M) = &lt;/span&gt;&lt;span class="sc" style="color: #4070a0;"&gt;%s&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;%&lt;/span&gt;(det)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.res.SetValue(res)&lt;br&gt;        &lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; GetMatrix(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;):&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;"""&lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;        Construye una lista de listas para &lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;        representar una matriz de 2x2.&lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;        """&lt;/span&gt;&lt;br&gt;        rows &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.GetNumberRows()&lt;br&gt;        cols &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.GetNumberCols()&lt;br&gt;        M &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; []&lt;br&gt;        &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; row &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;range&lt;/span&gt;(rows):&lt;br&gt;            _crow &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; []&lt;br&gt;            &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;for&lt;/span&gt; col &lt;span class="op" style="color: #666666;"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;range&lt;/span&gt;(cols):&lt;br&gt;                cval &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.GetCellValue(row,col)&lt;br&gt;                &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;not&lt;/span&gt; cval:&lt;br&gt;                    &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;return&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;&lt;br&gt;                _crow.append(&lt;span class="bu"&gt;float&lt;/span&gt;(cval))&lt;br&gt;            M.append(_crow)&lt;br&gt;        &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;return&lt;/span&gt; M&lt;br&gt;        &lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnCellEdit(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,event):&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;"""&lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;        Verifica que el valor introducido en una &lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;        celda sea un número, de lo contrario elimina el valor.&lt;/span&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;        """&lt;/span&gt;&lt;br&gt;        ii,jj &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; event.GetRow(), event.GetCol()&lt;br&gt;        inval &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.GetCellValue(ii,jj)&lt;br&gt;        &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;try&lt;/span&gt;:&lt;br&gt;            cnum &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="bu"&gt;float&lt;/span&gt;(inval)&lt;br&gt;        &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;except&lt;/span&gt;:&lt;br&gt;            &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.grid.SetCellValue(ii,jj,&lt;span class="st" style="color: #4070a0;"&gt;""&lt;/span&gt;)&lt;br&gt;        &lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Determinante"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-He5Yf0aq9V8/VsyJc6IKNDI/AAAAAAAABwc/4elHvRPDtYQ/s1600/img_05.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-He5Yf0aq9V8/VsyJc6IKNDI/AAAAAAAABwc/4elHvRPDtYQ/s1600/img_05.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;</description><category>wxGrid</category><category>wxPython</category><guid>https://numython.github.io/posts/2016/02/las-grillas-o-conjunto-de-celdas-se/</guid><pubDate>Tue, 23 Feb 2016 22:38:00 GMT</pubDate></item><item><title>Eventos en un botón (wx.Button)</title><link>https://numython.github.io/posts/2016/02/eventos-en-un-boton-wxbutton/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;Los botones son componentes gráficos muy comunes que nos encontramos en cualquier interfaz de usuario y cuyo propósito es, generalmente, inicializar o confirmar un evento. En wxPython un botón ordinario se crea utilizando la clase &lt;code style="white-space: pre;"&gt;wx.Button&lt;/code&gt;, a la cual habrán de pasarse como argumentos de inicialización mínimos, el objeto padre, un ID, y una cadena indicando la etiqueta visible del botón. &lt;/div&gt;&lt;div style="text-align: justify;"&gt;Por ejemplo:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;200&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;200&lt;/span&gt;))&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Botón"&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Centre(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Test wxButton"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/wxPython/Posts/Eventos%20en%20un%20Bot%C3%B3n%20(wx.Button)/img/img_01.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-yPLZM6MEOS8/VstBHJ10aMI/AAAAAAAABv4/oIvw63A9cvY/s1600/img_01.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-yPLZM6MEOS8/VstBHJ10aMI/AAAAAAAABv4/oIvw63A9cvY/s1600/img_01.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Lo anterior crea un botón ocupando todo el espacio disponible en el Frame. Para colocar dos o más botones tendríamos que especificar el tamaño y posición de cada uno mediante los &lt;em&gt;keyword argument&lt;/em&gt; &lt;code style="white-space: pre;"&gt;size &lt;/code&gt;y &lt;code style="white-space: pre;"&gt;pos&lt;/code&gt;. Por ejemplo:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;200&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;200&lt;/span&gt;))&lt;br&gt;        &lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton1 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Uno"&lt;/span&gt;, size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;20&lt;/span&gt;),&lt;br&gt;                                pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;))&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton2 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Dos"&lt;/span&gt;, size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;20&lt;/span&gt;),&lt;br&gt;                                pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;))&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton3 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Tres"&lt;/span&gt;, size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;20&lt;/span&gt;),&lt;br&gt;                                pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;90&lt;/span&gt;))&lt;br&gt;        &lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Centre(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Test wxButton"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/wxPython/Posts/Eventos%20en%20un%20Bot%C3%B3n%20(wx.Button)/img/img_02.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-JJHsLLizndo/VstBHM_h0UI/AAAAAAAABv0/vP3gxFo1oxs/s1600/img_02.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-JJHsLLizndo/VstBHM_h0UI/AAAAAAAABv0/vP3gxFo1oxs/s1600/img_02.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Otra manera más conveniente de posicionar los botones o cualquier objeto gráfico sería utilizando sizers, de los cuales se estará hablando en posteriores entradas, pero vamos, que por ahora veremos cómo implementar manejo eventos en botones.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Así, en wxPython cuando se presiona un botón se &lt;em&gt;lanza&lt;/em&gt; un evento del tipo &lt;code style="white-space: pre;"&gt;wx.EVT_BUTTON&lt;/code&gt;, por ello lo que debemos hacer es utilizar el método &lt;code style="white-space: pre;"&gt;Bind&lt;/code&gt; y agregar eventos de tipo &lt;code style="white-space: pre;"&gt;wx.EVT_BUTTON&lt;/code&gt; al &lt;em&gt;escuchador&lt;/em&gt; de eventos, asignando además un &lt;em&gt;handler&lt;/em&gt;, que es básicamente una función o método que se encargará de manejar la respuesta de la interfaz al evento en cuestión.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Por ejemplo, vamos a imprimir un mensaje en consola cada vez que se presiona cualquiera de los tres botones que componen nuestra interfaz de usuario:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;200&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;200&lt;/span&gt;))&lt;br&gt;        &lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton1 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Uno"&lt;/span&gt;, size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;20&lt;/span&gt;),&lt;br&gt;                                pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;))&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton2 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Dos"&lt;/span&gt;, size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;20&lt;/span&gt;),&lt;br&gt;                                pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;))&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton3 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Tres"&lt;/span&gt;, size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;20&lt;/span&gt;),&lt;br&gt;                                pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;90&lt;/span&gt;))&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Conectando evento&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Bind(wx.EVT_BUTTON, &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.OnClick)&lt;br&gt;        &lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Centre(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;        &lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnClick(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,event):&lt;br&gt;        &lt;span class="bu"&gt;print&lt;/span&gt; &lt;span class="st" style="color: #4070a0;"&gt;u"Has presionado un botón"&lt;/span&gt;&lt;br&gt;        &lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Test wxButton"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Note que hemos &lt;em&gt;conectado&lt;/em&gt; los eventos de tipo &lt;code style="white-space: pre;"&gt;wx.EVT_BUTTON&lt;/code&gt; al método &lt;code style="white-space: pre;"&gt;OnClick&lt;/code&gt; que hace las veces de un &lt;em&gt;handler&lt;/em&gt;. Luego, el método &lt;code style="white-space: pre;"&gt;OnClick&lt;/code&gt; simplemente imprime en consola un mensaje.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Ahora, ¿cómo podríamos hacer que para cada botón presionado se tenga una respuesta diferente?. Hay dos formas comunes, a saber: especificando un &lt;em&gt;handler&lt;/em&gt; para cada botón y utilizando el argumento &lt;code style="white-space: pre;"&gt;event&lt;/code&gt;para identificar de dónde proviene el evento.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Primero vamos a utilizar un handler para cada botón. Debemos saber entonces que el método &lt;code style="white-space: pre;"&gt;Bind&lt;/code&gt; acepta como tercer argumento un &lt;code style="white-space: pre;"&gt;source&lt;/code&gt; o referencia a un objeto gráfico del cual se espera que provenga el evento. Algo como:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Bind(wx.EVT_BUTTON, &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.OnClick, boton)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Pero vamos con el ejemplo que venimos trabajando:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;200&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;200&lt;/span&gt;))&lt;br&gt;        &lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton1 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Uno"&lt;/span&gt;, size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;20&lt;/span&gt;),&lt;br&gt;                                pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;))&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton2 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Dos"&lt;/span&gt;, size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;20&lt;/span&gt;),&lt;br&gt;                                pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;))&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton3 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Tres"&lt;/span&gt;, size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;20&lt;/span&gt;),&lt;br&gt;                                pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;90&lt;/span&gt;))&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Conectando eventos&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Bind(wx.EVT_BUTTON, &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.OnClick1, &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton1)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Bind(wx.EVT_BUTTON, &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.OnClick2, &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton2)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Bind(wx.EVT_BUTTON, &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.OnClick3, &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton3)&lt;br&gt;        &lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Centre(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;        &lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnClick1(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,event):&lt;br&gt;        &lt;span class="bu"&gt;print&lt;/span&gt; &lt;span class="st" style="color: #4070a0;"&gt;u"Has presionado el botón 1"&lt;/span&gt;&lt;br&gt;        &lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnClick2(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,event):&lt;br&gt;        &lt;span class="bu"&gt;print&lt;/span&gt; &lt;span class="st" style="color: #4070a0;"&gt;u"Has presionado el botón 2"&lt;/span&gt;&lt;br&gt;        &lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnClick3(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,event):&lt;br&gt;        &lt;span class="bu"&gt;print&lt;/span&gt; &lt;span class="st" style="color: #4070a0;"&gt;u"Has presionado el botón 3"&lt;/span&gt;&lt;br&gt;        &lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Test wxButton"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Como puede ver, por cada botón se conecta un evento &lt;code style="white-space: pre;"&gt;wx.EVT_BUTTON&lt;/code&gt; con el handler correspondiente, así cada vez que se presione un botón diferente la respuesta obtenida será dependiendo del handler asignado.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Finalmente, la segunda forma consiste en utilizar el segundo parámetro del &lt;em&gt;handler&lt;/em&gt; asignado para manejar un evento (normalmente y por &lt;em&gt;convención&lt;/em&gt; llamado &lt;code style="white-space: pre;"&gt;event&lt;/code&gt;). ¿Pero qué es el parámetro &lt;code style="white-space: pre;"&gt;event&lt;/code&gt;?, en términos simples es un objeto de la clase &lt;code style="white-space: pre;"&gt;wx.CommandEvent&lt;/code&gt; que contiene información acerca del evento lanzado. Implementando esta manera para el ejemplo anterior se tiene:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;200&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;200&lt;/span&gt;))&lt;br&gt;        &lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton1 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Uno"&lt;/span&gt;, size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;20&lt;/span&gt;),&lt;br&gt;                                pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;))&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton2 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Dos"&lt;/span&gt;, size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;20&lt;/span&gt;),&lt;br&gt;                                pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;))&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.boton3 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Tres"&lt;/span&gt;, size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;20&lt;/span&gt;),&lt;br&gt;                                pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;90&lt;/span&gt;))&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Conectando eventos&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Bind(wx.EVT_BUTTON, &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.OnClick)&lt;br&gt;        &lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Centre(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;        &lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnClick(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,event):&lt;br&gt;        bt_label &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; event.GetEventObject().GetLabel()&lt;br&gt;        &lt;span class="bu"&gt;print&lt;/span&gt; &lt;span class="st" style="color: #4070a0;"&gt;u"Has presionado el botón &lt;/span&gt;&lt;span class="sc" style="color: #4070a0;"&gt;%s&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;%&lt;/span&gt;(bt_label)&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Test wxButton"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;El método &lt;code style="white-space: pre;"&gt;GetEventObject&lt;/code&gt; del objeto &lt;code style="white-space: pre;"&gt;event&lt;/code&gt; devuelve la referencia al objeto del cual proviene el evento, y posteriormente con el método &lt;code style="white-space: pre;"&gt;GetLabel()&lt;/code&gt; se obtiene simplemente la etiqueta del botón correspondiente para imprimirla en pantalla.&lt;/div&gt;</description><category>Eventos</category><category>wxButton</category><category>wxPython</category><guid>https://numython.github.io/posts/2016/02/eventos-en-un-boton-wxbutton/</guid><pubDate>Mon, 22 Feb 2016 23:22:00 GMT</pubDate></item><item><title>Utilizando un ComboBox en wxPython</title><link>https://numython.github.io/posts/2016/02/utilizando-un-combobox-en-wxpython/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;Un ComboBox es un control gráfico que despliega una lista de opciones cuando se interactúa con el, permitiendo desde luego la selección de sus ítems y consecuentemente el lanzamiento de un evento de tipo&lt;code style="white-space: pre;"&gt;EVT_COMBOBOX&lt;/code&gt;. Resulta lógico pensar que la utilidad de un ComboBox se hace notoria cuando se requiere disponer de una serie de opciones en un control que visualmente no ocupe mucho espacio.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;El ejemplo siguiente es una mini-aplicación wxPython que contiene dos ComboBox y un TextCtrl, que básicamente lo que hace es mostrar en el TextCtrl una concatenación de las opciones seleccionadas en ambos ComboBox:&lt;/div&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;args,&lt;span class="op" style="color: #666666;"&gt;**&lt;/span&gt;kwargs):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;args,&lt;span class="op" style="color: #666666;"&gt;**&lt;/span&gt;kwargs)&lt;br&gt;        sizer &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.BoxSizer(wx.VERTICAL)&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Datos para los ComboBox&lt;/span&gt;&lt;br&gt;        nombres &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;  &lt;span class="st" style="color: #4070a0;"&gt;u"Ana|Pablo|Daniela|Jorge|David|Dulce"&lt;/span&gt;.split(&lt;span class="st" style="color: #4070a0;"&gt;"|"&lt;/span&gt;)&lt;br&gt;        paises &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="st" style="color: #4070a0;"&gt;u"México|Colombia|Chile|Argentina|España|Uruguay"&lt;/span&gt;.split(&lt;span class="st" style="color: #4070a0;"&gt;"|"&lt;/span&gt;)&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Controles gráficos&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.cbbox_nombres &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.ComboBox(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,choices&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;nombres,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;120&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;25&lt;/span&gt;))&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.cbbox_paises &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.ComboBox(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,choices&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;paises,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;120&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;25&lt;/span&gt;))&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.txt &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.TextCtrl(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;150&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;25&lt;/span&gt;), style&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;wx.TE_CENTRE)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.txt.SetBackgroundColour(&lt;span class="st" style="color: #4070a0;"&gt;"#d0fefe"&lt;/span&gt;)&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Agregando controles al sizer&lt;/span&gt;&lt;br&gt;        sizer.Add(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.cbbox_nombres, &lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;, wx.ALIGN_CENTRE&lt;span class="op" style="color: #666666;"&gt;|&lt;/span&gt;wx.ALL, &lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;)&lt;br&gt;        sizer.Add(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.cbbox_paises, &lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;, wx.ALIGN_CENTRE&lt;span class="op" style="color: #666666;"&gt;|&lt;/span&gt;wx.ALL, &lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;)&lt;br&gt;        sizer.Add(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.txt, &lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;, wx.ALIGN_CENTRE&lt;span class="op" style="color: #666666;"&gt;|&lt;/span&gt;wx.ALL, &lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;)&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Configurando sizer&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.SetSizer(sizer)&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Configurando eventos&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Bind(wx.EVT_COMBOBOX, &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.OnSelect)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;        &lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnSelect(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,event):&lt;br&gt;        nombre &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.cbbox_nombres.GetValue()&lt;br&gt;        pais &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.cbbox_paises.GetValue()&lt;br&gt;        statxt &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; nombre &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; &lt;span class="st" style="color: #4070a0;"&gt;" es de "&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; pais&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.txt.SetLabel(statxt)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"ComboBox Test"&lt;/span&gt;, size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;250&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;200&lt;/span&gt;))&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-WBarEA7WGXs/Vrl_DSPkKhI/AAAAAAAABvg/ftsOLrZA64g/s1600/img_01.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-WBarEA7WGXs/Vrl_DSPkKhI/AAAAAAAABvg/ftsOLrZA64g/s1600/img_01.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Vamos, un poco más despacio y con algunos detalles extras:&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Primero (&lt;em&gt;y como siempre&lt;/em&gt;) importamos el módulo &lt;code style="white-space: pre;"&gt;wx&lt;/code&gt; para tener disponibles las clases que usaremos en el desarrollo de la aplicación. Definimos una clase &lt;code style="white-space: pre;"&gt;TestFrame&lt;/code&gt; heredada de &lt;code style="white-space: pre;"&gt;wx.Frame&lt;/code&gt; en la cual colocaremos todos los controles gráficos a utilizar.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="text-align: start;"&gt;Enseguida creamos los datos o listas que vamos a utilizar en los ComboBox, ha de saber que el método &lt;/span&gt;&lt;code style="text-align: start; white-space: pre;"&gt;split&lt;/code&gt;&lt;span style="text-align: start;"&gt; de la clase &lt;/span&gt;&lt;code style="text-align: start; white-space: pre;"&gt;str&lt;/code&gt;&lt;span style="text-align: start;"&gt; devuelve una lista de strings resultantes de &lt;/span&gt;&lt;em style="text-align: start;"&gt;cortar&lt;/em&gt;&lt;span style="text-align: start;"&gt; la cadena original en los segmentos delimitados por el caracter que se ha pasado como argumento ("|" para este caso).&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Luego se crean los controles gráficos (ComboBox y TextCtrl), puede ver que para crear un ComboBox necesita instanciar un objeto de la clase &lt;code style="white-space: pre;"&gt;wx.ComboBox&lt;/code&gt;, a la cual como argumentos mínimos se le debe indicar el objeto padre (parent), un id, y un lista de valores (choices) que contiene las opciones a desplegar. Adicionalmente puede definir otros &lt;em&gt;keyword arguments&lt;/em&gt; como el tamaño y/o la posición del control.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Una vez se han creado los controles, estos se deben agregarse al sizer de la aplicación para que sean organizados acorde a la distribución o algoritmo de posicionamiento seleccionado.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Finalmente, se programa la respuesta que tendrá la aplicación cuando los ComboBox sean manejados por el usuario, para ello se asigna el método &lt;code style="white-space: pre;"&gt;OnSelect&lt;/code&gt; como el handler de los eventos de tipo&lt;code style="white-space: pre;"&gt;wx.EVT_COMBOBOX&lt;/code&gt;. Note que el método &lt;code style="white-space: pre;"&gt;OnSelect&lt;/code&gt; contiene dos parámetros obligatorios por default, &lt;code style="white-space: pre;"&gt;self&lt;/code&gt; que hace referencia a la clase misma y &lt;code style="white-space: pre;"&gt;event&lt;/code&gt; que contiene información acerca del evento lanzado. En este caso el método &lt;code style="white-space: pre;"&gt;OnSelect&lt;/code&gt; lo único que hace es tomar los strings seleccionados en cada uno de los ComboBox, y concatenarlos utilizando un nexo cualesquiera, para finalmente asignar la cadena resultante al valor del TextCtrl.&lt;/div&gt;</description><category>wxComboBox</category><category>wxPython</category><guid>https://numython.github.io/posts/2016/02/utilizando-un-combobox-en-wxpython/</guid><pubDate>Tue, 09 Feb 2016 11:55:00 GMT</pubDate></item><item><title>Personalizando Frames en wxPython</title><link>https://numython.github.io/posts/2016/02/un-frame-ordinario-en-wxpython-se-puede/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;p&gt;Un frame ordinario en wxPython se puede construir de manera muy sencilla, heredando simplemente de &lt;code style="white-space: pre;"&gt;wx.Frame&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;400&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;300&lt;/span&gt;))&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Mi Frame"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-Kg-9fqJ4ldg/VrYuy37htlI/AAAAAAAABvA/W7sQo0iHBVE/s1600/img_01.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="239" src="https://4.bp.blogspot.com/-Kg-9fqJ4ldg/VrYuy37htlI/AAAAAAAABvA/W7sQo0iHBVE/s320/img_01.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;A continuación vamos a ver algunas cuestiones interesantes para crear frames personalizados.&lt;br&gt;&lt;br&gt;&lt;h3 id="cambiando-el-color-de-fondo"&gt;Cambiando el color de fondo&lt;/h3&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;Para cambiar el color de fondo de un Frame podemos utilizar el método &lt;code style="white-space: pre;"&gt;SetBackgroundColour&lt;/code&gt;, al cual debemos pasarle como argumento un objeto de la clase &lt;code style="white-space: pre;"&gt;wx.Colour&lt;/code&gt; o bien una cadena en notación hexadecimal para especificar el color.&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;400&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;300&lt;/span&gt;))&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Modificando el color de fondo&lt;/span&gt;&lt;br&gt;        rojo &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Colour(&lt;span class="dv" style="color: #40a070;"&gt;255&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;)&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# rojo = "#ff0000"   # Equivalente en notación hexadecimal&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.SetBackgroundColour(rojo)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Mi Frame"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-uOM9xWJ-IW4/VrYuy27v7xI/AAAAAAAABu8/iVlbwPeFj3w/s1600/img_02.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="239" src="https://1.bp.blogspot.com/-uOM9xWJ-IW4/VrYuy27v7xI/AAAAAAAABu8/iVlbwPeFj3w/s320/img_02.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;h3 id="colocando-un-ícono"&gt;Colocando un ícono&lt;/h3&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;Para colocar un ícono en la barra superior de nuestro Frame utilizamos el método &lt;code style="white-space: pre;"&gt;SetIcon&lt;/code&gt;, al cual debemos pasarle como argumento un objeto de la clase &lt;code style="white-space: pre;"&gt;wx.Icon&lt;/code&gt;. Para instanciar un objeto de &lt;code style="white-space: pre;"&gt;wx.Icon&lt;/code&gt;necesitamos simplemente pasar como argumento la ruta de la imagen/ícono.&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;400&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;300&lt;/span&gt;))&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Colocando un ícono&lt;/span&gt;&lt;br&gt;        icono &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Icon(&lt;span class="st" style="color: #4070a0;"&gt;"icono.png"&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.SetIcon(icono)&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# ...&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Mi Frame"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-QAMNqZfmhkM/VrYuy5EDaWI/AAAAAAAABvE/CkPKdj5dVRA/s1600/img_03.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="238" src="https://3.bp.blogspot.com/-QAMNqZfmhkM/VrYuy5EDaWI/AAAAAAAABvE/CkPKdj5dVRA/s320/img_03.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;h3 id="modificando-estilos"&gt;Modificando estilos&lt;/h3&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;strong&gt;Ventana no redimensionable&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Si queremos tener una ventana con un tamaño fijo, podemos hacerlo modificando el estilo por defecto de nuestro Frame. Cuando creamos un Frame por defecto se toma el estilo &lt;code style="white-space: pre;"&gt;wx.DEFAULT_FRAME_STYLE&lt;/code&gt;. Para modificarlo debemos pasar el &lt;em&gt;keyword argument&lt;/em&gt; &lt;code style="white-space: pre;"&gt;style&lt;/code&gt; con una lista de estilos determinados. Para nuestro caso de una ventana no redimensionable:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        styles &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; (wx.CLOSE_BOX&lt;span class="op" style="color: #666666;"&gt;|&lt;/span&gt;wx.CAPTION)&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;400&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;300&lt;/span&gt;),&lt;br&gt;                          style&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;styles)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Mi Frame"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-8B2hyv4IYfk/VrYuzRwdeWI/AAAAAAAABvI/0nYRqNA40N0/s1600/img_04.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="https://1.bp.blogspot.com/-8B2hyv4IYfk/VrYuzRwdeWI/AAAAAAAABvI/0nYRqNA40N0/s320/img_04.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;strong&gt;Ventana sin barra de título&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Si queremos una ventana sin barra de título, podemos &lt;em&gt;quitar&lt;/em&gt; el estilo &lt;code style="white-space: pre;"&gt;wx.CAPTION&lt;/code&gt;:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; TestFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        styles &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.DEFAULT_FRAME_STYLE &lt;span class="op" style="color: #666666;"&gt;&amp;amp;&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;~&lt;/span&gt; (wx.CAPTION)&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;400&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;300&lt;/span&gt;),&lt;br&gt;                          style&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;styles)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.SetBackgroundColour(&lt;span class="st" style="color: #4070a0;"&gt;"#ff00ff"&lt;/span&gt;)&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; TestFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Mi Frame"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-2HrM9jDtvm0/VrYuzWP0UoI/AAAAAAAABvM/pi0_dYyapus/s1600/img_05.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="239" src="https://1.bp.blogspot.com/-2HrM9jDtvm0/VrYuzWP0UoI/AAAAAAAABvM/pi0_dYyapus/s320/img_05.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;El estilo &lt;code style="white-space: pre;"&gt;wx.DEFAULT_FRAME_STYLE &amp;amp; ~ (wx.CAPTION)&lt;/code&gt; toma todos los estilos incluidos en &lt;code style="white-space: pre;"&gt;wx.DEFAULT_FRAME_STYLE&lt;/code&gt;, exceptuando a &lt;code style="white-space: pre;"&gt;wx.CAPTION&lt;/code&gt;, un poco de combinación de operaciones lógicas AND-NOT.&lt;/div&gt;</description><category>wxFrame</category><category>wxIcon</category><category>wxPython</category><guid>https://numython.github.io/posts/2016/02/un-frame-ordinario-en-wxpython-se-puede/</guid><pubDate>Sat, 06 Feb 2016 23:36:00 GMT</pubDate></item></channel></rss>
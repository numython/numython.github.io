<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Numython (MiniApps)</title><link>https://numython.github.io/</link><description></description><atom:link href="https://numython.github.io/categories/miniapps.xml" type="application/rss+xml" rel="self"></atom:link><language>es</language><lastBuildDate>Mon, 12 Dec 2016 22:38:36 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>wxdx, una GUI para cálculo elemental</title><link>https://numython.github.io/posts/wxdx-una-gui-para-calculo-elemental/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div&gt;&lt;p&gt;En este blog ya hemos tratado algunas veces cómo desarrollar interfaces gráficas utilizando wxPython 
(véase &lt;a href="https://numython.github.io/categories/wxpython/"&gt;aquí&lt;/a&gt;). En este post vamos a presentar el 
desarrollo de una mini-aplicación que calcula límites, derivadas e integrales utilizando SymPy como 
motor de cálculo simbólico.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://numython.github.io/img/wxdx.png"&gt; &lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/a6962f0bf47aded8280642ff85b42da8.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;# -*- coding: utf-8 -*-
# 
# Author:   Pedro Jorge De Los Santos 
# E-mail:   delossantosmfq@gmail.com
# Version:  0.1.0
# License: MIT
# 
import wx 
import wx.html
import webbrowser
import sympy
import matplotlib
matplotlib.use('WXAgg')
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.figure import Figure
from sympy import (sin,cos,tan,sec,csc,cot,ln,log,exp,asin,acos,atan) # Algunas funciones


class wxdx(wx.Frame):
    def __init__(self,parent):
        __version__ = "0.1.0"
        title = u"wxdx %s"%(__version__,)
        wx.Frame.__init__(self,parent=None,title=title,size=(400,250))
        
        self.nb = wx.Notebook(self)
        
        # NoteBook Pages
        self.derivada = Derivada(self.nb)
        self.integral = Integral(self.nb)
        self.limite = Limite(self.nb)
        self.ayuda = Ayuda(self.nb)
        
        self.nb.AddPage(self.limite, u"Límite")        
        self.nb.AddPage(self.derivada, "Derivada")
        self.nb.AddPage(self.integral, "Integral indefinida")
        self.nb.AddPage(self.ayuda, "Ayuda")
        
        self.SetMinSize(self.GetSize()) # Actual -&amp;gt; Tamaño mínimo
        self.Centre(True)
        self.Show()


class Derivada(wx.Panel):
    def __init__(self,parent):
        wx.Panel.__init__(self,parent,wx.ID_ANY)
        self.initCanvas()
        self.initCtrls()
        self.SetSizer(self.mainsz)
   
    def initCtrls(self):
        """
        Inicializa todos los componentes
        """
        # Sizers
        self.mainsz = wx.BoxSizer(wx.VERTICAL)
        self.funsz = wx.BoxSizer(wx.HORIZONTAL)
        
        self.funlabel = wx.StaticText(self, wx.ID_ANY, " f(x) ")
        self.fun = wx.TextCtrl(self, wx.ID_ANY, "")
        self.boton = wx.Button(self, wx.ID_ANY, "Calcular")
        
        # Fonts
        font1 = wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL)
        font1.SetPointSize(12)
        self.funlabel.SetFont(font1)
        self.fun.SetFont(font1)
        self.fun.SetForegroundColour((0,0,255))
        
        self.funsz.Add(self.funlabel, 1, wx.EXPAND|wx.ALL, 2)
        self.funsz.Add(self.fun, 8, wx.EXPAND|wx.ALL, 2)
        self.funsz.Add(self.boton, 2, wx.EXPAND|wx.ALL, 2)
        
        self.mainsz.Add(self.funsz, 1, wx.EXPAND|wx.ALL, 5)
        self.mainsz.Add(self.canvas, 1, wx.ALIGN_CENTRE|wx.ALL, 5)
        
        self.Bind(wx.EVT_BUTTON, self.derivar, self.boton)
        
    def initCanvas(self):
        """
        Inicializa el Canvas
        """
        self.figure = Figure()
        
        # FigureCanvas
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.figure.set_facecolor((1,1,1)) # ...
        self.string = self.figure.text(0.05, 0.5, "")
        self.string.set_fontsize(18)
        
    def derivar(self,event):
        x = sympy.Symbol("x")
        fx = self.fun.GetValue() # Función original
        if "^" in fx: fx = fx.replace("^","**") # Convertir ^ a notación Python (**)
        Fx = sympy.diff(eval(fx)) # Función derivada
        str_Fx = "$\\frac{d}{dx} \\left(%s \\right)\, = \,%s$"%(sympy.latex(eval(fx)), sympy.latex(Fx))
        print(str_Fx)
        self.string.set_text(str_Fx)
        self.canvas.draw() # "Redibujar"


class Integral(wx.Panel):
    def __init__(self,parent):
        wx.Panel.__init__(self,parent,wx.ID_ANY)
        self.initCanvas()
        self.initCtrls()
        self.SetSizer(self.mainsz)

        
    def initCtrls(self):
        self.mainsz = wx.BoxSizer(wx.VERTICAL)
        self.funsz = wx.BoxSizer(wx.HORIZONTAL)
        
        self.funlabel = wx.StaticText(self, wx.ID_ANY, " f(x) ")
        self.fun = wx.TextCtrl(self, wx.ID_ANY, "")
        self.boton = wx.Button(self, wx.ID_ANY, "Calcular")
        
        # Fonts
        font1 = wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL)
        font1.SetPointSize(12)
        self.funlabel.SetFont(font1)
        self.fun.SetFont(font1)
        self.fun.SetForegroundColour((0,0,255))
        
        self.funsz.Add(self.funlabel, 1, wx.EXPAND|wx.ALL, 2)
        self.funsz.Add(self.fun, 8, wx.EXPAND|wx.ALL, 2)
        self.funsz.Add(self.boton, 2, wx.EXPAND|wx.ALL, 2)
        
        self.mainsz.Add(self.funsz, 1, wx.EXPAND|wx.ALL, 5)
        self.mainsz.Add(self.canvas, 6, wx.EXPAND|wx.ALL, 5)
        
        self.Bind(wx.EVT_BUTTON, self.integrar, self.boton)
        
    def initCanvas(self):
        self.figure = Figure()
        
        # FigureCanvas
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.figure.set_facecolor((1,1,1))
        self.string = self.figure.text(0.05, 0.5, "")
        self.string.set_fontsize(18)
        
    def integrar(self,event):
        x = sympy.Symbol("x")
        fx = self.fun.GetValue() # Función original
        if "^" in fx: fx = fx.replace("^","**")
        Fx = sympy.integrate(eval(fx)) # Función integrada
        str_Fx = "$\int \, (%s) \,dx \,= \,%s + C$"%(sympy.latex(eval(fx)), sympy.latex(Fx))
        self.string.set_text(str_Fx)
        self.canvas.draw()
        

class Limite(wx.Panel):
    def __init__(self,parent):
        wx.Panel.__init__(self,parent,wx.ID_ANY)
        self.initCanvas()
        self.initCtrls()
        self.SetSizer(self.mainsz)

    def initCtrls(self):
        """
        Inicializa todos los controles y sizers necesarios
        """
        self.mainsz = wx.BoxSizer(wx.VERTICAL)
        self.funsz = wx.BoxSizer(wx.HORIZONTAL)
        self.valsz = wx.BoxSizer(wx.HORIZONTAL)
        
        self.funlabel = wx.StaticText(self, wx.ID_ANY, " f(x) ")
        self.fun = wx.TextCtrl(self, wx.ID_ANY, "")
        self.boton = wx.Button(self, wx.ID_ANY, "Calcular")
        
        dir_opts = "None|+|-".split("|")
        self.x0label = wx.StaticText(self, wx.ID_ANY, "a", style=wx.ALIGN_CENTER)
        self.x0 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.limitdirlabel = wx.StaticText(self, wx.ID_ANY, u"Lím. Lat.")
        self.limitdir = wx.ComboBox(self, wx.ID_ANY, choices=dir_opts)
        
        # Configurando el tamaño/color de fuente 
        font1 = wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL)
        _all_ctrls = [self.x0label, self.limitdirlabel, self.x0, self.limitdir, 
                      self.fun, self.funlabel]
        for ctrl in _all_ctrls: 
            ctrl.SetFont(font1)
            if ctrl in [self.x0, self.fun, self.limitdir]:
                ctrl.SetForegroundColour((0,0,255))
        
        # Agregando controles a los sizers
        self.funsz.Add(self.funlabel, 1, wx.EXPAND|wx.ALL, 2)
        self.funsz.Add(self.fun, 8, wx.EXPAND|wx.ALL, 2)
        self.funsz.Add(self.boton, 2, wx.EXPAND|wx.ALL, 2)
        
        self.valsz.Add(self.x0label, 1, wx.EXPAND|wx.ALL, 2)     
        self.valsz.Add(self.x0, 3, wx.EXPAND|wx.ALL, 2) 
        self.valsz.AddSpacer(30)    
        self.valsz.Add(self.limitdirlabel, 1, wx.EXPAND|wx.ALL, 2)     
        self.valsz.Add(self.limitdir, 2, wx.EXPAND|wx.ALL, 2)     
           
        self.mainsz.Add(self.funsz, 1, wx.EXPAND|wx.ALL, 5)
        self.mainsz.Add(self.valsz, 1, wx.EXPAND|wx.ALL, 5)
        self.mainsz.Add(self.canvas, 6, wx.EXPAND|wx.ALL, 5)
        
        self.Bind(wx.EVT_BUTTON, self.calcular, self.boton)
        
    def initCanvas(self):
        """
        Inicializa el Canvas que muestra los resultados estilizados
        mediante el TeX render de Matplotlib.
        """
        self.figure = Figure()
        
        # FigureCanvas
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.figure.set_facecolor((1,1,1))
        self.string = self.figure.text(0.05, 0.5, "")
        self.string.set_fontsize(18)
        
    def calcular(self,event):
        """
        Calcula el límite y muestra el resultado en el canvas
        destinado para tal propósito
        """
        x = sympy.Symbol("x")
        try:
            fx = self.fun.GetValue() # Función original
            x0 = float(self.x0.GetValue())
            limdir = self.limitdir.GetStringSelection()
        except:
            title = "WXDX"
            msg = "Valores incorrectos"
            style = wx.ICON_EXCLAMATION
            dlg = wx.MessageDialog(None, message=msg, 
                               caption=title, style=style)
            dlg.ShowModal()
            dlg.Destroy()
            return False
        if "^" in fx: fx = fx.replace("^","**")
        if limdir=="+" or limdir=="-":
            Fx = sympy.limit(eval(fx), x, x0, dir=limdir) # Calculando el límite
        else:
            Fx = sympy.limit(eval(fx), x, x0) # Calculando el límite
        str_Fx = "$\lim_{x &amp;gt; %s} (%s) \,= \,%s$"%(x0, sympy.latex(eval(fx)), sympy.latex(Fx))
        self.string.set_text(str_Fx)
        self.canvas.draw()



class Ayuda(wx.html.HtmlWindow):
    """
    Para mostrar la ayuda utilizando la sintaxis HTML
    """
    def __init__(self,parent):
        wx.html.HtmlWindow.__init__(self,parent)
        self.SetPage(AYUDA_STRING)
    
    def OnLinkClicked(self, link):
        """
        Permite abrir los links en el explorador por default del 
        usuario, en lugar de abrirlos en este mismo control.
        """
        webbrowser.open(link.GetHref())
        


AYUDA_STRING = u"""
&amp;lt;h3&amp;gt;Ayuda&amp;lt;/h3&amp;gt;

&amp;lt;div align="justify"&amp;gt;
&amp;lt;p&amp;gt;
En el caso de integrales y derivadas simplemente ingrese 
una función f(x) en el campo correspondiente y presione 
el botón calcular para ejecutar la operación.
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
Para calcular límites, debe especificar adicionalmente el 
valor al que "tiende" la variable. Y en caso necesario 
puede especificar si va a calcular un límite lateral, escogiendo 
una opción del menú, (+) para límites por la derecha y (-) para 
límites por la izquierda.
&amp;lt;/p&amp;gt;

&amp;lt;h3&amp;gt;¿Cómo insertar funciones?&amp;lt;/h3&amp;gt;

&amp;lt;p&amp;gt;
Para insertar las expresiones de una función f(x), debe 
utilizar los operadores aritméticos adecuados, por ejemplo, para 
una función lineal:
&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;tt&amp;gt;f(x) = 2*x + 1&amp;lt;/tt&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;
Deberá colocar el operador de multiplicación entre la constante y 
la variable x.
&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;
Para funciones que involucren operaciones de potenciación, puede 
indicarlas utilizando la notación de doble asterisco (**) de Python o 
bien el acento circunflejo (^), más característico en software 
de ingeniería, por ejemplo, para f(x)=2x&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt; + 2:
&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;tt&amp;gt;f(x) = 2*x^2 + 2&amp;lt;/tt&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;h3&amp;gt;Acerca de...&amp;lt;/h3&amp;gt;

&amp;lt;p&amp;gt;
Esta es una pequeña aplicación desarrollada en wxPython, con 
fines didácticos, para mostrar las posibilidades de integración 
con otras librerías del entorno Python.
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
Más información en 
&amp;lt;a href="http://numython.github.io"&amp;gt;Numython&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;/div&amp;gt;
"""


class App(wx.App):
    def OnInit(self):
        frame = wxdx(None)
        return True

def run():
    REDIRECT = False
    app = App(REDIRECT)
    app.MainLoop()


if __name__=='__main__':
    run()
&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>MiniApps</category><category>wxPython</category><guid>https://numython.github.io/posts/wxdx-una-gui-para-calculo-elemental/</guid><pubDate>Mon, 12 Dec 2016 22:25:00 GMT</pubDate></item><item><title>Un mini editor de texto con wxPython</title><link>https://numython.github.io/posts/2016/03/un-mini-editor-de-texto-con-wxpython/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;p&gt;En esta entrada vamos a explicar cómo desarrollar un editor de texto muy sencillo, que cumpla con algunas funciones muy básicas, tal como un bloc de notas de Windows.&lt;br&gt;&lt;br&gt;El resultado final será más o menos el siguiente:&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-3FI4UfHa5z4/VMx2-zuG70I/AAAAAAAABaQ/BP9XL6SDw7o/s1600/Captura.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="213" src="https://4.bp.blogspot.com/-3FI4UfHa5z4/VMx2-zuG70I/AAAAAAAABaQ/BP9XL6SDw7o/s1600/Captura.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;Primeramente vamos a importar los módulos a utilizar:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;import wx&lt;br&gt;import os&lt;br&gt;import os.path&lt;br&gt;&lt;/pre&gt;&lt;br&gt;El módulo wx para la librería gráfica (wxPython), y el módulo os para las operaciones con archivos de texto plano (guardar, abrir, etc...).&lt;br&gt;&lt;br&gt;Una vez importados los módulos necesarios, habremos de definir una estructura base para la aplicación. Para ello extenderemos una clase de wx.Frame, tal cómo se muestra enseguida:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;class LABTxt(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;&lt;br&gt;    def configurarEditor(self):&lt;br&gt;        """ Configura las características iniciales del editor """&lt;br&gt; &lt;br&gt;    def crearMenu(self):  &lt;br&gt;        """ Crea la barra de menú """&lt;br&gt; &lt;br&gt;    def abrirArchivo(self, event):&lt;br&gt;        """ Abre un archivo de texto plano"""&lt;br&gt; &lt;br&gt;    def guardarArchivoComo(self, event):&lt;br&gt;        """ Guarda el archivo actual abriendo un cuadro de dialogo """&lt;br&gt;  &lt;br&gt;    def guardarArchivo(self,event):&lt;br&gt;        """ Guarda el archivo actual """&lt;br&gt; &lt;br&gt;    def copiar(self,event):&lt;br&gt;        """ Copia el texto seleccionado al portapapeles """&lt;br&gt;   &lt;br&gt;    def pegar(self,event):&lt;br&gt;        """ Pega el texto ubicado en el portapapeles """&lt;br&gt; &lt;br&gt;    def configurarTema(self,event):&lt;br&gt;        """ Configura el tema a utilizar """&lt;br&gt;  &lt;br&gt;    def ayuda(self,event):&lt;br&gt;        """ Muestra la ayuda de la aplicacion """&lt;br&gt;  &lt;br&gt;    def acerca(self, event):&lt;br&gt;        """ Breve descripción del programa """&lt;br&gt;&lt;br&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    fr = LABTxt(None, "LABTxt 0.0.1")&lt;br&gt;    app.MainLoop()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;En lo anterior se define una clase LABTxt derivada de wx.Frame, con ciertos métodos definidos que posteriormente desarrollaremos y que, evidentemente, le dan funcionalidad a la aplicación.&lt;br&gt;&lt;br&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;El método __init__&lt;/b&gt;&lt;/span&gt;&lt;br&gt;En el método __init__ (comúnmente nombrado "constructor" de la clase) se colocarán los elementos básicos de la aplicación, en este caso un wx.TextCtrl y el Sizer correspondiente, tal como se muestra enseguida:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;def __init__(self,parent,title):&lt;br&gt;    wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;    if os.path.isfile("icono.png"):&lt;br&gt;        self.SetIcon(wx.Icon('icono.png'))&lt;br&gt;    self.archivo='untitled.txt'&lt;br&gt;    p=wx.Panel(self, -1)&lt;br&gt;  &lt;br&gt;    # Sizer&lt;br&gt;    sz=wx.BoxSizer(wx.VERTICAL)&lt;br&gt;  &lt;br&gt;    # Editor&lt;br&gt;    self.editor=wx.TextCtrl(p, -1, "", style=wx.TE_MULTILINE)&lt;br&gt;    self.configurarEditor()&lt;br&gt;  &lt;br&gt;    # Agregar al sizer&lt;br&gt;    sz.Add(self.editor, 1, wx.EXPAND)&lt;br&gt;    p.SetSizer(sz)&lt;br&gt;  &lt;br&gt;    # Crear barra de menu&lt;br&gt;    self.crearMenu()&lt;br&gt;    self.Show()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;Colocamos un ícono a la aplicación (en el caso de que este exista), se crea un panel sobre el cual se agregará el control de texto. Enseguida se agrega un wx.TextCtrl con la propiedad style definida como wx.TE_MULTILINE, que permitirá tener un campo de texto multilínea, simulando de esta manera el editor que necesitamos. Se "llama" al método configurarEditor que simplemente configura la fuente y color de fondo del mismo. Finalmente se crea la barra de menús y se muestra la ventana con el método Show.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;El método configurarEditor&lt;/b&gt;&lt;/span&gt;&lt;br&gt;Este método define las características de la fuente y el color de fondo a utilizar.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;El método crearMenu&lt;/b&gt;&lt;/span&gt;&lt;br&gt;Aquí se crea la barra de menús con sus respectivos ítems y se agrega la funcionalidad (eventos) a cada uno de ellos, mediante el uso del método Bind de la clase wx.Frame.&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;def crearMenu(self):  &lt;br&gt;    """ Crea la barra de menú """&lt;br&gt;    marchivo=wx.Menu()&lt;br&gt;    abrir=marchivo.Append(-1, "Abrir\tCtrl-O")&lt;br&gt;    guardar=marchivo.Append(-1, "Guardar\tCtrl-S")&lt;br&gt;    guardarComo=marchivo.Append(-1, "Guardar como")&lt;br&gt;  &lt;br&gt;    meditar=wx.Menu()&lt;br&gt;    copiar=meditar.Append(-1, "Copiar\tCtrl-C")&lt;br&gt;    pegar=meditar.Append(-1, "Pegar\tCtrl-V")&lt;br&gt;  &lt;br&gt;    self.mtema=wx.Menu()&lt;br&gt;    classic=self.mtema.Append(-1, "Classic")&lt;br&gt;    dark=self.mtema.Append(-1, "Dark")&lt;br&gt;    retro=self.mtema.Append(-1, "Retro")&lt;br&gt;    pink=self.mtema.Append(-1, "Pink")&lt;br&gt;  &lt;br&gt;    mayuda=wx.Menu()&lt;br&gt;    ayuda=mayuda.Append(-1, "Ayuda")&lt;br&gt;    acerca=mayuda.Append(-1, "Acerca de...")&lt;br&gt;  &lt;br&gt;    barraMenu=wx.MenuBar()&lt;br&gt;    barraMenu.Append(marchivo, "Archivo")&lt;br&gt;    barraMenu.Append(meditar, "Editar")&lt;br&gt;    barraMenu.Append(self.mtema, "Seleccionar tema")&lt;br&gt;    barraMenu.Append(mayuda, "Ayuda")&lt;br&gt;    self.SetMenuBar(barraMenu)&lt;br&gt;  &lt;br&gt;    # Definición de "eventos"&lt;br&gt;    self.Bind(wx.EVT_MENU, self.abrirArchivo, abrir)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.guardarArchivoComo, guardarComo)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.guardarArchivo, guardar)&lt;br&gt;  &lt;br&gt;    self.Bind(wx.EVT_MENU, self.copiar, copiar)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.pegar, pegar)&lt;br&gt;  &lt;br&gt;    self.Bind(wx.EVT_MENU, self.configurarTema, classic)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.configurarTema, dark)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.configurarTema, retro)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.configurarTema, pink)&lt;br&gt;  &lt;br&gt;    self.Bind(wx.EVT_MENU, self.acerca, acerca)&lt;br&gt;    self.Bind(wx.EVT_MENU, self.ayuda, ayuda)&lt;br&gt;&lt;/pre&gt;&lt;br&gt;Notará que cada ítem de los menús se "conecta" a un método de la propia clase que define la acción que se ejecutará en cada caso.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;El editor...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;Finalmente os dejo el código completo del editor. Desde luego existen muchas mejoras que pueden hacerse.&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;# -*- coding: utf-8 -*-&lt;br&gt;# ================================&lt;br&gt;# Por: Jorge De Los Santos  &lt;br&gt;# E-mail: delossantosmfq@gmail.com&lt;br&gt;# Licencia: BSD License&lt;br&gt;# ================================&lt;br&gt;&lt;br&gt;import wx&lt;br&gt;import os&lt;br&gt;import os.path&lt;br&gt;&lt;br&gt;class LABTxt(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;        if os.path.isfile("icono.png"):&lt;br&gt;            self.SetIcon(wx.Icon('icono.png'))&lt;br&gt;        self.archivo='untitled.txt'&lt;br&gt;        p=wx.Panel(self, -1)&lt;br&gt;  &lt;br&gt;        # Sizer&lt;br&gt;        sz=wx.BoxSizer(wx.VERTICAL)&lt;br&gt;  &lt;br&gt;        # Editor&lt;br&gt;        self.editor=wx.TextCtrl(p, -1, "", style=wx.TE_MULTILINE)&lt;br&gt;        self.configurarEditor()&lt;br&gt;  &lt;br&gt;        # Agregar al sizer&lt;br&gt;        sz.Add(self.editor, 1, wx.EXPAND)&lt;br&gt;        p.SetSizer(sz)&lt;br&gt;  &lt;br&gt;        # Crear barra de menu&lt;br&gt;        self.crearMenu()&lt;br&gt;        self.Show()&lt;br&gt;&lt;br&gt;    def configurarEditor(self):&lt;br&gt;        """ Configura las características iniciales del editor """&lt;br&gt;        self.fuente=wx.Font(12, wx.MODERN, wx.NORMAL, wx.NORMAL)&lt;br&gt;        self.fuente.SetFaceName("Courier New")&lt;br&gt;        self.editor.SetFont(self.fuente)&lt;br&gt;        self.editor.SetBackgroundStyle(True)&lt;br&gt; &lt;br&gt;    def crearMenu(self):  &lt;br&gt;        """ Crea la barra de menú """&lt;br&gt;        marchivo=wx.Menu()&lt;br&gt;        abrir=marchivo.Append(-1, "Abrir\tCtrl-O")&lt;br&gt;        guardar=marchivo.Append(-1, "Guardar\tCtrl-S")&lt;br&gt;        guardarComo=marchivo.Append(-1, "Guardar como")&lt;br&gt;  &lt;br&gt;        meditar=wx.Menu()&lt;br&gt;        copiar=meditar.Append(-1, "Copiar\tCtrl-C")&lt;br&gt;        pegar=meditar.Append(-1, "Pegar\tCtrl-V")&lt;br&gt;  &lt;br&gt;        self.mtema=wx.Menu()&lt;br&gt;        classic=self.mtema.Append(-1, "Classic")&lt;br&gt;        dark=self.mtema.Append(-1, "Dark")&lt;br&gt;        retro=self.mtema.Append(-1, "Retro")&lt;br&gt;        pink=self.mtema.Append(-1, "Pink")&lt;br&gt;  &lt;br&gt;        mayuda=wx.Menu()&lt;br&gt;        ayuda=mayuda.Append(-1, "Ayuda")&lt;br&gt;        acerca=mayuda.Append(-1, "Acerca de...")&lt;br&gt;  &lt;br&gt;        barraMenu=wx.MenuBar()&lt;br&gt;        barraMenu.Append(marchivo, "Archivo")&lt;br&gt;        barraMenu.Append(meditar, "Editar")&lt;br&gt;        barraMenu.Append(self.mtema, "Seleccionar tema")&lt;br&gt;        barraMenu.Append(mayuda, "Ayuda")&lt;br&gt;        self.SetMenuBar(barraMenu)&lt;br&gt;  &lt;br&gt;        # Definición de "eventos"&lt;br&gt;        self.Bind(wx.EVT_MENU, self.abrirArchivo, abrir)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.guardarArchivoComo, guardarComo)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.guardarArchivo, guardar)&lt;br&gt;  &lt;br&gt;        self.Bind(wx.EVT_MENU, self.copiar, copiar)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.pegar, pegar)&lt;br&gt;  &lt;br&gt;        self.Bind(wx.EVT_MENU, self.configurarTema, classic)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.configurarTema, dark)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.configurarTema, retro)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.configurarTema, pink)&lt;br&gt;  &lt;br&gt;        self.Bind(wx.EVT_MENU, self.acerca, acerca)&lt;br&gt;        self.Bind(wx.EVT_MENU, self.ayuda, ayuda)&lt;br&gt;&lt;br&gt;    def abrirArchivo(self, event):&lt;br&gt;        dlg=wx.FileDialog(self, "Abrir archivo", os.getcwd(), style=wx.OPEN)&lt;br&gt;        if dlg.ShowModal() == wx.ID_OK:&lt;br&gt;            try:&lt;br&gt;                fid=open(dlg.GetPath(),'r')&lt;br&gt;                texto=fid.readlines()&lt;br&gt;                self.texto="".join(texto)&lt;br&gt;                self.texto = self.texto.decode("utf8")&lt;br&gt;                fid.close()&lt;br&gt;                self.editor.SetValue(self.texto)&lt;br&gt;                self.archivo=dlg.GetPath()&lt;br&gt;                self.SetTitle("LABTxt "+self.archivo)&lt;br&gt;            except:&lt;br&gt;                wx.MessageBox(u"Archivo no válido","Error")&lt;br&gt;        dlg.Destroy()&lt;br&gt;&lt;br&gt;    def guardarArchivoComo(self, event):&lt;br&gt;        """ Guarda el archivo actual abriendo un cuadro de dialogo """&lt;br&gt;        dlg=wx.FileDialog(self, "Guardar", os.getcwd(), style=wx.SAVE)&lt;br&gt;        if dlg.ShowModal() == wx.ID_OK:&lt;br&gt;            fid=open(dlg.GetPath(),'w')&lt;br&gt;            txt=str(self.editor.GetValue().encode('utf8'))&lt;br&gt;            fid.write(txt)&lt;br&gt;            fid.close()&lt;br&gt;            self.archivo=dlg.GetPath()&lt;br&gt;            self.SetTitle("LABTxt 0.0.1  "+self.archivo)&lt;br&gt;        dlg.Destroy()&lt;br&gt;&lt;br&gt;    def guardarArchivo(self,event):&lt;br&gt;        """ Guarda el archivo actual """&lt;br&gt;        if hasattr(self, 'archivo'):&lt;br&gt;            fid=open(self.archivo,'w')&lt;br&gt;            txt=str(self.editor.GetValue().encode('utf8'))&lt;br&gt;            fid.write(txt)&lt;br&gt;            fid.close()&lt;br&gt;            wx.MessageBox("Hecho","LABTxt")&lt;br&gt;            self.SetTitle("LABTxt 0.0.1  "+self.archivo)&lt;br&gt;        else:&lt;br&gt;            self.guardarArchivoComo(None)&lt;br&gt;&lt;br&gt;    def copiar(self,event):&lt;br&gt;        """ Copia el texto seleccionado al portapapeles """&lt;br&gt;        texto=wx.TextDataObject(self.editor.GetStringSelection())&lt;br&gt;        if wx.TheClipboard.Open():&lt;br&gt;            wx.TheClipboard.SetData(texto)&lt;br&gt;            wx.TheClipboard.Close()&lt;br&gt;&lt;br&gt;    def pegar(self,event):&lt;br&gt;        """ Pega el texto ubicado en el portapapeles """&lt;br&gt;        txt=wx.TextDataObject()&lt;br&gt;        if wx.TheClipboard.Open():&lt;br&gt;            success=wx.TheClipboard.GetData(txt)&lt;br&gt;            wx.TheClipboard.Close()&lt;br&gt;        if success:&lt;br&gt;            self.editor.SetInsertionPoint(self.editor.GetInsertionPoint()) &lt;br&gt;            self.editor.write(txt.GetText())&lt;br&gt; &lt;br&gt;    def configurarTema(self,event):&lt;br&gt;         tema_sel=self.mtema.FindItemById(event.GetId()).GetText()&lt;br&gt;         temas={'Classic':((0,0,255),(255,255,255)),&lt;br&gt;        'Dark':((200,200,200),(0,0,0)),&lt;br&gt;        'Retro':((0,255,0),(0,0,0)),&lt;br&gt;        'Pink':((20,50,50),(250,180,180))}&lt;br&gt;        self.editor.SetForegroundColour(temas[tema_sel][0])&lt;br&gt;        self.editor.SetBackgroundColour(temas[tema_sel][1])&lt;br&gt;        self.editor.Refresh()&lt;br&gt;  &lt;br&gt;    def ayuda(self,event):&lt;br&gt;        wx.MessageBox("No disponible","LABTxt")&lt;br&gt;&lt;br&gt;    def acerca(self, event):&lt;br&gt;        descripcion=""" Editor de texto sin formato desarrollado en&lt;br&gt;        wxPython """&lt;br&gt;        info=wx.AboutDialogInfo()&lt;br&gt;        info.SetName('LABTxt')&lt;br&gt;        info.SetDescription(descripcion)&lt;br&gt;        info.SetVersion('0.0.1')&lt;br&gt;        info.SetLicense('BSD License')&lt;br&gt;        info.SetDevelopers(['Jorge De Los Santos'])&lt;br&gt;        info.SetWebSite(('labdls.blogspot.mx','LAB DLS'))&lt;br&gt;        info.SetCopyright('(c) 2014')&lt;br&gt;        wx.AboutBox(info)&lt;br&gt;&lt;br&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    fr = LABTxt(None, "LABTxt 0.0.1")&lt;br&gt;    app.MainLoop()&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;</description><category>MiniApps</category><category>wxPython</category><category>wxTextCtrl</category><guid>https://numython.github.io/posts/2016/03/un-mini-editor-de-texto-con-wxpython/</guid><pubDate>Tue, 22 Mar 2016 10:27:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Numython (Publicaciones sobre scikit-image)</title><link>https://numython.github.io/</link><description></description><atom:link href="https://numython.github.io/categories/scikit-image.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><lastBuildDate>Tue, 11 Sep 2018 22:30:38 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Introducción a scikit-image, procesamiento de imágenes en Python</title><link>https://numython.github.io/posts/2016/01/introduccion-scikit-image-procesamiento/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;En este post vamos a hacer una pequeña introducción a la librería scikit-image, la cual básicamente es una colección de algoritmos para el procesamiento de imágenes en Python.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;h2 id="para-comenzar"&gt;Para comenzar&lt;/h2&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;Todas las instrucciones referente a descarga e instalación, así como algunos códigos de ejemplos pueden encontrarse en la página oficial: &lt;a class="uri" href="http://scikit-image.org/"&gt;http://scikit-image.org/&lt;/a&gt;.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;A manera de referencia rápida, puede instalar scikit-image utilizando pip:&lt;/div&gt;&lt;br&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; pip install -U scikit-image&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;En general, scikit-image o skimage, trabaja con arrays de numpy, así como también hace uso de algunas utilidades gráficas de Matplotlib para la visualización, por ello también es necesario tener instaladas las librerías SciPy, Matplotlib, NetWorkX, y PIL/pillow.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;h2 id="lo-muy-básico-cómo-leer-y-mostrar-imágenes"&gt;Lo muy básico: cómo leer y mostrar imágenes&lt;/h2&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;Bueno, aquí un primer ejemplo de cómo leer y mostrar una imagen desde un archivo. Tenemos una imagen llamada "lenna.png" en el mismo directorio de nuestro código, luego, podemos utilizar el módulo &lt;code style="white-space: pre;"&gt;io&lt;/code&gt;de &lt;code style="white-space: pre;"&gt;scikit-image&lt;/code&gt; para leer y mostrar esta imagen. Básicamente se procede como sigue:&lt;/div&gt;&lt;br&gt;Primero importamos el modulo correspondiente:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;from&lt;/span&gt; skimage &lt;span class="im"&gt;import&lt;/span&gt; io&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Ahora utilizamos la función &lt;code style="white-space: pre;"&gt;imread&lt;/code&gt; del módulo &lt;code style="white-space: pre;"&gt;io&lt;/code&gt; para leer la imagen, y guardamos esto en una variable, en la cual se almacenará un array de NumPy con la información de los colores que componen la imagen.&lt;/div&gt;&lt;br&gt;&lt;code style="white-space: pre;"&gt;img = io.imread('lenna.png')&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Enseguida utilizamos la función &lt;code style="white-space: pre;"&gt;imshow&lt;/code&gt; para mostrar la imagen que pasemos como argumento y la función &lt;code style="white-space: pre;"&gt;show&lt;/code&gt; para mostrar toda la ventana o &lt;code style="white-space: pre;"&gt;figure&lt;/code&gt; que contiene la(s) imágenes a desplegar en la pantalla.&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;io.imshow(img)&lt;br&gt;io.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Juntando este mini código nos quedaría algo como lo siguiente:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;from&lt;/span&gt; skimage &lt;span class="im"&gt;import&lt;/span&gt; io&lt;br&gt;&lt;br&gt;img &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; io.imread(&lt;span class="st" style="color: #4070a0;"&gt;"lenna.png"&lt;/span&gt;)&lt;br&gt;io.imshow(img)&lt;br&gt;io.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Si ejecutamos lo anterior nos mostrará la imagen leída en una ventana o &lt;code style="white-space: pre;"&gt;figure&lt;/code&gt; de Matplotlib, tal como se aprecia en la siguiente imagen:&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-vD0rh5vdTFE/VqrkeT3ulNI/AAAAAAAABt4/XIukKAVpSYM/s1600/img_01.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="268" src="https://4.bp.blogspot.com/-vD0rh5vdTFE/VqrkeT3ulNI/AAAAAAAABt4/XIukKAVpSYM/s320/img_01.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Podemos &lt;em&gt;averiguar&lt;/em&gt; la forma o cantidad de elementos del array &lt;code style="white-space: pre;"&gt;img&lt;/code&gt; utilizando el método &lt;code style="white-space: pre;"&gt;shape&lt;/code&gt;, por ejemplo en el script anterior se puede añadir:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="bu"&gt;print&lt;/span&gt; img.shape&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Y con ello nos mostrará en consola una tupla de 3 elementos (para el caso de esta imagen) con la información del número de filas, columnas y &lt;em&gt;capas&lt;/em&gt; de la matriz. En nuestro ejemplo nos muestra:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;(512L, 512L, 3L)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Lo cual implica que tenemos una imagen de 512x512 pixeles. El tercer número indica que tenemos tres capas o &lt;em&gt;canales&lt;/em&gt; del módelo de color RGB, en el cual la primer capa representa el rojo, la segunda el verde y la tercera el azul. Así, toda la gama de colores para un pixel en específico se puede obtener mediante la combinación de estos tres colores primarios.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;h2 id="un-poco-de-gris..."&gt;Un poco de gris...&lt;/h2&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;Ahora, ya sabemos leer y mostrar imágenes. Vamos a operar un poco y a convertir nuestra matriz RGB de entrada en una matriz de intensidades en escala de grises, o en pocas palabras vamos a transformar una matriz de color en una en tono de grises. Para ello vamos a importar el módulo &lt;code style="white-space: pre;"&gt;color&lt;/code&gt; y a utilizar la función &lt;code style="white-space: pre;"&gt;rgb2gray&lt;/code&gt;:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;from&lt;/span&gt; skimage &lt;span class="im"&gt;import&lt;/span&gt; io,color&lt;br&gt;&lt;br&gt;img &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; io.imread(&lt;span class="st" style="color: #4070a0;"&gt;"lenna.png"&lt;/span&gt;)&lt;br&gt;img_gris &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; color.rgb2gray(img)&lt;br&gt;io.imshow(img_gris)&lt;br&gt;io.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-cpnYBa8KrD4/VqrkUmxJiII/AAAAAAAABtw/5_KMtcD6rb0/s1600/img_02.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="268" src="https://2.bp.blogspot.com/-cpnYBa8KrD4/VqrkUmxJiII/AAAAAAAABtw/5_KMtcD6rb0/s320/img_02.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;¿Y qué pasa si queremos mostrar ambas imágenes en una misma ventana?, bueno, para ello podemos hacer uso de la función &lt;code style="white-space: pre;"&gt;subplot&lt;/code&gt; de Matplotlib:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt&lt;br&gt;&lt;span class="im"&gt;from&lt;/span&gt; skimage &lt;span class="im"&gt;import&lt;/span&gt; io,color&lt;br&gt;&lt;br&gt;img &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; io.imread(&lt;span class="st" style="color: #4070a0;"&gt;"lenna.png"&lt;/span&gt;)&lt;br&gt;img_gris &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; color.rgb2gray(img)&lt;br&gt;plt.subplot(&lt;span class="dv" style="color: #40a070;"&gt;211&lt;/span&gt;)&lt;br&gt;io.imshow(img)&lt;br&gt;plt.subplot(&lt;span class="dv" style="color: #40a070;"&gt;212&lt;/span&gt;)&lt;br&gt;io.imshow(img_gris)&lt;br&gt;io.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-i_MssU0Z33c/VqrkRjic1tI/AAAAAAAABto/z0fBVZR3Uis/s1600/img_03.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="268" src="https://2.bp.blogspot.com/-i_MssU0Z33c/VqrkRjic1tI/AAAAAAAABto/z0fBVZR3Uis/s320/img_03.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Hasta aquí esta breve introducción a scikit-image, una librería que sin duda vale la pena revisar y que proporciona una cantidad razonable de algoritmos que pueden ser muy útiles en el procesamiento digital de imágenes. Posteriormente se hablará de algunos tópicos básicos adicionales, como la binarización, segmentación, y otras operaciones típicas.&lt;/div&gt;</description><category>mathjax</category><category>matplotlib</category><category>PDI</category><category>scikit-image</category><guid>https://numython.github.io/posts/2016/01/introduccion-scikit-image-procesamiento/</guid><pubDate>Fri, 29 Jan 2016 10:06:00 GMT</pubDate></item></channel></rss>
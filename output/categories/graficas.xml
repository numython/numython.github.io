<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Numython (Gráficas)</title><link>https://numython.github.io/</link><description></description><atom:link href="https://numython.github.io/categories/graficas.xml" type="application/rss+xml" rel="self"></atom:link><language>es</language><lastBuildDate>Tue, 18 Oct 2016 02:14:39 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Gráficas de barras en Matplotlib</title><link>https://numython.github.io/posts/2016/02/graficas-de-barras-en-matplotlib/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;p&gt;Esta entrada tiene como objetivo mostrar el uso de Matplotlib/Python como herramienta para generar una gráfica de barras.&lt;br&gt;&lt;br&gt;Bien, para nuestro ejemplo vamos a suponer que se tienen como datos las calificaciones de 5 alumnos guardadas en una lista, y que tenemos también otra lista con los nombres correspondientes a cada uno, evidentemente en el mismo orden. Os adjunto el script y enseguida la explicación de cada linea:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;pre class="brush: python"&gt;#-*- coding: utf-8 -*-&lt;br&gt;import matplotlib.pyplot as plt&lt;br&gt;&lt;br&gt;fig = plt.figure(u'Gráfica de barras') # Figure&lt;br&gt;ax = fig.add_subplot(111) # Axes&lt;br&gt;&lt;br&gt;nombres = ['Juan','Ana','Pablo','Ximena','Jorge']&lt;br&gt;datos = [90,88,78,94,93]&lt;br&gt;xx = range(len(datos))&lt;br&gt;&lt;br&gt;ax.bar(xx, datos, width=0.8, align='center')&lt;br&gt;ax.set_xticks(xx)&lt;br&gt;ax.set_xticklabels(nombres)&lt;br&gt;&lt;br&gt;plt.show()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;La primera linea sirve para especificar la codificación utilizada en el fichero y con ello evitar todo tipo de "sorpresas" debido a la peculiaridad de nuestro idioma, de modo que es necesaria. La segunda linea importa el módulo pyplot de la librería Matplotlib utilizando el alias plt.&lt;br&gt;&lt;br&gt;Luego, creamos una nueva ventana mediante el uso de figure, y añadimos enseguida un axes mediante la instrucción add_subplot(111), donde el 111 indica que solamente se tendrá un eje coordenado dentro de la ventana.&lt;br&gt;&lt;br&gt;Posteriormente se definen las listas que servirán como entrada para trazar la gráfica de barras. En la lista nombre se guarda un arreglo de strings con los nombres de cada alumno, en datos se guardan las calificaciones correspondientes y xx es una lista de enteros desde 0 a N-1, donde N es el número de elementos que contiene la lista datos, xx servirá para especificar los puntos ubicados en el eje horizontal en los cuales se trazarán las barras.&lt;br&gt;&lt;br&gt;Una vez se han creado las listas, se procede a trazar la gráfica de barras mediante la función bar, cuyos parámetros de entrada son la lista xx y la lista de datos y/o calificaciones. Además de lo anterior, pueden utilizarse keywords arguments como width o align que sirven para especificar el ancho y la alineación de las barras trazadas. Luego, la función set_xticks define las marcas utilizadas para etiquetar al eje horizontal, y set_xticklabels permite colocar una lista de strings como etiquetas personalizadas, que en este caso corresponde a la lista de nombres.&lt;br&gt;&lt;br&gt;Finalmente se utiliza la función show para mostrar todo lo que se ha trazado. Se adjunta la salida gráfica del script en cuestión.&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-x2jFDeLSido/VKTKUfDsciI/AAAAAAAABY8/K_dbQk01FFg/s1600/Captura.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="267" src="https://4.bp.blogspot.com/-x2jFDeLSido/VKTKUfDsciI/AAAAAAAABY8/K_dbQk01FFg/s1600/Captura.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;</description><category>Gráficas</category><category>Matplotlib</category><guid>https://numython.github.io/posts/2016/02/graficas-de-barras-en-matplotlib/</guid><pubDate>Wed, 24 Feb 2016 22:47:00 GMT</pubDate></item><item><title>Gráficas de contorno en Matplotlib</title><link>https://numython.github.io/posts/2016/02/graficas-de-contorno-en-matplotlib/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;p&gt;Una manera de visualizar una función de dos variables es usar un campo escalar, en el que el escalar \(z = f(x,y)\) se asigna al punto \((x,y)\). Un campo escalar puede caracterizarse por sus curvas de nivel (o líneas de contorno) a lo largo de las cuales el valor de \(f(x,y)\) es constante.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-gGA-OfOTy4o/Vs1bGZd--FI/AAAAAAAABw8/AH84hgg1CdE/s1600/surface.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="https://3.bp.blogspot.com/-gGA-OfOTy4o/Vs1bGZd--FI/AAAAAAAABw8/AH84hgg1CdE/s320/surface.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;El trazo de gráficas de lineas de contorno o curvas de nivel puede hacerse en Matplotlib utilizando la función &lt;code style="white-space: pre;"&gt;contour&lt;/code&gt;, por ejemplo:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt &lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;br&gt;fig &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; plt.figure()&lt;br&gt;ax &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.add_subplot(&lt;span class="dv" style="color: #40a070;"&gt;111&lt;/span&gt;)&lt;br&gt;&lt;br&gt;x &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; y &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.linspace(&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;)&lt;br&gt;X,Y &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.meshgrid(x,y)&lt;br&gt;Z &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; (&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;4&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;X)&lt;span class="op" style="color: #666666;"&gt;/&lt;/span&gt;(X&lt;span class="op" style="color: #666666;"&gt;**&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; Y&lt;span class="op" style="color: #666666;"&gt;**&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;br&gt;&lt;br&gt;cs &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; ax.contour(X,Y,Z)&lt;br&gt;plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/Python%20para%20Ingenieros/Posts/Gr%C3%A1ficas%20de%20contorno%20en%20Matplotlib/img/img_01.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-kbkYiQIYMo0/Vs1bFMkTiiI/AAAAAAAABww/DmM8liftudo/s1600/img_01.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="https://1.bp.blogspot.com/-kbkYiQIYMo0/Vs1bFMkTiiI/AAAAAAAABww/DmM8liftudo/s320/img_01.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;Podemos aumentar el número de niveles si agregamos un argumento de entrada a la función &lt;code style="white-space: pre;"&gt;contour&lt;/code&gt;, por ejemplo:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;cs &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; ax.contour(X, Y, Z, &lt;span class="dv" style="color: #40a070;"&gt;20&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Con lo anterior tendríamos representados 20 niveles o 20 &lt;em&gt;planos&lt;/em&gt; de valores constantes &lt;span class="math inline"&gt;&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;)=&lt;em&gt;C&lt;/em&gt;&lt;/span&gt;.&lt;br&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/Python%20para%20Ingenieros/Posts/Gr%C3%A1ficas%20de%20contorno%20en%20Matplotlib/img/img_02.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-0deFz5SjWV4/Vs1bFiqGfBI/AAAAAAAABw4/ahJye76QOgQ/s1600/img_02.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="https://4.bp.blogspot.com/-0deFz5SjWV4/Vs1bFiqGfBI/AAAAAAAABw4/ahJye76QOgQ/s320/img_02.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;Se pueden agregar etiquetas a cada curva de nivel si utilizamos el método &lt;code style="white-space: pre;"&gt;clabel&lt;/code&gt;, por ejemplo:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt &lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;br&gt;fig &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; plt.figure()&lt;br&gt;ax &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.add_subplot(&lt;span class="dv" style="color: #40a070;"&gt;111&lt;/span&gt;)&lt;br&gt;&lt;br&gt;x &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; y &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.linspace(&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;)&lt;br&gt;X,Y &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.meshgrid(x,y)&lt;br&gt;Z &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; (&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;4&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;X)&lt;span class="op" style="color: #666666;"&gt;/&lt;/span&gt;(X&lt;span class="op" style="color: #666666;"&gt;**&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; Y&lt;span class="op" style="color: #666666;"&gt;**&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;br&gt;&lt;br&gt;cs &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; ax.contour(X, Y, Z, &lt;span class="dv" style="color: #40a070;"&gt;15&lt;/span&gt;)&lt;br&gt;ax.clabel(cs, fontsize&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;)&lt;br&gt;&lt;br&gt;plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-Bn_XDTuP_MA/Vs1bFpZDLVI/AAAAAAAABw0/jXFruvBtz-w/s1600/img_03.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="https://4.bp.blogspot.com/-Bn_XDTuP_MA/Vs1bFpZDLVI/AAAAAAAABw0/jXFruvBtz-w/s320/img_03.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;</description><category>Gráficas</category><category>Matplotlib</category><guid>https://numython.github.io/posts/2016/02/graficas-de-contorno-en-matplotlib/</guid><pubDate>Wed, 24 Feb 2016 13:27:00 GMT</pubDate></item><item><title>Gráficas en coordenadas polares en Matplotlib</title><link>https://numython.github.io/posts/2016/01/graficas-en-coordenadas-polares-en/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;Trazar gráficas en coordenadas polares mediante el módulo &lt;code style="white-space: pre;"&gt;pyplot&lt;/code&gt; es muy sencillo, y se procede de manera similar que con las funciones en coordenadas rectangulares. Lo único que debemos cambiar es el tipo de proyección de el axes en el que vamos a &lt;em&gt;plotear&lt;/em&gt; nuestras funciones polares.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Por ejemplo si queremos graficar una espiral de Arquímedes:&lt;/div&gt;&lt;br&gt;&lt;span class="math display"&gt;&lt;em&gt;r&lt;/em&gt;(&lt;em&gt;θ&lt;/em&gt;)=&lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt;&lt;em&gt;θ&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="math display"&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/span&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt&lt;br&gt;&lt;br&gt;theta &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.linspace(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;np.pi)&lt;br&gt;r &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;theta&lt;br&gt;&lt;br&gt;fig &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; plt.figure()&lt;br&gt;ax &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.add_subplot(&lt;span class="dv" style="color: #40a070;"&gt;111&lt;/span&gt;, projection&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"polar"&lt;/span&gt;)&lt;br&gt;ax.plot(theta,r)&lt;br&gt;&lt;br&gt;plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-Z4ivUK71UpY/VqrQg6olPtI/AAAAAAAABtU/t-8U4xEa68U/s1600/espiral.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="http://1.bp.blogspot.com/-Z4ivUK71UpY/VqrQg6olPtI/AAAAAAAABtU/t-8U4xEa68U/s320/espiral.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;O una rosa polar:&lt;br&gt;&lt;br&gt;&lt;span class="math display"&gt;&lt;em&gt;r&lt;/em&gt;(&lt;em&gt;θ&lt;/em&gt;)=&lt;em&gt;a&lt;/em&gt;cos(&lt;em&gt;k&lt;/em&gt;&lt;em&gt;θ&lt;/em&gt; + &lt;em&gt;ϕ&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="math display"&gt;&lt;br&gt;&lt;/span&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt&lt;br&gt;&lt;br&gt;theta &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.linspace(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;np.pi,&lt;span class="dv" style="color: #40a070;"&gt;1000&lt;/span&gt;)&lt;br&gt;r &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;np.cos(&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;theta)&lt;br&gt;&lt;br&gt;fig &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; plt.figure()&lt;br&gt;ax &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.add_subplot(&lt;span class="dv" style="color: #40a070;"&gt;111&lt;/span&gt;, projection&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"polar"&lt;/span&gt;)&lt;br&gt;ax.plot(theta,r,color&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"#ffb6c1"&lt;/span&gt;,linewidth&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;)&lt;br&gt;&lt;br&gt;plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-xEiTreU_Lg8/VqrQg7qB2qI/AAAAAAAABtY/IosbTsmbEpU/s1600/rosa_polar.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="http://2.bp.blogspot.com/-xEiTreU_Lg8/VqrQg7qB2qI/AAAAAAAABtY/IosbTsmbEpU/s320/rosa_polar.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Note que se pueden pasar argumentos de estilo y color a la función &lt;code style="white-space: pre;"&gt;plot&lt;/code&gt; tal y como se hace con las gráficas en coordenadas rectangulares.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Como se observa en los ejemplos anteriores lo único que debemos hacer es adicionar el &lt;em&gt;keyword argument&lt;/em&gt; &lt;code style="white-space: pre;"&gt;projection='polar'&lt;/code&gt; al momento de crear el axes en el cual graficaremos nuestra función en coordenadas polares.&lt;/div&gt;</description><category>Gráficas</category><category>Matplotlib</category><guid>https://numython.github.io/posts/2016/01/graficas-en-coordenadas-polares-en/</guid><pubDate>Fri, 29 Jan 2016 08:40:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Numython (Matplotlib)</title><link>https://numython.github.io/</link><description></description><atom:link href="https://numython.github.io/categories/matplotlib.xml" type="application/rss+xml" rel="self"></atom:link><language>es</language><lastBuildDate>Tue, 18 Oct 2016 02:19:13 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Graficar en Python con Matplotlib y NumPy</title><link>https://numython.github.io/posts/2016/02/graficar-en-python-con-matplotlib-y/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;Trazar gráficas en Python es muy sencillo, para ello necesita tener instaladas las librerías matplotlib y numpy, las cuales pueden encontrarse y descargar de la red sin mayores obstáculos. Debe asegurarse que la versión de las librerías sea compatible con la versión de Python.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Si alguna vez ha utilizado MATLAB para estos mismos fines, las instrucciones le parecerán demasiado familiar.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Enseguida os adjunto un código sencillo y el resultado que produce:&lt;/div&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;import matplotlib.pyplot as plt&lt;br&gt;import numpy as np&lt;br&gt;&lt;br&gt;x = np.arange(0,10,0.1)&lt;br&gt;y = x*np.cos(x)&lt;br&gt;&lt;br&gt;plt.plot(x,y)&lt;br&gt;plt.xlabel('x')&lt;br&gt;plt.ylabel('y')&lt;br&gt;plt.title('Lab DLS')&lt;br&gt;plt.show()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-F1Qzh-W-7Gw/UxvtzNBs2VI/AAAAAAAABEk/wYX758jaymM/s1600/graph1.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="271" src="https://2.bp.blogspot.com/-F1Qzh-W-7Gw/UxvtzNBs2VI/AAAAAAAABEk/wYX758jaymM/s1600/graph1.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Las primeras dos líneas sirven para importar las librerías que se utilizarán. Recuerde que en Python pueden utilizarse seudónimos al cargar una librería (en este caso plt para matplotlib.pyplot y np para numpy).&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;En la línea se 4 se define el vector de la variable independiente utilizando la instrucción arange de la librería numpy, el cual crea un vector especificando el valor inicial, el valor final y el incremento como argumentos. La linea 5 crea simplemente un vector dependiente del primero.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;La instrucción plot gráfica los vectores creados con anterioridad, teniendo como primer argumento el vector de la variable independiente. Con xlabel, ylabel y title se muestran las etiquetas correspondientes a los ejes horizontal, vertical y el título en la parte superior respectivamente. Finalmente, la instrucción show() sirve para mostrar la ventana gráfica creada y poder visualizar lo que se ha trazado.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;Modificando la presentación...&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;br&gt;&lt;i&gt;Grosor de línea&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Para modificar el grosor de línea basta con incluir como argumento adicional en plot la propiedad linewidth, tal como se muestra enseguida:&lt;/div&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;plt.plot(x,y,linewidth=4)&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;i&gt;Color de línea&lt;/i&gt;&lt;br&gt;&lt;br&gt;El siguiente ejemplo configura el color de la línea, en este caso rojo.&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;plt.plot(x,y,color='r')&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;También puede especificar el color utilizando una tupla de 3 elementos (R,G,B) en el intervalo [0 1], por ejemplo:&lt;/div&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;plt.plot(x,y,color=(0.8,0.9,0))&lt;/pre&gt;&lt;br&gt;&lt;i&gt;Agregando rejilla&lt;/i&gt;&lt;br&gt;&lt;br&gt;Para agregar una rejilla debe incluirse la instrucción grid() como se muestra:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;plt.grid()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;Mostrar más de una gráfica&lt;/span&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;Para mostrar más de una gráfica en la misma ventana, utilice hold(True) después de haber creado la primer gráfica o bien antes de ella, tal como se muestra en el código siguiente:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;import matplotlib.pyplot as plt&lt;br&gt;import numpy as np&lt;br&gt;&lt;br&gt;x = np.arange(0,10,0.2)&lt;br&gt;y1 = np.cos(x)&lt;br&gt;y2 = np.sin(x)&lt;br&gt;&lt;br&gt;plt.plot(x,y1,'o',linewidth=3,color=(0.2,0.1,0.4))&lt;br&gt;plt.hold(True)&lt;br&gt;plt.plot(x,y2,'-',linewidth=2,color='g')&lt;br&gt;plt.grid()&lt;br&gt;plt.axis('equal')&lt;br&gt;plt.xlabel('x')&lt;br&gt;plt.ylabel('y')&lt;br&gt;plt.title('Lab DLS')&lt;br&gt;plt.show()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-zLEWNeou8Ck/UxwGMYIi3wI/AAAAAAAABE0/m1tXOSZnuOM/s1600/graph2.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="270" src="https://3.bp.blogspot.com/-zLEWNeou8Ck/UxwGMYIi3wI/AAAAAAAABE0/m1tXOSZnuOM/s1600/graph2.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</description><category>mathjax</category><category>Matplotlib</category><category>NumPy</category><guid>https://numython.github.io/posts/2016/02/graficar-en-python-con-matplotlib-y/</guid><pubDate>Wed, 24 Feb 2016 22:52:00 GMT</pubDate></item><item><title>Gráficas de barras en Matplotlib</title><link>https://numython.github.io/posts/2016/02/graficas-de-barras-en-matplotlib/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;p&gt;Esta entrada tiene como objetivo mostrar el uso de Matplotlib/Python como herramienta para generar una gráfica de barras.&lt;br&gt;&lt;br&gt;Bien, para nuestro ejemplo vamos a suponer que se tienen como datos las calificaciones de 5 alumnos guardadas en una lista, y que tenemos también otra lista con los nombres correspondientes a cada uno, evidentemente en el mismo orden. Os adjunto el script y enseguida la explicación de cada linea:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;pre class="brush: python"&gt;#-*- coding: utf-8 -*-&lt;br&gt;import matplotlib.pyplot as plt&lt;br&gt;&lt;br&gt;fig = plt.figure(u'Gráfica de barras') # Figure&lt;br&gt;ax = fig.add_subplot(111) # Axes&lt;br&gt;&lt;br&gt;nombres = ['Juan','Ana','Pablo','Ximena','Jorge']&lt;br&gt;datos = [90,88,78,94,93]&lt;br&gt;xx = range(len(datos))&lt;br&gt;&lt;br&gt;ax.bar(xx, datos, width=0.8, align='center')&lt;br&gt;ax.set_xticks(xx)&lt;br&gt;ax.set_xticklabels(nombres)&lt;br&gt;&lt;br&gt;plt.show()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;La primera linea sirve para especificar la codificación utilizada en el fichero y con ello evitar todo tipo de "sorpresas" debido a la peculiaridad de nuestro idioma, de modo que es necesaria. La segunda linea importa el módulo pyplot de la librería Matplotlib utilizando el alias plt.&lt;br&gt;&lt;br&gt;Luego, creamos una nueva ventana mediante el uso de figure, y añadimos enseguida un axes mediante la instrucción add_subplot(111), donde el 111 indica que solamente se tendrá un eje coordenado dentro de la ventana.&lt;br&gt;&lt;br&gt;Posteriormente se definen las listas que servirán como entrada para trazar la gráfica de barras. En la lista nombre se guarda un arreglo de strings con los nombres de cada alumno, en datos se guardan las calificaciones correspondientes y xx es una lista de enteros desde 0 a N-1, donde N es el número de elementos que contiene la lista datos, xx servirá para especificar los puntos ubicados en el eje horizontal en los cuales se trazarán las barras.&lt;br&gt;&lt;br&gt;Una vez se han creado las listas, se procede a trazar la gráfica de barras mediante la función bar, cuyos parámetros de entrada son la lista xx y la lista de datos y/o calificaciones. Además de lo anterior, pueden utilizarse keywords arguments como width o align que sirven para especificar el ancho y la alineación de las barras trazadas. Luego, la función set_xticks define las marcas utilizadas para etiquetar al eje horizontal, y set_xticklabels permite colocar una lista de strings como etiquetas personalizadas, que en este caso corresponde a la lista de nombres.&lt;br&gt;&lt;br&gt;Finalmente se utiliza la función show para mostrar todo lo que se ha trazado. Se adjunta la salida gráfica del script en cuestión.&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-x2jFDeLSido/VKTKUfDsciI/AAAAAAAABY8/K_dbQk01FFg/s1600/Captura.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="267" src="https://4.bp.blogspot.com/-x2jFDeLSido/VKTKUfDsciI/AAAAAAAABY8/K_dbQk01FFg/s1600/Captura.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;</description><category>Gráficas</category><category>mathjax</category><category>Matplotlib</category><guid>https://numython.github.io/posts/2016/02/graficas-de-barras-en-matplotlib/</guid><pubDate>Wed, 24 Feb 2016 22:47:00 GMT</pubDate></item><item><title>Borrar líneas en Matplotlib de manera interactiva</title><link>https://numython.github.io/posts/2016/02/borrar-lineas-en-matplotlib-de-manera/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;Matplotlib es una librería normalmente utilizada para trazar gráficas que habrán de exportarse como un archivo "estático" e incluirse en algún tipo de documento posteriormente. Pero además, Matplotlib también tiene algunas características que permiten que el usuario pueda interactuar, tales como los widgets o los eventos definidos por el usuario. Y esta última característica vamos a aprovechar en este post para ver cómo poder borrar líneas de una gráfica Matplotlib una vez que esta ha sido creada, esto mediante la selección a través del mouse.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Los eventos en Matplotlib se "conectan" utilizando el método &lt;code style="white-space: pre;"&gt;mpl_connect&lt;/code&gt; de la clase &lt;code style="white-space: pre;"&gt;FigureCanvas&lt;/code&gt;, mediante la sintaxis siguiente:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;hevt &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.canvas.mpl_connect(&lt;span class="st" style="color: #4070a0;"&gt;'tipo_evento'&lt;/span&gt;, fun)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Donde &lt;code style="white-space: pre;"&gt;hevt&lt;/code&gt; es una variable en la cual se guarda la referencia al evento y que puede ser utilizada para desconectarlo cuando no lo necesitemos más, &lt;code style="white-space: pre;"&gt;fig&lt;/code&gt; es una instancia de la clase &lt;code style="white-space: pre;"&gt;Figure&lt;/code&gt;, &lt;code style="white-space: pre;"&gt;tipo_evento&lt;/code&gt; es uno de los eventos que pueden ser conectados en Matplotlib, cuya lista puede ver &lt;a href="http://matplotlib.org/users/event_handling.html#event-connections"&gt;aquí&lt;/a&gt;, y &lt;code style="white-space: pre;"&gt;fun&lt;/code&gt; es una función en la cual deberá programarse la respuesta de nuestro programa cuando se lance el evento.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Por ahora nos interesa el tipo de evento &lt;code style="white-space: pre;"&gt;pick_event&lt;/code&gt;, el cual se "lanza" cuando un objeto en el canvas actual es seleccionado. Así, para conectar nuestro evento haremos algo como lo siguiente:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;pick &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.canvas.mpl_connect(&lt;span class="st" style="color: #4070a0;"&gt;"pick_event"&lt;/span&gt;, OnSelect)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Ahora vamos a por todo el código y enseguida explicamos para qué cada cosa:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnSelect(event):&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    dlg &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.MessageDialog(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Desea borrar"&lt;/span&gt;,&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;'Matplotlib Demo'&lt;/span&gt;, wx.YES_NO&lt;span class="op" style="color: #666666;"&gt;|&lt;/span&gt;wx.ICON_QUESTION)&lt;br&gt;    &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; dlg.ShowModal() &lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt; wx.ID_YES:&lt;br&gt;        event.artist.remove()&lt;br&gt;    dlg.Destroy()&lt;br&gt;    app.MainLoop()&lt;br&gt;    fig.canvas.draw()&lt;br&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Definir datos a plotear&lt;/span&gt;&lt;br&gt;X &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.random.random((&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;))&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Crear figure y axes&lt;/span&gt;&lt;br&gt;fig &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; plt.figure()&lt;br&gt;ax &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.add_subplot(&lt;span class="dv" style="color: #40a070;"&gt;111&lt;/span&gt;)&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Graficar datos&lt;/span&gt;&lt;br&gt;ax.plot(X, picker&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Conectar evento "pick_event"&lt;/span&gt;&lt;br&gt;pick &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.canvas.mpl_connect(&lt;span class="st" style="color: #4070a0;"&gt;"pick_event"&lt;/span&gt;, OnSelect)&lt;br&gt;plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-3IUBZXZPaX0/Vs12S30wNaI/AAAAAAAABxU/cD9orfSktFo/s1600/img_01.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="268" src="https://4.bp.blogspot.com/-3IUBZXZPaX0/Vs12S30wNaI/AAAAAAAABxU/cD9orfSktFo/s320/img_01.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Primero, importamos, claro, los módulos a utilizar. Lo de wxPython es &lt;em&gt;opcional&lt;/em&gt;, sólo nos servirá para confirmar si realmente queremos borrar cierta línea y puede sustituirse con cualquier otra librería gráfica, Tkinter por ejemplo. Luego, definimos unos datos aleatorios, creamos nuestra &lt;code style="white-space: pre;"&gt;Figure&lt;/code&gt; y nuestro &lt;code style="white-space: pre;"&gt;Axes&lt;/code&gt; de la manera en que se debe, y posteriormente &lt;em&gt;ploteamos&lt;/em&gt; los datos utilizando &lt;code style="white-space: pre;"&gt;plot&lt;/code&gt;, pero adicionando el&lt;em&gt;keyword argument&lt;/em&gt; &lt;code style="white-space: pre;"&gt;picker=True&lt;/code&gt; para decirle a Matplotlib que para nuestro objeto gráfico resultante requerimos que esté disponible para ser seleccionado mediante el mouse. Y finalmente conectamos el evento de tipo &lt;code style="white-space: pre;"&gt;"pick_event"&lt;/code&gt; al canvas correspondiente, pasando a la función &lt;code style="white-space: pre;"&gt;OnSelect&lt;/code&gt; como la encargada de &lt;em&gt;dar una respuesta&lt;/em&gt; a ese evento.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;La función &lt;code style="white-space: pre;"&gt;OnSelect&lt;/code&gt; bien puede reducirse a dos líneas si es que no requerimos confirmación de borrado, algo como:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnSelect(event):&lt;br&gt;    event.artist.remove()&lt;br&gt;    fig.canvas.draw()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;El resto de código es para crear un cuadro de diálogo en wxPython que nos pregunta si realmente queremos borrar la línea que hemos seleccionado.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/Python%20para%20Ingenieros/Posts/Borrar%20lineas%20en%20Matplotlib%20de%20manera%20interactiva/img/img_01.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Podríamos &lt;em&gt;mejorar&lt;/em&gt; un poquito nuestro "demo" si por ejemplo cada vez que seleccionamos una línea esta sea modificada para distinguirse un poco más del resto, por ejemplo modificar su grosor, y en caso de no confirmar su borrado entonces regresar al aspecto original. Agregando algunas líneas nos queda un código más o menos como este:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnSelect(event):&lt;br&gt;    klw &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;&lt;br&gt;    event.artist.set_lw(event.artist.get_lw() &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; klw)&lt;br&gt;    fig.canvas.draw()&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    dlg &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.MessageDialog(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Desea borrar"&lt;/span&gt;,&lt;br&gt;    &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;'Matplotlib Demo'&lt;/span&gt;, wx.YES_NO&lt;span class="op" style="color: #666666;"&gt;|&lt;/span&gt;wx.ICON_QUESTION)&lt;br&gt;    &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; dlg.ShowModal() &lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt; wx.ID_YES:&lt;br&gt;        event.artist.remove()&lt;br&gt;    &lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;else&lt;/span&gt;:&lt;br&gt;        event.artist.set_lw(event.artist.get_lw() &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt; klw)&lt;br&gt;    dlg.Destroy()&lt;br&gt;    app.MainLoop()&lt;br&gt;    fig.canvas.draw()&lt;br&gt;&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Definir datos a plotear&lt;/span&gt;&lt;br&gt;X &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.random.random((&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;))&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Crear figure y axes&lt;/span&gt;&lt;br&gt;fig &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; plt.figure()&lt;br&gt;ax &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.add_subplot(&lt;span class="dv" style="color: #40a070;"&gt;111&lt;/span&gt;)&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Graficar datos&lt;/span&gt;&lt;br&gt;ax.plot(X, picker&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;&lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Conectar evento "pick_event"&lt;/span&gt;&lt;br&gt;pick &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.canvas.mpl_connect(&lt;span class="st" style="color: #4070a0;"&gt;"pick_event"&lt;/span&gt;, OnSelect)&lt;br&gt;plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/Python%20para%20Ingenieros/Posts/Borrar%20lineas%20en%20Matplotlib%20de%20manera%20interactiva/img/img_02.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-yqflea3-OII/Vs12TDN5p0I/AAAAAAAABxY/Q6NiQ0rhYms/s1600/img_02.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="267" src="https://1.bp.blogspot.com/-yqflea3-OII/Vs12TDN5p0I/AAAAAAAABxY/Q6NiQ0rhYms/s320/img_02.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Y bueno, con esto finalizamos esta pequeña introducción a las formas interactivas de Matplotlib, desde luego existen muchas posibilidades para implementar, de tal modo que nos quede algo más &lt;em&gt;chulo&lt;/em&gt;.&lt;/div&gt;</description><category>mathjax</category><category>Matplotlib</category><category>wxPython</category><guid>https://numython.github.io/posts/2016/02/borrar-lineas-en-matplotlib-de-manera/</guid><pubDate>Wed, 24 Feb 2016 15:24:00 GMT</pubDate></item><item><title>Gráficas de contorno en Matplotlib</title><link>https://numython.github.io/posts/2016/02/graficas-de-contorno-en-matplotlib/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;p&gt;Una manera de visualizar una función de dos variables es usar un campo escalar, en el que el escalar \(z = f(x,y)\) se asigna al punto \((x,y)\). Un campo escalar puede caracterizarse por sus curvas de nivel (o líneas de contorno) a lo largo de las cuales el valor de \(f(x,y)\) es constante.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-gGA-OfOTy4o/Vs1bGZd--FI/AAAAAAAABw8/AH84hgg1CdE/s1600/surface.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="https://3.bp.blogspot.com/-gGA-OfOTy4o/Vs1bGZd--FI/AAAAAAAABw8/AH84hgg1CdE/s320/surface.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;El trazo de gráficas de lineas de contorno o curvas de nivel puede hacerse en Matplotlib utilizando la función &lt;code style="white-space: pre;"&gt;contour&lt;/code&gt;, por ejemplo:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt &lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;br&gt;fig &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; plt.figure()&lt;br&gt;ax &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.add_subplot(&lt;span class="dv" style="color: #40a070;"&gt;111&lt;/span&gt;)&lt;br&gt;&lt;br&gt;x &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; y &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.linspace(&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;)&lt;br&gt;X,Y &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.meshgrid(x,y)&lt;br&gt;Z &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; (&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;4&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;X)&lt;span class="op" style="color: #666666;"&gt;/&lt;/span&gt;(X&lt;span class="op" style="color: #666666;"&gt;**&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; Y&lt;span class="op" style="color: #666666;"&gt;**&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;br&gt;&lt;br&gt;cs &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; ax.contour(X,Y,Z)&lt;br&gt;plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/Python%20para%20Ingenieros/Posts/Gr%C3%A1ficas%20de%20contorno%20en%20Matplotlib/img/img_01.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-kbkYiQIYMo0/Vs1bFMkTiiI/AAAAAAAABww/DmM8liftudo/s1600/img_01.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="https://1.bp.blogspot.com/-kbkYiQIYMo0/Vs1bFMkTiiI/AAAAAAAABww/DmM8liftudo/s320/img_01.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;Podemos aumentar el número de niveles si agregamos un argumento de entrada a la función &lt;code style="white-space: pre;"&gt;contour&lt;/code&gt;, por ejemplo:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;cs &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; ax.contour(X, Y, Z, &lt;span class="dv" style="color: #40a070;"&gt;20&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Con lo anterior tendríamos representados 20 niveles o 20 &lt;em&gt;planos&lt;/em&gt; de valores constantes &lt;span class="math inline"&gt;&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;)=&lt;em&gt;C&lt;/em&gt;&lt;/span&gt;.&lt;br&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/Python%20para%20Ingenieros/Posts/Gr%C3%A1ficas%20de%20contorno%20en%20Matplotlib/img/img_02.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-0deFz5SjWV4/Vs1bFiqGfBI/AAAAAAAABw4/ahJye76QOgQ/s1600/img_02.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="https://4.bp.blogspot.com/-0deFz5SjWV4/Vs1bFiqGfBI/AAAAAAAABw4/ahJye76QOgQ/s320/img_02.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;Se pueden agregar etiquetas a cada curva de nivel si utilizamos el método &lt;code style="white-space: pre;"&gt;clabel&lt;/code&gt;, por ejemplo:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt &lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;br&gt;fig &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; plt.figure()&lt;br&gt;ax &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.add_subplot(&lt;span class="dv" style="color: #40a070;"&gt;111&lt;/span&gt;)&lt;br&gt;&lt;br&gt;x &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; y &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.linspace(&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;)&lt;br&gt;X,Y &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.meshgrid(x,y)&lt;br&gt;Z &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; (&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;4&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;X)&lt;span class="op" style="color: #666666;"&gt;/&lt;/span&gt;(X&lt;span class="op" style="color: #666666;"&gt;**&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; Y&lt;span class="op" style="color: #666666;"&gt;**&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;br&gt;&lt;br&gt;cs &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; ax.contour(X, Y, Z, &lt;span class="dv" style="color: #40a070;"&gt;15&lt;/span&gt;)&lt;br&gt;ax.clabel(cs, fontsize&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;)&lt;br&gt;&lt;br&gt;plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-Bn_XDTuP_MA/Vs1bFpZDLVI/AAAAAAAABw0/jXFruvBtz-w/s1600/img_03.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="https://4.bp.blogspot.com/-Bn_XDTuP_MA/Vs1bFpZDLVI/AAAAAAAABw0/jXFruvBtz-w/s320/img_03.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;</description><category>Gráficas</category><category>mathjax</category><category>Matplotlib</category><guid>https://numython.github.io/posts/2016/02/graficas-de-contorno-en-matplotlib/</guid><pubDate>Wed, 24 Feb 2016 13:27:00 GMT</pubDate></item><item><title>Introducción a scikit-image, procesamiento de imágenes en Python</title><link>https://numython.github.io/posts/2016/01/introduccion-scikit-image-procesamiento/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;En este post vamos a hacer una pequeña introducción a la librería scikit-image, la cual básicamente es una colección de algoritmos para el procesamiento de imágenes en Python.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;h2 id="para-comenzar"&gt;Para comenzar&lt;/h2&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;Todas las instrucciones referente a descarga e instalación, así como algunos códigos de ejemplos pueden encontrarse en la página oficial: &lt;a class="uri" href="http://scikit-image.org/"&gt;http://scikit-image.org/&lt;/a&gt;.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;A manera de referencia rápida, puede instalar scikit-image utilizando pip:&lt;/div&gt;&lt;br&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; pip install -U scikit-image&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;En general, scikit-image o skimage, trabaja con arrays de numpy, así como también hace uso de algunas utilidades gráficas de Matplotlib para la visualización, por ello también es necesario tener instaladas las librerías SciPy, Matplotlib, NetWorkX, y PIL/pillow.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;h2 id="lo-muy-básico-cómo-leer-y-mostrar-imágenes"&gt;Lo muy básico: cómo leer y mostrar imágenes&lt;/h2&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;Bueno, aquí un primer ejemplo de cómo leer y mostrar una imagen desde un archivo. Tenemos una imagen llamada "lenna.png" en el mismo directorio de nuestro código, luego, podemos utilizar el módulo &lt;code style="white-space: pre;"&gt;io&lt;/code&gt;de &lt;code style="white-space: pre;"&gt;scikit-image&lt;/code&gt; para leer y mostrar esta imagen. Básicamente se procede como sigue:&lt;/div&gt;&lt;br&gt;Primero importamos el modulo correspondiente:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;from&lt;/span&gt; skimage &lt;span class="im"&gt;import&lt;/span&gt; io&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Ahora utilizamos la función &lt;code style="white-space: pre;"&gt;imread&lt;/code&gt; del módulo &lt;code style="white-space: pre;"&gt;io&lt;/code&gt; para leer la imagen, y guardamos esto en una variable, en la cual se almacenará un array de NumPy con la información de los colores que componen la imagen.&lt;/div&gt;&lt;br&gt;&lt;code style="white-space: pre;"&gt;img = io.imread('lenna.png')&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Enseguida utilizamos la función &lt;code style="white-space: pre;"&gt;imshow&lt;/code&gt; para mostrar la imagen que pasemos como argumento y la función &lt;code style="white-space: pre;"&gt;show&lt;/code&gt; para mostrar toda la ventana o &lt;code style="white-space: pre;"&gt;figure&lt;/code&gt; que contiene la(s) imágenes a desplegar en la pantalla.&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;io.imshow(img)&lt;br&gt;io.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Juntando este mini código nos quedaría algo como lo siguiente:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;from&lt;/span&gt; skimage &lt;span class="im"&gt;import&lt;/span&gt; io&lt;br&gt;&lt;br&gt;img &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; io.imread(&lt;span class="st" style="color: #4070a0;"&gt;"lenna.png"&lt;/span&gt;)&lt;br&gt;io.imshow(img)&lt;br&gt;io.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Si ejecutamos lo anterior nos mostrará la imagen leída en una ventana o &lt;code style="white-space: pre;"&gt;figure&lt;/code&gt; de Matplotlib, tal como se aprecia en la siguiente imagen:&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-vD0rh5vdTFE/VqrkeT3ulNI/AAAAAAAABt4/XIukKAVpSYM/s1600/img_01.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="268" src="https://4.bp.blogspot.com/-vD0rh5vdTFE/VqrkeT3ulNI/AAAAAAAABt4/XIukKAVpSYM/s320/img_01.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Podemos &lt;em&gt;averiguar&lt;/em&gt; la forma o cantidad de elementos del array &lt;code style="white-space: pre;"&gt;img&lt;/code&gt; utilizando el método &lt;code style="white-space: pre;"&gt;shape&lt;/code&gt;, por ejemplo en el script anterior se puede añadir:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="bu"&gt;print&lt;/span&gt; img.shape&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Y con ello nos mostrará en consola una tupla de 3 elementos (para el caso de esta imagen) con la información del número de filas, columnas y &lt;em&gt;capas&lt;/em&gt; de la matriz. En nuestro ejemplo nos muestra:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;(512L, 512L, 3L)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Lo cual implica que tenemos una imagen de 512x512 pixeles. El tercer número indica que tenemos tres capas o &lt;em&gt;canales&lt;/em&gt; del módelo de color RGB, en el cual la primer capa representa el rojo, la segunda el verde y la tercera el azul. Así, toda la gama de colores para un pixel en específico se puede obtener mediante la combinación de estos tres colores primarios.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;h2 id="un-poco-de-gris..."&gt;Un poco de gris...&lt;/h2&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;Ahora, ya sabemos leer y mostrar imágenes. Vamos a operar un poco y a convertir nuestra matriz RGB de entrada en una matriz de intensidades en escala de grises, o en pocas palabras vamos a transformar una matriz de color en una en tono de grises. Para ello vamos a importar el módulo &lt;code style="white-space: pre;"&gt;color&lt;/code&gt; y a utilizar la función &lt;code style="white-space: pre;"&gt;rgb2gray&lt;/code&gt;:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;from&lt;/span&gt; skimage &lt;span class="im"&gt;import&lt;/span&gt; io,color&lt;br&gt;&lt;br&gt;img &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; io.imread(&lt;span class="st" style="color: #4070a0;"&gt;"lenna.png"&lt;/span&gt;)&lt;br&gt;img_gris &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; color.rgb2gray(img)&lt;br&gt;io.imshow(img_gris)&lt;br&gt;io.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-cpnYBa8KrD4/VqrkUmxJiII/AAAAAAAABtw/5_KMtcD6rb0/s1600/img_02.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="268" src="https://2.bp.blogspot.com/-cpnYBa8KrD4/VqrkUmxJiII/AAAAAAAABtw/5_KMtcD6rb0/s320/img_02.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;¿Y qué pasa si queremos mostrar ambas imágenes en una misma ventana?, bueno, para ello podemos hacer uso de la función &lt;code style="white-space: pre;"&gt;subplot&lt;/code&gt; de Matplotlib:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt&lt;br&gt;&lt;span class="im"&gt;from&lt;/span&gt; skimage &lt;span class="im"&gt;import&lt;/span&gt; io,color&lt;br&gt;&lt;br&gt;img &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; io.imread(&lt;span class="st" style="color: #4070a0;"&gt;"lenna.png"&lt;/span&gt;)&lt;br&gt;img_gris &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; color.rgb2gray(img)&lt;br&gt;plt.subplot(&lt;span class="dv" style="color: #40a070;"&gt;211&lt;/span&gt;)&lt;br&gt;io.imshow(img)&lt;br&gt;plt.subplot(&lt;span class="dv" style="color: #40a070;"&gt;212&lt;/span&gt;)&lt;br&gt;io.imshow(img_gris)&lt;br&gt;io.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-i_MssU0Z33c/VqrkRjic1tI/AAAAAAAABto/z0fBVZR3Uis/s1600/img_03.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="268" src="https://2.bp.blogspot.com/-i_MssU0Z33c/VqrkRjic1tI/AAAAAAAABto/z0fBVZR3Uis/s320/img_03.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Hasta aquí esta breve introducción a scikit-image, una librería que sin duda vale la pena revisar y que proporciona una cantidad razonable de algoritmos que pueden ser muy útiles en el procesamiento digital de imágenes. Posteriormente se hablará de algunos tópicos básicos adicionales, como la binarización, segmentación, y otras operaciones típicas.&lt;/div&gt;</description><category>mathjax</category><category>Matplotlib</category><category>PDI</category><category>scikit-image</category><guid>https://numython.github.io/posts/2016/01/introduccion-scikit-image-procesamiento/</guid><pubDate>Fri, 29 Jan 2016 10:06:00 GMT</pubDate></item><item><title>Gráficas en coordenadas polares en Matplotlib</title><link>https://numython.github.io/posts/2016/01/graficas-en-coordenadas-polares-en/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;Trazar gráficas en coordenadas polares mediante el módulo &lt;code style="white-space: pre;"&gt;pyplot&lt;/code&gt; es muy sencillo, y se procede de manera similar que con las funciones en coordenadas rectangulares. Lo único que debemos cambiar es el tipo de proyección de el axes en el que vamos a &lt;em&gt;plotear&lt;/em&gt; nuestras funciones polares.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Por ejemplo si queremos graficar una espiral de Arquímedes:&lt;/div&gt;&lt;br&gt;&lt;span class="math display"&gt;&lt;em&gt;r&lt;/em&gt;(&lt;em&gt;θ&lt;/em&gt;)=&lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt;&lt;em&gt;θ&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="math display"&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/span&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt&lt;br&gt;&lt;br&gt;theta &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.linspace(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;np.pi)&lt;br&gt;r &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;50&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;theta&lt;br&gt;&lt;br&gt;fig &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; plt.figure()&lt;br&gt;ax &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.add_subplot(&lt;span class="dv" style="color: #40a070;"&gt;111&lt;/span&gt;, projection&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"polar"&lt;/span&gt;)&lt;br&gt;ax.plot(theta,r)&lt;br&gt;&lt;br&gt;plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-Z4ivUK71UpY/VqrQg6olPtI/AAAAAAAABtU/t-8U4xEa68U/s1600/espiral.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="http://1.bp.blogspot.com/-Z4ivUK71UpY/VqrQg6olPtI/AAAAAAAABtU/t-8U4xEa68U/s320/espiral.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;O una rosa polar:&lt;br&gt;&lt;br&gt;&lt;span class="math display"&gt;&lt;em&gt;r&lt;/em&gt;(&lt;em&gt;θ&lt;/em&gt;)=&lt;em&gt;a&lt;/em&gt;cos(&lt;em&gt;k&lt;/em&gt;&lt;em&gt;θ&lt;/em&gt; + &lt;em&gt;ϕ&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="math display"&gt;&lt;br&gt;&lt;/span&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt&lt;br&gt;&lt;br&gt;theta &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.linspace(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;np.pi,&lt;span class="dv" style="color: #40a070;"&gt;1000&lt;/span&gt;)&lt;br&gt;r &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;np.cos(&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;theta)&lt;br&gt;&lt;br&gt;fig &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; plt.figure()&lt;br&gt;ax &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; fig.add_subplot(&lt;span class="dv" style="color: #40a070;"&gt;111&lt;/span&gt;, projection&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"polar"&lt;/span&gt;)&lt;br&gt;ax.plot(theta,r,color&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"#ffb6c1"&lt;/span&gt;,linewidth&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;)&lt;br&gt;&lt;br&gt;plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-xEiTreU_Lg8/VqrQg7qB2qI/AAAAAAAABtY/IosbTsmbEpU/s1600/rosa_polar.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="http://2.bp.blogspot.com/-xEiTreU_Lg8/VqrQg7qB2qI/AAAAAAAABtY/IosbTsmbEpU/s320/rosa_polar.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Note que se pueden pasar argumentos de estilo y color a la función &lt;code style="white-space: pre;"&gt;plot&lt;/code&gt; tal y como se hace con las gráficas en coordenadas rectangulares.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Como se observa en los ejemplos anteriores lo único que debemos hacer es adicionar el &lt;em&gt;keyword argument&lt;/em&gt; &lt;code style="white-space: pre;"&gt;projection='polar'&lt;/code&gt; al momento de crear el axes en el cual graficaremos nuestra función en coordenadas polares.&lt;/div&gt;</description><category>Gráficas</category><category>mathjax</category><category>Matplotlib</category><guid>https://numython.github.io/posts/2016/01/graficas-en-coordenadas-polares-en/</guid><pubDate>Fri, 29 Jan 2016 08:40:00 GMT</pubDate></item><item><title>Una introducción a Pylab</title><link>https://numython.github.io/posts/2016/01/una-introduccion-pylab/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;p&gt;Pylab es un módulo de Matplotlib que, básicamente, integra en un mismo espacio de nombres utilidades gráficas del módulo pyplot y las numéricas de NumPy, resultando un entorno que se asemeja a MATLAB en el manejo de matrices/vectores y el trazo de gráficas.&lt;br&gt;&lt;br&gt;Para importar todas las funciones de pylab podemos hacerlo como sigue:&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;from&lt;/span&gt; pylab &lt;span class="im"&gt;import&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Con esto tendremos disponible todas las funciones y/o constantes en el espacio de trabajo actual.&lt;br&gt;&lt;h2 id="matrices-y-vectores"&gt;Matrices y vectores&lt;/h2&gt;Algo básico que podemos hacer con Pylab es crear con vectores y matrices de una forma rápida:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; v&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;array([&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;]) &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;#Definiendo un vector&lt;/span&gt;&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; v&lt;br&gt;array([&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;])&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;array([[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;],[&lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;],[&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;]]) &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Definiendo una matriz&lt;/span&gt;&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A&lt;br&gt;array([[ &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;],&lt;br&gt;       [ &lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;],&lt;br&gt;       [&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;]])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;Realizar operaciones matriciales básicas:&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; B&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;array([[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;],[&lt;span class="dv" style="color: #40a070;"&gt;7&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;9&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;],[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;]])&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Suma de matrices&lt;/span&gt;&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A&lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt;B&lt;br&gt;array([[ &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;4&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;],&lt;br&gt;       [&lt;span class="dv" style="color: #40a070;"&gt;15&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;7&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;12&lt;/span&gt;],&lt;br&gt;       [&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;4&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;6&lt;/span&gt;]])&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Resta de matrices&lt;/span&gt;&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;B&lt;br&gt;array([[ &lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;6&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;],&lt;br&gt;       [ &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;11&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;],&lt;br&gt;       [&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;6&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;]])&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Multiplicación matricial&lt;/span&gt;&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; dot(A,B)&lt;br&gt;array([[&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;11&lt;/span&gt;,   &lt;span class="dv" style="color: #40a070;"&gt;9&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;17&lt;/span&gt;],&lt;br&gt;       [ &lt;span class="dv" style="color: #40a070;"&gt;32&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;32&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;34&lt;/span&gt;],&lt;br&gt;       [ &lt;span class="dv" style="color: #40a070;"&gt;12&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;40&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;13&lt;/span&gt;]])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Note que la multiplicación matricial se debe realizar con la función &lt;code style="white-space: pre;"&gt;dot&lt;/code&gt;, si se efectúa la multiplicación con el operador &lt;code style="white-space: pre;"&gt;*&lt;/code&gt;, este dará el resultado de una multiplicación elemento por elemento.&lt;/div&gt;&lt;br&gt;También se pueden utilizar algunas funciones típicas de un paquete de álgebra lineal para operar sobre matrices:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; det(A) &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Determinante de A&lt;/span&gt;&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="fl" style="color: #40a070;"&gt;69.999999999999957&lt;/span&gt;&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; inv(A) &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Matriz inversa de A&lt;/span&gt;&lt;br&gt;array([[  &lt;span class="fl" style="color: #40a070;"&gt;2.00000000e-01&lt;/span&gt;,   &lt;span class="fl" style="color: #40a070;"&gt;1.00000000e-01&lt;/span&gt;,   &lt;span class="fl" style="color: #40a070;"&gt;2.77555756e-17&lt;/span&gt;],&lt;br&gt;       [  &lt;span class="fl" style="color: #40a070;"&gt;1.05714286e+00&lt;/span&gt;,   &lt;span class="fl" style="color: #40a070;"&gt;3.14285714e-01&lt;/span&gt;,   &lt;span class="fl" style="color: #40a070;"&gt;7.14285714e-01&lt;/span&gt;],&lt;br&gt;       [ &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="fl" style="color: #40a070;"&gt;3.71428571e-01&lt;/span&gt;,  &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="fl" style="color: #40a070;"&gt;4.28571429e-02&lt;/span&gt;,  &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="fl" style="color: #40a070;"&gt;1.42857143e-01&lt;/span&gt;]])&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; transpose(A) &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Transpuesta de A&lt;/span&gt;&lt;br&gt;array([[ &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;],&lt;br&gt;       [&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;],&lt;br&gt;       [&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;]])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="gráficas"&gt;Gráficas&lt;/h2&gt;Otra utilidad de pylab son las gráficas, es tan sencillo como utilizar la función &lt;code style="white-space: pre;"&gt;plot&lt;/code&gt;:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plot([&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;])&lt;br&gt;show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-NDzbeobvPpc/VqabJkxzgVI/AAAAAAAABsM/qvRtaiVgD4k/s1600/img_01.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="300" src="https://3.bp.blogspot.com/-NDzbeobvPpc/VqabJkxzgVI/AAAAAAAABsM/qvRtaiVgD4k/s400/img_01.png" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;Si se requiere algo más elaborado:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;x &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; linspace(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;)&lt;br&gt;y &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; exp(&lt;span class="fl" style="color: #40a070;"&gt;0.1&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;x)&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;cos(x)&lt;br&gt;&lt;br&gt;plot(x,y,&lt;span class="st" style="color: #4070a0;"&gt;'k'&lt;/span&gt;)&lt;br&gt;xlabel(&lt;span class="st" style="color: #4070a0;"&gt;"Tiempo (s)"&lt;/span&gt;)&lt;br&gt;ylabel(&lt;span class="st" style="color: #4070a0;"&gt;"Amplitud (mm)"&lt;/span&gt;)&lt;br&gt;title(&lt;span class="st" style="color: #4070a0;"&gt;u"Gráfica 01"&lt;/span&gt;)&lt;br&gt;grid(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-fb_JwwRq2lg/VqabJrY5eWI/AAAAAAAABsQ/lSzlEsGbzN0/s1600/img_02.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="300" src="https://1.bp.blogspot.com/-fb_JwwRq2lg/VqabJrY5eWI/AAAAAAAABsQ/lSzlEsGbzN0/s400/img_02.png" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;O múltiples gráficas:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;x &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; linspace(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;)&lt;br&gt;y1 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; exp(&lt;span class="fl" style="color: #40a070;"&gt;0.1&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;x)&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;cos(x)&lt;br&gt;y2 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; exp(&lt;span class="fl" style="color: #40a070;"&gt;0.5&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;x)&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;sin(x)&lt;br&gt;&lt;br&gt;subplot(&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;br&gt;plot(x,y1,&lt;span class="st" style="color: #4070a0;"&gt;'r'&lt;/span&gt;)&lt;br&gt;ylabel(&lt;span class="st" style="color: #4070a0;"&gt;"Amplitud (mm)"&lt;/span&gt;)&lt;br&gt;grid(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;&lt;br&gt;subplot(&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;)&lt;br&gt;plot(x,y2,&lt;span class="st" style="color: #4070a0;"&gt;'b'&lt;/span&gt;)&lt;br&gt;xlabel(&lt;span class="st" style="color: #4070a0;"&gt;"Tiempo (s)"&lt;/span&gt;)&lt;br&gt;ylabel(&lt;span class="st" style="color: #4070a0;"&gt;"Amplitud (mm)"&lt;/span&gt;)&lt;br&gt;grid(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-q9a1e8lJMJM/Vqae9KNX6TI/AAAAAAAABsw/_4DjbfMXJhg/s1600/img_03.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="300" src="https://2.bp.blogspot.com/-q9a1e8lJMJM/Vqae9KNX6TI/AAAAAAAABsw/_4DjbfMXJhg/s400/img_03.png" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;</description><category>mathjax</category><category>Matplotlib</category><category>Pylab</category><guid>https://numython.github.io/posts/2016/01/una-introduccion-pylab/</guid><pubDate>Tue, 26 Jan 2016 03:42:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Numython (Publicaciones sobre numpy)</title><link>https://numython.github.io/</link><description></description><atom:link href="https://numython.github.io/categories/numpy.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><lastBuildDate>Tue, 11 Sep 2018 22:30:38 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Análisis estructural con Python I. Una introducción</title><link>https://numython.github.io/posts/analisis-estructural-con-python-i/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;El análisis estructural es uno de los aspectos elementales para aquellos 
que nos dedicamos al diseño mecánico o cuestiones similares. En los cursos 
universitarios de resistencia de materiales se enseñan algunos métodos 
analíticos que permiten obtener soluciones rápidas para componentes mecánicos 
simples. No obstante, cuando las geometrías se complican se hace necesario 
utilizar el enfoque numérico e implementar una metodología de solución utilizando 
el método de los elementos finitos, el cual proporciona una solución aproximada 
que será adecuada en medida de ciertos criterios, tales como el tamaño y tipo de 
elementos, la física del problema, entre otros.&lt;/p&gt;
&lt;p&gt;El propósito del presente minicurso es introducir al lector en el uso de las 
herramientas numéricas que proporciona Python para la solución de problemas de 
análisis estructural utilizando el método de los elementos finitos.&lt;/p&gt;
&lt;p&gt;El método de los elementos finitos consiste 
en la discretización de un continuo en pequeños elementos, con la finalidad de 
establecer un sistema de ecuaciones que describa de manera aproximada el comportamiento 
individual y global del sistema, pasando por la inclusión de las condiciones de frontera y todas 
las consideraciones físicas que deriven en la simplificación del problema.&lt;/p&gt;
&lt;p&gt;En análisis numérico estructural el método de los desplazamientos o de la rigidez, asume 
que los desplazamientos nodales son las variables desconocidas y comúnmente se debe resolver 
una ecuación algebraica del tipo:&lt;/p&gt;
$$ K U = F $$&lt;p&gt;Donde $F$ es el vector de fuerzas nodales, $K$ la matriz global de rigidez y $U$ el vector 
de desplazamientos nodales.&lt;/p&gt;
&lt;p&gt;Dado que normalmente los desplazamientos son las incógnitas, se tiene que:&lt;/p&gt;
$$ U = K^{-1} F $$&lt;p&gt;En el caso de un análisis estático lineal esta ecuación se resuelve como se muestra: calculando la inversa de la matriz rigidez y multiplicando por el vector de fuerzas nodales, para el caso de un análisis no lineal se utilizan métodos iterativos.&lt;/p&gt;
&lt;p&gt;La matriz global $K$ se obtiene de ensamblar todas las matrices de rigidez por elemento acorde a la numeración o posición de 
sus nodos.&lt;/p&gt;
&lt;h3 id="Un-caso-muy-simple:-elementos-resorte"&gt;Un caso muy simple: elementos resorte&lt;a class="anchor-link" href="https://numython.github.io/posts/analisis-estructural-con-python-i/#Un-caso-muy-simple:-elementos-resorte"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;El elemento resorte es el elemento finito más simple, tiene un grado de libertad (por cada nodo): traslación en dirección axial.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://numython.github.io/structural-analysis/spring_element.PNG" alt=""&gt;&lt;/p&gt;
&lt;p&gt;La matriz de rigidez para un elemento resorte viene dada por:&lt;/p&gt;
$$ k^{(e)} = 
\begin{bmatrix}
k_e &amp;amp; - k_e \\
- k_e &amp;amp; k_e \\
\end{bmatrix} $$&lt;p&gt;La obtención de la matriz de rigidez puede consultarla en la mayoría de los libros introductorios de elementos finitos, por ejemplo en [1]. En lo anterior $k_e$ es la rigidez característica del resorte.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Para ejemplificar cómo funciona el método de los elementos finitos en elementos de este tipo vamos a resolver el siguiente ejemplo.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://numython.github.io/structural-analysis/spring_01.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;Primero, las matrices de rigidez por elemento vienen dadas por:&lt;/p&gt;
$$ 
k^{(1)} = 
\begin{bmatrix}
1000 &amp;amp; -1000 \\
-1000 &amp;amp; 1000 \\
\end{bmatrix} 
\,\,\,\,\,\,\,\, ;
k^{(2)} = 
\begin{bmatrix}
2000 &amp;amp; -2000 \\
-2000 &amp;amp; 2000 \\
\end{bmatrix}
\,\,\,\,\,\,\,\, ;
k^{(3)} = 
\begin{bmatrix}
3000 &amp;amp; -3000 \\
-3000 &amp;amp; 3000 \\
\end{bmatrix} 
$$&lt;p&gt;La matriz global se obtiene ensamblando las matrices elementales utilizando el principio de superposición, es decir, asumiendo que los efectos individuales de cada elemento a la matriz global pueden adicionarse de manera independiente. Para esto se debe expandir la matriz de rigidez elemental y &lt;em&gt;rellenar&lt;/em&gt; sólo las posiciones correspondientes a los nodos que componen el elemento.&lt;/p&gt;
&lt;p&gt;Por ejemplo, el elemento 1 está conformado por los nodos 1 y 3, entonces:&lt;/p&gt;
$$
K^{(1)} = 
\begin{bmatrix}
1000 &amp;amp; 0 &amp;amp; -1000 &amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\
-1000 &amp;amp; 0 &amp;amp; 1000 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\
\end{bmatrix} 
$$&lt;p&gt;Mismo caso para los otros elementos:&lt;/p&gt;
$$
K^{(2)} = 
\begin{bmatrix}
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 2000 &amp;amp; -2000 \\
0 &amp;amp; 0 &amp;amp; -2000 &amp;amp; 2000 \\
\end{bmatrix} 
$$$$
K^{(3)} = 
\begin{bmatrix}
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\
0 &amp;amp; 3000 &amp;amp; 0 &amp;amp; -3000 \\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\
0 &amp;amp; -3000 &amp;amp; 0 &amp;amp; 3000 \\
\end{bmatrix} 
$$&lt;p&gt;Luego, la matriz global de rigidez se obtiene sumando las matrices elementales expandidas:&lt;/p&gt;
$$
K = 
\begin{bmatrix}
1000 &amp;amp; 0 &amp;amp; -1000 &amp;amp; 0 \\
0 &amp;amp; 3000 &amp;amp; 0 &amp;amp; -3000 \\
-1000 &amp;amp; 0 &amp;amp; 3000 &amp;amp; -2000 \\
0 &amp;amp; -3000 &amp;amp; -2000 &amp;amp; 5000 \\
\end{bmatrix} 
$$&lt;p&gt;Quedando el sistema de ecuaciones como:&lt;/p&gt;
$$\begin{bmatrix}
1000 &amp;amp; 0 &amp;amp; -1000 &amp;amp; 0 \\
0 &amp;amp; 3000 &amp;amp; 0 &amp;amp; -3000 \\
-1000 &amp;amp; 0 &amp;amp; 3000 &amp;amp; -2000 \\
0 &amp;amp; -3000 &amp;amp; -2000 &amp;amp; 5000
\end{bmatrix} 
\begin{bmatrix}
u_1 \\ u_2 \\ u_3 \\ u_4
\end{bmatrix} =
\begin{bmatrix}
0 \\ 0 \\ 0 \\ 5000
\end{bmatrix} $$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy.linalg&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;la&lt;/span&gt;

&lt;span class="c1"&gt;# Datos iniciales&lt;/span&gt;
&lt;span class="n"&gt;k1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1000.0&lt;/span&gt;
&lt;span class="n"&gt;k2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2000.0&lt;/span&gt;
&lt;span class="n"&gt;k3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3000.0&lt;/span&gt;
&lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5000.0&lt;/span&gt;

&lt;span class="c1"&gt;# Matrices por elemento&lt;/span&gt;
&lt;span class="n"&gt;K1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;k1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k1&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="n"&gt;K2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;k2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k2&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k2&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="n"&gt;K3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;k3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k3&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k3&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;

&lt;span class="c1"&gt;# Matriz global &lt;/span&gt;
&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;  &lt;span class="n"&gt;K1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="n"&gt;K1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;                &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;K3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;                 &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="n"&gt;K3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;K1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="n"&gt;K1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;K2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;          &lt;span class="n"&gt;K2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt;       &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;K3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;           &lt;span class="n"&gt;K2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="n"&gt;K2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;K3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]])&lt;/span&gt;

&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Condiciones de frontera&lt;/span&gt;
&lt;span class="c1"&gt;# Nodos 1 y 2 conocidos -&amp;gt; UX = 0&lt;/span&gt;
&lt;span class="n"&gt;KS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="n"&gt;FS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

&lt;span class="c1"&gt;# Resolviendo&lt;/span&gt;
&lt;span class="n"&gt;USOL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;la&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Vector de desplazamientos&lt;/span&gt;
&lt;span class="n"&gt;USOL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;USOL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Obteniendo las fuerzas nodales&lt;/span&gt;
&lt;span class="n"&gt;NF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;USOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Presentando los resultados&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nodo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%g&lt;/span&gt;&lt;span class="s2"&gt;  UX = &lt;/span&gt;&lt;span class="si"&gt;%-8.4f&lt;/span&gt;&lt;span class="s2"&gt;    FX = &lt;/span&gt;&lt;span class="si"&gt;%-8.4f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodo&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;USOL&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nodo&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;NF&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nodo&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;1  UX = 0.0000      FX = -909.0909
2  UX = 0.0000      FX = -4090.9091
3  UX = 0.9091      FX = 0.0000  
4  UX = 1.3636      FX = 5000.0000
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Utilizando-NuSA:-una-librería-para-análisis-estructural"&gt;Utilizando &lt;a href="https://github.com/JorgeDeLosSantos/nusa"&gt;NuSA&lt;/a&gt;: una librería para análisis estructural&lt;a class="anchor-link" href="https://numython.github.io/posts/analisis-estructural-con-python-i/#Utilizando-NuSA:-una-librer%C3%ADa-para-an%C3%A1lisis-estructural"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;NuSA&lt;/strong&gt; es una librería Python para el análisis estructural, que facilita el planteamiento y la solución de este tipo de análisis mediante una colección de clases que reciben como dato de entrada las características elementales de un modelo: coordenadas modales, propiedades del material, condiciones de frontera, etc., y retorna valores de salida básicos como desplazamientos y fuerzas.&lt;/p&gt;
&lt;p&gt;Para testear las capacidades de &lt;strong&gt;NuSA&lt;/strong&gt; vamos a resolver el ejemplo del elemento resorte. Lo primero es importar las clases que usaremos: &lt;code&gt;Node&lt;/code&gt;, &lt;code&gt;Spring&lt;/code&gt; y &lt;code&gt;SpringModel&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nusa.core&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nusa.element&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Spring&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nusa.model&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SpringModel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Luego creamos un modelo de tipo Spring utilizando la clase SpringModel:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;m1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SpringModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Modelo 01"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;Model: Modelo 01
Nodes: 0
Elements: 0
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Ahora creamos los nodos que conformarán el elemento resorte:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;(&amp;lt;nusa.core.Node object at 0x0325F550&amp;gt;, &amp;lt;nusa.core.Node object at 0x0325F530&amp;gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;En este caso no es necesario especificar las coordenadas nodales dado que un elemento resorte sólo necesita la rigidez para la formulación, así que se pueden dejar ambos nodos con coordenadas (0,0).&lt;/p&gt;
&lt;p&gt;Enseguida se define un elemento de tipo &lt;code&gt;SpringElement&lt;/code&gt;, cuyos datos de entrada son una tupla con los nodos que le conforman y la rigidez del elemento.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;e1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Spring&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;&amp;lt;class 'nusa.element.Spring'&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addConstraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ux&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addForce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;

&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[6]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;5.0&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Referencias"&gt;Referencias&lt;a class="anchor-link" href="https://numython.github.io/posts/analisis-estructural-con-python-i/#Referencias"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;[1] Logan, D. L. (1986). A first course in the finite element method. Boston: PWS Engineering.&lt;/li&gt;
&lt;li&gt;[2] Zienkiewicz, O. C., Taylor, R. L., Zhu, J. Z., Zienkiewicz, O. C., &amp;amp; Zienkiewicz, O. C. (2005). The finite element method: Its basis and fundamentals. Oxford: Elsevier Butterworth-Heinemann.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>fea</category><category>mathjax</category><category>numpy</category><category>structural analysis</category><guid>https://numython.github.io/posts/analisis-estructural-con-python-i/</guid><pubDate>Sat, 12 Nov 2016 01:31:20 GMT</pubDate></item><item><title>Funciones definidas a trozos (piecewise) con NumPy</title><link>https://numython.github.io/posts/2016/02/funciones-definidas-trozos-piecewise/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;Una función definida a trozos es una función real \(f\) de una variable real \(x\), cuya definición está dada por varios conjuntos disjuntos de su dominio. &lt;sup&gt;[1]&lt;/sup&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;El ejemplo clásico de una función definida por secciones es la función valor absoluto \(abs(x)\), habitualmente definida por:&lt;/div&gt;&lt;br&gt;&lt;span class="math display"&gt;$$ f(x)= |x| = \left\{ \begin{matrix} -x &amp;amp; si \,\, x &amp;lt; 0 \\ x &amp;amp; si \,\, x \geq 0 \\ \end{matrix}\right. $$&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;De manera ordinaria, en NumPy, para definir una función en un intervalo tendríamos que crear un vector de \(n\) cantidad de puntos en ese intervalo, y posteriormente crear la expresión que define la función, por ejemplo, definiendo a \(f(x)=x\,\,cos(x)\)&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;np.linspace(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;)&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; y&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;x&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;np.cos(x)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Ahora, dada la naturaleza de las funciones por tramos, estás no pueden definirse como en las líneas anteriores, puesto que la expresión que las define depende del intervalo. Una opción para crear una función a trozos sería definiendo un intervalo para cada expresión y posteriormente concatenar todo en un mismo arreglo, tanto para los intervalos como las expresiones.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Por ejemplo, definiendo la función valor absoluto en el intervalo \((-10,10)\):&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;br&gt;x1 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.linspace(&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;)&lt;br&gt;x2 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.linspace(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;)&lt;br&gt;y1 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;x1&lt;br&gt;y2 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; x2&lt;br&gt;x &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.concatenate((x1,x2))&lt;br&gt;y &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.concatenate((y1,y2))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Si, lo anterior puede parecer un poco &lt;em&gt;tedioso&lt;/em&gt;, así que NumPy también dispone de una función que nos ahorra el estar escribiendo mucho código: &lt;code style="white-space: pre;"&gt;piecewise&lt;/code&gt;, la cual nos permite crear un arreglo a partir de otro (intervalo), seccionando este acorde a las expresiones/funciones pasadas como argumentos y a las condiciones lógicas para definir los subintervalos. En términos simples la sintaxis de &lt;code style="white-space: pre;"&gt;piecewise&lt;/code&gt; es:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;np.piecewise(x, logls, funls)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Donde &lt;code style="white-space: pre;"&gt;x&lt;/code&gt; es un arreglo que define la variable independiente, &lt;code style="white-space: pre;"&gt;logls&lt;/code&gt; una lista de condiciones lógicas para seccionar y definir los subintervalos, y &lt;code style="white-space: pre;"&gt;funls&lt;/code&gt; una lista de funciones o constantes que definen el valor de la función para el subintervalo correspondiente.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Siguiendo con nuestro ejemplo de la función valor absoluto, haríamos algo como lo siguiente:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;br&gt;x &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.linspace(&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;)&lt;br&gt;y &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.piecewise(x, [x&lt;span class="op" style="color: #666666;"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;, x&lt;span class="op" style="color: #666666;"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;], [&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;lambda&lt;/span&gt; x: &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;x, &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;lambda&lt;/span&gt; x: x])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Desde luego también se pueden usar funciones ordinarias en lugar de lambdas.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Para hacer esto un poco más &lt;em&gt;ilustrativo&lt;/em&gt; vamos a utilizar Matplotlib para trazar la gráfica correspondiente:&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;br&gt;&lt;span class="im"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="im"&gt;as&lt;/span&gt; plt &lt;br&gt;&lt;br&gt;x &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.linspace(&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;)&lt;br&gt;y &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; np.piecewise(x, [x&lt;span class="op" style="color: #666666;"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;, x&lt;span class="op" style="color: #666666;"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;], [&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;lambda&lt;/span&gt; x: &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;x, &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;lambda&lt;/span&gt; x: x])&lt;br&gt;&lt;br&gt;plt.plot(x, y)&lt;br&gt;&lt;br&gt;plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;a href="file:///C:/Users/User/Desktop/LABPro/_blogs_/Python%20para%20Ingenieros/Posts/Funciones%20definidas%20a%20trozos%20(piecewise)%20con%20Numpy/img/img_01.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-Wrz9la4Vedg/VtS0t9Vt9AI/AAAAAAAAByE/abcTdoAzXEU/s1600/img_01.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="300" src="https://2.bp.blogspot.com/-Wrz9la4Vedg/VtS0t9Vt9AI/AAAAAAAAByE/abcTdoAzXEU/s400/img_01.png" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;strong&gt;Referencias:&lt;/strong&gt;&lt;br&gt;[1]. &lt;a href="https://es.wikipedia.org/wiki/Funci%C3%B3n_definida_a_trozos"&gt;https://es.wikipedia.org/wiki/Funci%C3%B3n_definida_a_trozos&lt;/a&gt;</description><category>mathjax</category><category>numpy</category><guid>https://numython.github.io/posts/2016/02/funciones-definidas-trozos-piecewise/</guid><pubDate>Tue, 01 Mar 2016 03:15:00 GMT</pubDate></item><item><title>Graficar en Python con Matplotlib y NumPy</title><link>https://numython.github.io/posts/2016/02/graficar-en-python-con-matplotlib-y/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;Trazar gráficas en Python es muy sencillo, para ello necesita tener instaladas las librerías matplotlib y numpy, las cuales pueden encontrarse y descargar de la red sin mayores obstáculos. Debe asegurarse que la versión de las librerías sea compatible con la versión de Python.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Si alguna vez ha utilizado MATLAB para estos mismos fines, las instrucciones le parecerán demasiado familiar.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Enseguida os adjunto un código sencillo y el resultado que produce:&lt;/div&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;import matplotlib.pyplot as plt&lt;br&gt;import numpy as np&lt;br&gt;&lt;br&gt;x = np.arange(0,10,0.1)&lt;br&gt;y = x*np.cos(x)&lt;br&gt;&lt;br&gt;plt.plot(x,y)&lt;br&gt;plt.xlabel('x')&lt;br&gt;plt.ylabel('y')&lt;br&gt;plt.title('Lab DLS')&lt;br&gt;plt.show()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-F1Qzh-W-7Gw/UxvtzNBs2VI/AAAAAAAABEk/wYX758jaymM/s1600/graph1.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="271" src="https://2.bp.blogspot.com/-F1Qzh-W-7Gw/UxvtzNBs2VI/AAAAAAAABEk/wYX758jaymM/s1600/graph1.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Las primeras dos líneas sirven para importar las librerías que se utilizarán. Recuerde que en Python pueden utilizarse seudónimos al cargar una librería (en este caso plt para matplotlib.pyplot y np para numpy).&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;En la línea se 4 se define el vector de la variable independiente utilizando la instrucción arange de la librería numpy, el cual crea un vector especificando el valor inicial, el valor final y el incremento como argumentos. La linea 5 crea simplemente un vector dependiente del primero.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;La instrucción plot gráfica los vectores creados con anterioridad, teniendo como primer argumento el vector de la variable independiente. Con xlabel, ylabel y title se muestran las etiquetas correspondientes a los ejes horizontal, vertical y el título en la parte superior respectivamente. Finalmente, la instrucción show() sirve para mostrar la ventana gráfica creada y poder visualizar lo que se ha trazado.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;Modificando la presentación...&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;br&gt;&lt;i&gt;Grosor de línea&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Para modificar el grosor de línea basta con incluir como argumento adicional en plot la propiedad linewidth, tal como se muestra enseguida:&lt;/div&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;plt.plot(x,y,linewidth=4)&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;i&gt;Color de línea&lt;/i&gt;&lt;br&gt;&lt;br&gt;El siguiente ejemplo configura el color de la línea, en este caso rojo.&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;plt.plot(x,y,color='r')&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;También puede especificar el color utilizando una tupla de 3 elementos (R,G,B) en el intervalo [0 1], por ejemplo:&lt;/div&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;plt.plot(x,y,color=(0.8,0.9,0))&lt;/pre&gt;&lt;br&gt;&lt;i&gt;Agregando rejilla&lt;/i&gt;&lt;br&gt;&lt;br&gt;Para agregar una rejilla debe incluirse la instrucción grid() como se muestra:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;plt.grid()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;Mostrar más de una gráfica&lt;/span&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;Para mostrar más de una gráfica en la misma ventana, utilice hold(True) después de haber creado la primer gráfica o bien antes de ella, tal como se muestra en el código siguiente:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;import matplotlib.pyplot as plt&lt;br&gt;import numpy as np&lt;br&gt;&lt;br&gt;x = np.arange(0,10,0.2)&lt;br&gt;y1 = np.cos(x)&lt;br&gt;y2 = np.sin(x)&lt;br&gt;&lt;br&gt;plt.plot(x,y1,'o',linewidth=3,color=(0.2,0.1,0.4))&lt;br&gt;plt.hold(True)&lt;br&gt;plt.plot(x,y2,'-',linewidth=2,color='g')&lt;br&gt;plt.grid()&lt;br&gt;plt.axis('equal')&lt;br&gt;plt.xlabel('x')&lt;br&gt;plt.ylabel('y')&lt;br&gt;plt.title('Lab DLS')&lt;br&gt;plt.show()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-zLEWNeou8Ck/UxwGMYIi3wI/AAAAAAAABE0/m1tXOSZnuOM/s1600/graph2.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="270" src="https://3.bp.blogspot.com/-zLEWNeou8Ck/UxwGMYIi3wI/AAAAAAAABE0/m1tXOSZnuOM/s1600/graph2.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</description><category>mathjax</category><category>matplotlib</category><category>numpy</category><guid>https://numython.github.io/posts/2016/02/graficar-en-python-con-matplotlib-y/</guid><pubDate>Wed, 24 Feb 2016 22:52:00 GMT</pubDate></item><item><title>Una introducción a Pylab</title><link>https://numython.github.io/posts/2016/01/una-introduccion-pylab/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;p&gt;Pylab es un módulo de Matplotlib que, básicamente, integra en un mismo espacio de nombres utilidades gráficas del módulo pyplot y las numéricas de NumPy, resultando un entorno que se asemeja a MATLAB en el manejo de matrices/vectores y el trazo de gráficas.&lt;br&gt;&lt;br&gt;Para importar todas las funciones de pylab podemos hacerlo como sigue:&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;from&lt;/span&gt; pylab &lt;span class="im"&gt;import&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Con esto tendremos disponible todas las funciones y/o constantes en el espacio de trabajo actual.&lt;br&gt;&lt;h2 id="matrices-y-vectores"&gt;Matrices y vectores&lt;/h2&gt;Algo básico que podemos hacer con Pylab es crear con vectores y matrices de una forma rápida:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; v&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;array([&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;]) &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;#Definiendo un vector&lt;/span&gt;&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; v&lt;br&gt;array([&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;])&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;array([[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;],[&lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;],[&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;]]) &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Definiendo una matriz&lt;/span&gt;&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A&lt;br&gt;array([[ &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;],&lt;br&gt;       [ &lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;],&lt;br&gt;       [&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;]])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;Realizar operaciones matriciales básicas:&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; B&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;array([[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;],[&lt;span class="dv" style="color: #40a070;"&gt;7&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;9&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;],[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;]])&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Suma de matrices&lt;/span&gt;&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A&lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt;B&lt;br&gt;array([[ &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;4&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;],&lt;br&gt;       [&lt;span class="dv" style="color: #40a070;"&gt;15&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;7&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;12&lt;/span&gt;],&lt;br&gt;       [&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;4&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;6&lt;/span&gt;]])&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Resta de matrices&lt;/span&gt;&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;B&lt;br&gt;array([[ &lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;6&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;],&lt;br&gt;       [ &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;11&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;],&lt;br&gt;       [&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;6&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;]])&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Multiplicación matricial&lt;/span&gt;&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; dot(A,B)&lt;br&gt;array([[&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;11&lt;/span&gt;,   &lt;span class="dv" style="color: #40a070;"&gt;9&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;17&lt;/span&gt;],&lt;br&gt;       [ &lt;span class="dv" style="color: #40a070;"&gt;32&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;32&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;34&lt;/span&gt;],&lt;br&gt;       [ &lt;span class="dv" style="color: #40a070;"&gt;12&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;40&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;13&lt;/span&gt;]])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Note que la multiplicación matricial se debe realizar con la función &lt;code style="white-space: pre;"&gt;dot&lt;/code&gt;, si se efectúa la multiplicación con el operador &lt;code style="white-space: pre;"&gt;*&lt;/code&gt;, este dará el resultado de una multiplicación elemento por elemento.&lt;/div&gt;&lt;br&gt;También se pueden utilizar algunas funciones típicas de un paquete de álgebra lineal para operar sobre matrices:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; det(A) &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Determinante de A&lt;/span&gt;&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="fl" style="color: #40a070;"&gt;69.999999999999957&lt;/span&gt;&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; inv(A) &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Matriz inversa de A&lt;/span&gt;&lt;br&gt;array([[  &lt;span class="fl" style="color: #40a070;"&gt;2.00000000e-01&lt;/span&gt;,   &lt;span class="fl" style="color: #40a070;"&gt;1.00000000e-01&lt;/span&gt;,   &lt;span class="fl" style="color: #40a070;"&gt;2.77555756e-17&lt;/span&gt;],&lt;br&gt;       [  &lt;span class="fl" style="color: #40a070;"&gt;1.05714286e+00&lt;/span&gt;,   &lt;span class="fl" style="color: #40a070;"&gt;3.14285714e-01&lt;/span&gt;,   &lt;span class="fl" style="color: #40a070;"&gt;7.14285714e-01&lt;/span&gt;],&lt;br&gt;       [ &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="fl" style="color: #40a070;"&gt;3.71428571e-01&lt;/span&gt;,  &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="fl" style="color: #40a070;"&gt;4.28571429e-02&lt;/span&gt;,  &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="fl" style="color: #40a070;"&gt;1.42857143e-01&lt;/span&gt;]])&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; transpose(A) &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Transpuesta de A&lt;/span&gt;&lt;br&gt;array([[ &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;],&lt;br&gt;       [&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;],&lt;br&gt;       [&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;]])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="gráficas"&gt;Gráficas&lt;/h2&gt;Otra utilidad de pylab son las gráficas, es tan sencillo como utilizar la función &lt;code style="white-space: pre;"&gt;plot&lt;/code&gt;:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plot([&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;])&lt;br&gt;show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-NDzbeobvPpc/VqabJkxzgVI/AAAAAAAABsM/qvRtaiVgD4k/s1600/img_01.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="300" src="https://3.bp.blogspot.com/-NDzbeobvPpc/VqabJkxzgVI/AAAAAAAABsM/qvRtaiVgD4k/s400/img_01.png" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;Si se requiere algo más elaborado:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;x &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; linspace(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;)&lt;br&gt;y &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; exp(&lt;span class="fl" style="color: #40a070;"&gt;0.1&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;x)&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;cos(x)&lt;br&gt;&lt;br&gt;plot(x,y,&lt;span class="st" style="color: #4070a0;"&gt;'k'&lt;/span&gt;)&lt;br&gt;xlabel(&lt;span class="st" style="color: #4070a0;"&gt;"Tiempo (s)"&lt;/span&gt;)&lt;br&gt;ylabel(&lt;span class="st" style="color: #4070a0;"&gt;"Amplitud (mm)"&lt;/span&gt;)&lt;br&gt;title(&lt;span class="st" style="color: #4070a0;"&gt;u"Gráfica 01"&lt;/span&gt;)&lt;br&gt;grid(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-fb_JwwRq2lg/VqabJrY5eWI/AAAAAAAABsQ/lSzlEsGbzN0/s1600/img_02.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="300" src="https://1.bp.blogspot.com/-fb_JwwRq2lg/VqabJrY5eWI/AAAAAAAABsQ/lSzlEsGbzN0/s400/img_02.png" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;O múltiples gráficas:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;x &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; linspace(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;10&lt;/span&gt;)&lt;br&gt;y1 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; exp(&lt;span class="fl" style="color: #40a070;"&gt;0.1&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;x)&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;cos(x)&lt;br&gt;y2 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; exp(&lt;span class="fl" style="color: #40a070;"&gt;0.5&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;x)&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;sin(x)&lt;br&gt;&lt;br&gt;subplot(&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;br&gt;plot(x,y1,&lt;span class="st" style="color: #4070a0;"&gt;'r'&lt;/span&gt;)&lt;br&gt;ylabel(&lt;span class="st" style="color: #4070a0;"&gt;"Amplitud (mm)"&lt;/span&gt;)&lt;br&gt;grid(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;br&gt;&lt;br&gt;subplot(&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;)&lt;br&gt;plot(x,y2,&lt;span class="st" style="color: #4070a0;"&gt;'b'&lt;/span&gt;)&lt;br&gt;xlabel(&lt;span class="st" style="color: #4070a0;"&gt;"Tiempo (s)"&lt;/span&gt;)&lt;br&gt;ylabel(&lt;span class="st" style="color: #4070a0;"&gt;"Amplitud (mm)"&lt;/span&gt;)&lt;br&gt;grid(&lt;span class="va" style="color: #19177c;"&gt;True&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-q9a1e8lJMJM/Vqae9KNX6TI/AAAAAAAABsw/_4DjbfMXJhg/s1600/img_03.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="300" src="https://2.bp.blogspot.com/-q9a1e8lJMJM/Vqae9KNX6TI/AAAAAAAABsw/_4DjbfMXJhg/s400/img_03.png" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;</description><category>mathjax</category><category>matplotlib</category><category>numpy</category><category>pylab</category><guid>https://numython.github.io/posts/2016/01/una-introduccion-pylab/</guid><pubDate>Tue, 26 Jan 2016 03:42:00 GMT</pubDate></item><item><title>Vectores y matrices en NumPy</title><link>https://numython.github.io/posts/2016/01/test-latex-and-code/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;NumPy es una librería muy útil y un &lt;em&gt;estándar&lt;/em&gt; en Python para el manejo de matrices y/o arreglos que contienen datos de tipo numérico. La mayoría del ecosistema científico de Python está basado en los arreglos de NumPy para el manejo de datos.&lt;/div&gt;&lt;br&gt;Normalmente se acostumbra importar el módulo NumPy utilizando el alias &lt;strong&gt;np&lt;/strong&gt;:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Se puede crear un arreglo de NumPy a partir de una lista ordinaria de Python, utilizando la función &lt;code style="white-space: pre;"&gt;np.array&lt;/code&gt;.&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; lista&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;[&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;]&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;np.array(lista)&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A&lt;br&gt;array([&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;,  &lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;La función &lt;code style="white-space: pre;"&gt;np.array&lt;/code&gt; crea un objeto de la clase &lt;code style="white-space: pre;"&gt;numpy.ndarray&lt;/code&gt;,&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bu"&gt;type&lt;/span&gt;(A)&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bu"&gt;type&lt;/span&gt; &lt;span class="st" style="color: #4070a0;"&gt;'numpy.ndarray'&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Si se requiere crear una matriz debe pasarse como argumento de entrada una lista de listas, donde cada sublista representa una fila de la matriz, por ejemplo para definir la matriz &lt;span class="math inline"&gt;&lt;em&gt;M&lt;/em&gt;&lt;/span&gt; siguiente:&lt;/div&gt;&lt;br&gt;&lt;span class="math display"&gt;$$ M = \left(\begin{matrix} 1 &amp;amp; 2 &amp;amp; 3 \\ 4 &amp;amp; 5 &amp;amp; 6 \\ 7 &amp;amp; 8 &amp;amp; 9 \\ \end{matrix}\right) $$&lt;/span&gt;&lt;br&gt;utilizando una lista de listas,&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; M&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;np.array([[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;],[&lt;span class="dv" style="color: #40a070;"&gt;4&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;6&lt;/span&gt;],[&lt;span class="dv" style="color: #40a070;"&gt;7&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;9&lt;/span&gt;]])&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; M&lt;br&gt;array([[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;],&lt;br&gt;       [&lt;span class="dv" style="color: #40a070;"&gt;4&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;6&lt;/span&gt;],&lt;br&gt;       [&lt;span class="dv" style="color: #40a070;"&gt;7&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;, &lt;span class="dv" style="color: #40a070;"&gt;9&lt;/span&gt;]])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Se puede determinar la forma (número de filas y columnas) de una matriz o arreglo utilizando la propiedad &lt;code style="white-space: pre;"&gt;shape&lt;/code&gt; de la clase &lt;code style="white-space: pre;"&gt;numpy.ndarray&lt;/code&gt;.&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A.shape&lt;br&gt;(5L,)&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; M.shape&lt;br&gt;(3L, 3L)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;En entradas posteriores veremos cómo realizar operaciones matriciales con matrices vectores.</description><category>mathjax</category><category>numpy</category><guid>https://numython.github.io/posts/2016/01/test-latex-and-code/</guid><pubDate>Tue, 26 Jan 2016 00:38:00 GMT</pubDate></item></channel></rss>
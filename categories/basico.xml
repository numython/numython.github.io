<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Numython: Python para ingenieros (Básico)</title><link>https://numython.github.io/</link><description></description><atom:link href="https://numython.github.io/categories/basico.xml" type="application/rss+xml" rel="self"></atom:link><language>es</language><lastBuildDate>Thu, 10 Nov 2016 13:22:31 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Primer aplicación en wxPython</title><link>https://numython.github.io/posts/2016/03/primer-aplicacion-en-wxpython/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;&lt;a href="http://www.wxpython.org/"&gt;wxPython&lt;/a&gt; es un binding de la biblioteca gráfica wxWidgets para el lenguaje de programación Python. La biblioteca wxWidgets se caracteriza por ser multiplataforma, por lo que su uso junto a Python permite el desarrollo rápido de aplicaciones gráficas multiplataforma.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Para desarrollar una aplicación en wxPython, normalmente primero debe crearse una clase heredada de wx.Frame:&lt;/div&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;import wx&lt;br&gt;&lt;br&gt;class MiAplicacion(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;&lt;/pre&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;En el código anterior primero se importa el módulo &lt;span&gt;wx&lt;/span&gt;, enseguida se define una clase llamada &lt;b&gt;MiAplicacion&lt;/b&gt;, la cual hereda de &lt;span&gt;wx.Frame&lt;/span&gt;. El método &lt;span&gt;__init__&lt;/span&gt; de la clase creada debe contener al menos dos argumentos de entrada, self y parent, donde &lt;span&gt;self&lt;/span&gt; es una cadena utilizada por convención para referenciar a un objeto de la propia clase y&lt;span&gt; parent&lt;/span&gt; es el objeto gráfico padre del Frame que se creará cuando instanciemos un objeto de esta clase. El otro argumento definido, title, será una cadena que se mostrará en la parte superior de la ventana. El método &lt;span&gt;__init__&lt;/span&gt; podría considerarse como el "constructor" de la clase, cuando instanciemos un objeto de esa clase, se pasarán como argumentos de entrada los parámetros definidos en &lt;span&gt;__init__&lt;/span&gt;, exceptuando self.&lt;br&gt;&lt;br&gt;&lt;/div&gt;Una vez definida la clase, ahora vamos a instanciar un objeto de esa clase como sigue:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    frame = MiAplicacion(None, u"Mi aplicación")&lt;br&gt;    frame.Show()&lt;br&gt;    app.MainLoop()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Primero se crea un objeto de la clase wx.App, el cuál se encargará de "lanzar" la aplicación y ejecutar las órdenes necesarias para poder interactuar con la interfaz gráfica. Luego, se define un objeto frame de la clase &lt;b&gt;MiAplicación&lt;/b&gt;, teniendo como primer argumento None, indicando que no tendrá un objeto gráfico padre, como segundo argumento se pasa una cadena de texto con el título que queremos colocar en la parte superior de la ventana. Finalmente, el método MainLoop de la clase wx.App inicia la aplicación wxPython. En la siguiente figura se muestra la ventana resultante.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-NjuF491TD2A/VopLWQ-hW2I/AAAAAAAABn8/rVvk3G6Hvlc/s1600/img_01.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="266" src="https://4.bp.blogspot.com/-NjuF491TD2A/VopLWQ-hW2I/AAAAAAAABn8/rVvk3G6Hvlc/s400/img_01.PNG" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Es recomendable que el método Show sea implementado dentro del método __init__ de la clase derivada de wx.Frame, además podemos centrar la interfaz gráfica en la pantalla para obtener una mejor visualización, quedando nuestro código como sigue:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;pre class="brush: python"&gt;# -*- coding: utf8 -*-&lt;br&gt;import wx&lt;br&gt;&lt;br&gt;class MiAplicacion(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(600,400))&lt;br&gt;        self.Centre(True)&lt;br&gt;        self.Show()&lt;br&gt;&lt;br&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    frame = MiAplicacion(None, u"Mi aplicación")&lt;br&gt;    app.MainLoop()&lt;/pre&gt;&lt;br&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;¿Y... cómo añadir controles?&lt;/span&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;Hasta ahora tenemos simplemente la ventana de la aplicación, sin ningún tipo de control gráfico que nos permita interactuar con el programa. Para añadir controles, en principio, la cuestión no es muy complicada, sólo habrá que especificar el tipo de control y algunos parámetros requeridos, véase el ejemplo a continuación que muestra como agregar un campo de texto editable (wx.TextCtrl) que permite emular un editor de texto plano:&lt;br&gt;&lt;br&gt;&lt;pre class="brush: python"&gt;# -*- coding: utf8 -*-&lt;br&gt;import wx&lt;br&gt;&lt;br&gt;class MiAplicacion(wx.Frame):&lt;br&gt;    def __init__(self,parent,title):&lt;br&gt;        wx.Frame.__init__(self,parent,title=title,size=(400,300))&lt;br&gt; boton = wx.TextCtrl(self, style=wx.TE_MULTILINE)&lt;br&gt; self.Centre(True)&lt;br&gt; self.Show()&lt;br&gt;&lt;br&gt;if __name__=='__main__':&lt;br&gt;    app = wx.App()&lt;br&gt;    frame = MiAplicacion(None, u"Mi aplicación")&lt;br&gt;    app.MainLoop()&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-ArthMktsvw8/VopRPVLJAqI/AAAAAAAABoQ/NGR3zNOI7Bc/s1600/img_02.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="https://2.bp.blogspot.com/-ArthMktsvw8/VopRPVLJAqI/AAAAAAAABoQ/NGR3zNOI7Bc/s320/img_02.PNG" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;Como puede observarse, en el código sólo se añade una línea, en la cual se instancia un objeto de la clase wx.TextCtrl, pasándole como parent el Frame principal, y el argumento style especificando que se permita el uso de líneas múltiples dentro de ese control.&lt;br&gt;&lt;br&gt;¿Y si quiero añadir más controles?, bueno aquí la cuestión se complica un poco, pero vamos, nada que no se pueda resolver. Aunque para ello ha de introducirse otro concepto básico en el desarrollo de aplicaciones en wxPython: los Sizers, que son clases que permiten alinear y organizar los objetos dentro de una ventana o contenedores, mediante algoritmos de posicionamiento. Evidentemente esto lo estaremos tratando en otro post, para no alargarnos demasiado.&lt;br&gt;&lt;br&gt;Para tener una referencia más sólida respecto al desarrollo de aplicaciones en wxPython es recomendable que revisen el siguiente libro:&lt;br&gt;&lt;br&gt;&lt;a href="http://serv.yanchick.org/Books/%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/python/Manning.Publications.wxPython.in.Action.Mar.2006.pdf"&gt;wxPython in Action  [Noel Rappin and Robin Dunn]&lt;/a&gt;&lt;/div&gt;</description><category>Básico</category><category>wxFrame</category><category>wxTextCtrl</category><guid>https://numython.github.io/posts/2016/03/primer-aplicacion-en-wxpython/</guid><pubDate>Tue, 22 Mar 2016 10:25:00 GMT</pubDate></item><item><title>Una aplicación muy básica en wxPython</title><link>https://numython.github.io/posts/2016/02/una-aplicacion-muy-basica-en-wxpython/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;La aplicación más elemental en wxPython puede lanzarse con apenas 5 líneas de código (incluyendo la instrucción de importar el módulo &lt;code style="white-space: pre;"&gt;wx&lt;/code&gt;).&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Frame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"Test 01"&lt;/span&gt;,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;400&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;300&lt;/span&gt;))&lt;br&gt;fr.Show()&lt;br&gt;app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Ahora vamos por pasos, a &lt;em&gt;despedazar&lt;/em&gt; un poco el código anterior. Primero importamos el módulo &lt;code style="white-space: pre;"&gt;wx&lt;/code&gt;, el cual contiene todo (o casi todo, exceptuando controles más especializados y sus derivados) lo que podemos utilizar para construir una aplicación. Acto seguido, creamos un objeto de la clase &lt;code style="white-space: pre;"&gt;wx.App&lt;/code&gt;, que vendrá a ser la propia aplicación y se encargará de que el usuario pueda interactuar con los controles gráficos desplegados en pantalla. Luego, se crea un objeto de la clase &lt;code style="white-space: pre;"&gt;wx.Frame&lt;/code&gt; que es en términos simples una &lt;em&gt;ventana&lt;/em&gt; de las que estamos acostumbrados a ver en todos lados; note que a &lt;code style="white-space: pre;"&gt;wx.Frame&lt;/code&gt; se le pasan como argumentos primeramente el valor &lt;code style="white-space: pre;"&gt;None&lt;/code&gt; que hace referencia al objeto padre (ninguno en este caso), y los &lt;em&gt;keyword arguments&lt;/em&gt; &lt;code style="white-space: pre;"&gt;title&lt;/code&gt; y &lt;code style="white-space: pre;"&gt;size&lt;/code&gt; que definen el título y tamaño de la ventana, respectivamente. Finalmente se &lt;code style="white-space: pre;"&gt;llama&lt;/code&gt; al método &lt;code style="white-space: pre;"&gt;MainLoop&lt;/code&gt; de la clase &lt;code style="white-space: pre;"&gt;wx.App&lt;/code&gt; para inicializar la captura de eventos en nuestra aplicación.&lt;/div&gt;&lt;br&gt;¿Y ahora cómo agregamos controles?&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Frame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"Test 01"&lt;/span&gt;,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;400&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;300&lt;/span&gt;))&lt;br&gt;bt &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(fr, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Botón 1"&lt;/span&gt;, pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;))&lt;br&gt;txt &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.TextCtrl(fr, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;))&lt;br&gt;fr.Show()&lt;br&gt;app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-ZXJ6udT4ugI/VrWmhKTfMII/AAAAAAAABuo/d9xmkWjA8k4/s1600/img_01.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="150" src="https://4.bp.blogspot.com/-ZXJ6udT4ugI/VrWmhKTfMII/AAAAAAAABuo/d9xmkWjA8k4/s200/img_01.PNG" width="200"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;En resumen lo que se hace es crear un objeto de clase del control gráfico requerido, pasándole a este como argumento de objeto padre la ventana o frame guardado en la variable &lt;code style="white-space: pre;"&gt;fr&lt;/code&gt;. Note que hemos pasado a cada control el &lt;em&gt;keyword argument&lt;/em&gt; &lt;code style="white-space: pre;"&gt;pos&lt;/code&gt; para definir una posición fija dentro del frame. Normalmente en wxPython no deberiamos hacer esto, sino utilizar &lt;code style="white-space: pre;"&gt;Sizers&lt;/code&gt; para posicionar los elementos de manera automática, pero bueno, para un ejemplo básico lo daremos por bueno.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;¿Y cómo definimos un evento?&lt;/div&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnClick(event):&lt;br&gt;    &lt;span class="bu"&gt;print&lt;/span&gt; &lt;span class="st" style="color: #4070a0;"&gt;"Hola wxPython"&lt;/span&gt;&lt;br&gt;&lt;br&gt;app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Frame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"Test 01"&lt;/span&gt;,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;400&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;300&lt;/span&gt;))&lt;br&gt;bt &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(fr, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Botón 1"&lt;/span&gt;, pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;))&lt;br&gt;txt &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.TextCtrl(fr, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;""&lt;/span&gt;,pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;))&lt;br&gt;fr.Bind(wx.EVT_BUTTON, OnClick)&lt;br&gt;fr.Show()&lt;br&gt;app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Con el método &lt;code style="white-space: pre;"&gt;Bind&lt;/code&gt; agregamos un determinado tipo de evento a ser &lt;em&gt;capturado&lt;/em&gt; por nuestra aplicación, pasando como primer argumento el tipo de evento (en este caso wx.EVT_BUTTON), y como segundo argumento un &lt;code style="white-space: pre;"&gt;handler&lt;/code&gt; o una función en la cual habrá de definirse la respuesta de la aplicación al lanzamiento del evento. Para el caso anterior lo único que se hace es imprimir en la consola una cadena de texto cada que se oprime el botón.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Códigos como los anteriores pueden servir para mostrar una simple ventana o para una demo muy reducida de una aplicación wxPython, si quisieramos desarrollar algo más serio con esa &lt;em&gt;técnica&lt;/em&gt; iríamos directo a una infinidad de complicaciones.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Por ello para desarrollar aplicaciones en wxPython se utiliza otra metodología, que consiste en crear clases heredadas de las proporcionadas por la librería, y en estás clases heredadas modificar/adicionar las características que tendrá nuestro frame o cualquier otro control gráfico. Básicamente esto consiste en los siguientes puntos:&lt;/div&gt;&lt;ol&gt;&lt;li&gt;Heredar una clase de &lt;code style="white-space: pre;"&gt;wx.Frame&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Agregar los controles gráficos necesarios a nuestro Frame en su método &lt;code style="white-space: pre;"&gt;__init__&lt;/code&gt; (o pseudoconstructor).&lt;/li&gt;&lt;li&gt;Definir los eventos como métodos de la clase que se ha heredado.&lt;/li&gt;&lt;li&gt;Crear una instancia de &lt;code style="white-space: pre;"&gt;wx.App&lt;/code&gt; y una de nuestra clase heredada de wx.Frame.&lt;/li&gt;&lt;li&gt;Llamar al método &lt;code style="white-space: pre;"&gt;MainLoop&lt;/code&gt; de &lt;code style="white-space: pre;"&gt;wx.App&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;Traducido a código puro y duro:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;import&lt;/span&gt; wx&lt;br&gt;&lt;br&gt;&lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;class&lt;/span&gt; MiFrame(wx.Frame):&lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent,title):&lt;br&gt;        wx.Frame.&lt;span class="fu" style="color: #06287e;"&gt;__init__&lt;/span&gt;(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,parent&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;parent,title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;title,size&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;400&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;300&lt;/span&gt;))&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Agregando los controles&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.bt &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.Button(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;u"Botón 1"&lt;/span&gt;, pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;))&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.txt &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.TextCtrl(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;, &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;""&lt;/span&gt;,pos&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;(&lt;span class="dv" style="color: #40a070;"&gt;100&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;))&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Eventos&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Bind(wx.EVT_BUTTON, &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.OnClick)&lt;br&gt;        &lt;span class="co" style="color: #60a0b0; font-style: italic;"&gt;# Mostrar la ventana&lt;/span&gt;&lt;br&gt;        &lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;.Show()&lt;br&gt;        &lt;br&gt;    &lt;span class="kw" style="color: #007020; font-weight: bold;"&gt;def&lt;/span&gt; OnClick(&lt;span class="va" style="color: #19177c;"&gt;self&lt;/span&gt;,event):&lt;br&gt;        &lt;span class="bu"&gt;print&lt;/span&gt; &lt;span class="st" style="color: #4070a0;"&gt;"Hola wxPython"&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class="cf" style="color: #007020; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span class="va" style="color: #19177c;"&gt;__name__&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;==&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;'__main__'&lt;/span&gt;:&lt;br&gt;    app &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; wx.App()&lt;br&gt;    fr &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; MiFrame(&lt;span class="va" style="color: #19177c;"&gt;None&lt;/span&gt;, &lt;span class="st" style="color: #4070a0;"&gt;"Test 01"&lt;/span&gt;)&lt;br&gt;    app.MainLoop()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;Por ahora ha sido todo respecto a cómo &lt;em&gt;construir&lt;/em&gt; una aplicación muy básica, evidentemente hay muchas cosas por mejorar en esta aplicación que iremos viendo en entradas posteriores.&lt;/div&gt;</description><category>Básico</category><category>wxButton</category><guid>https://numython.github.io/posts/2016/02/una-aplicacion-muy-basica-en-wxpython/</guid><pubDate>Sat, 06 Feb 2016 13:54:00 GMT</pubDate></item></channel></rss>
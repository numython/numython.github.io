<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Numython: Python para ingenieros (sympy)</title><link>https://numython.github.io/</link><description></description><atom:link href="https://numython.github.io/categories/sympy.xml" type="application/rss+xml" rel="self"></atom:link><language>es</language><lastBuildDate>Thu, 10 Nov 2016 13:22:31 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Matemáticas con Python/SymPy I. Una introducción</title><link>https://numython.github.io/posts/matematicas-con-pythonsympy-i-una-introduccion/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;import numpy, sympy, math, os&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>matemáticas</category><category>sympy</category><guid>https://numython.github.io/posts/matematicas-con-pythonsympy-i-una-introduccion/</guid><pubDate>Sun, 23 Oct 2016 00:05:52 GMT</pubDate></item><item><title>SymPy, calculando la ecuación de un plano dados tres puntos</title><link>https://numython.github.io/posts/2016/03/sympy-es-una-de-esas-librerias-que-lo/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;SymPy es una de esas librerías que lo mismo sirven para hacer grandes cosas, que para &lt;em&gt;desempolvar&lt;/em&gt; recuerdos y aplicarlos en cuestiones más orientadas a la etapa académica. Y es que las cuestiones de algebra simbólica suelen ser muy divertidas y lo suficientemente interesantes para mantener a un individuo ocupado.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Bueno, sin más preámbulos, en este post vamos a ver cómo utilizar SymPy para calcular la ecuación de un plano dados tres puntos contenidos en este.&lt;/div&gt;&lt;br&gt;Primero un poco de geometría elemental. Sean los tres puntos contenidos en el plano los siguientes:&lt;br&gt;&lt;br&gt;&lt;span class="math display"&gt;&lt;em&gt;P&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; = (&lt;em&gt;x&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, &lt;em&gt;y&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, &lt;em&gt;z&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="math display"&gt;&lt;em&gt;P&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt; = (&lt;em&gt;x&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;, &lt;em&gt;y&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;, &lt;em&gt;z&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="math display"&gt;&lt;em&gt;P&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt; = (&lt;em&gt;x&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt;, &lt;em&gt;y&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt;, &lt;em&gt;z&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt;)&lt;/span&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Luego, la ecuación implícita del plano podemos obtenerla resolviendo la ecuación dada por el determinante siguiente:&lt;/div&gt;&lt;br&gt;&lt;span class="math display"&gt;$$ \left|\begin{matrix} x - x_1 &amp;amp; y - y_1 &amp;amp; z - z_1 \\ x_2 - x_1 &amp;amp; y_2 - y_2 &amp;amp; z_2 - z_1 \\ x_3 - x_1 &amp;amp; y_3 - y_1 &amp;amp; z_3 - z_1 \\ \end{matrix}\right| = 0 $$&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;div style="text-align: justify;"&gt;La solución tradicional creo que, llegados a este punto, todos podemos obtenerla sin ningún tipo de sobresalto. Ahora, la idea es implementar una solución utilizando SymPy.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;SymPy dispone de una clase &lt;code style="white-space: pre;"&gt;Matrix&lt;/code&gt;, que recibe como argumentos de entrada una lista de valores numéricos o bien de cualquier variable simbólica que haya sido definida previamente. Está claro que en este caso los valores de las coordenadas de los puntos son conocidos, pero las variables \(x, y, z\) serán variables de tipo simbólico. Para calcular el determinante de una matriz podemos utilizar la función &lt;code style="white-space: pre;"&gt;det&lt;/code&gt;, que recibe como argumento de entrada un objeto de la clase Matrix. Una vez resuelto el determinante tendremos una ecuación de la forma:&lt;/div&gt;&lt;br&gt;&lt;span class="math display"&gt;&lt;em&gt;A&lt;/em&gt;&lt;em&gt;x&lt;/em&gt; + &lt;em&gt;B&lt;/em&gt;&lt;em&gt;y&lt;/em&gt; + &lt;em&gt;C&lt;/em&gt;&lt;em&gt;z&lt;/em&gt; − &lt;em&gt;k&lt;/em&gt; = 0&lt;/span&gt;&lt;br&gt;&lt;br&gt;Veamos el código implementado en SymPy:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;from&lt;/span&gt; sympy &lt;span class="im"&gt;import&lt;/span&gt; Matrix, det&lt;br&gt;&lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt; x,y,z&lt;br&gt;&lt;br&gt;P1 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; (&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;)&lt;br&gt;P2 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; (&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;br&gt;P3 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; (&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;)&lt;br&gt;&lt;br&gt;M &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; Matrix([[x&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;]     , y&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;]     , z&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;]]    ,&lt;br&gt;            [P2[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;]&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;] , P2[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;]&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;] , P2[&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;]&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;]],&lt;br&gt;            [P3[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;]&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;] , P3[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;]&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;] , P3[&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;]&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;]]])&lt;br&gt;&lt;br&gt;&lt;span class="bu"&gt;print&lt;/span&gt;(&lt;span class="st" style="color: #4070a0;"&gt;u"Ecuación implícita: &lt;/span&gt;&lt;span class="sc" style="color: #4070a0;"&gt;%s&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt; = 0"&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;%&lt;/span&gt;det(M))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Lo cual nos devolverá en consola la ecuación implícita del plano:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;Ecuación implícita: &lt;span class="dv" style="color: #40a070;"&gt;13&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;x &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; y &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;z &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;9&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Ahora bien, si requerimos la ecuación anterior expresada de forma explícita como una función bivariable del tipo \(z=f(x,y)\), entonces, debemos utilizar la función &lt;code style="white-space: pre;"&gt;solve&lt;/code&gt; y resolver la ecuación planteada respecto a \(z\), por ejemplo:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;from&lt;/span&gt; sympy &lt;span class="im"&gt;import&lt;/span&gt; Matrix, solve, det&lt;br&gt;&lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt; x,y,z&lt;br&gt;&lt;br&gt;P1 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; (&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;3&lt;/span&gt;)&lt;br&gt;P2 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; (&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;br&gt;P3 &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; (&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;,&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;)&lt;br&gt;&lt;br&gt;M &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; Matrix([[x&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;]     , y&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;]     , z&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;]]    ,&lt;br&gt;            [P2[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;]&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;] , P2[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;]&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;] , P2[&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;]&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;]],&lt;br&gt;            [P3[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;]&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;] , P3[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;]&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;] , P3[&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;]&lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt;P1[&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;]]])&lt;br&gt;&lt;br&gt;sol &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; solve(det(M), z)&lt;br&gt;&lt;span class="bu"&gt;print&lt;/span&gt;(&lt;span class="st" style="color: #4070a0;"&gt;u"Ecuación implícita: &lt;/span&gt;&lt;span class="sc" style="color: #4070a0;"&gt;%s&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt; = 0"&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;%&lt;/span&gt;det(M))&lt;br&gt;&lt;span class="bu"&gt;print&lt;/span&gt;(&lt;span class="st" style="color: #4070a0;"&gt;u"Ecuación explícita: z=&lt;/span&gt;&lt;span class="sc" style="color: #4070a0;"&gt;%s&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;%&lt;/span&gt;(sol[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;]))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Resultando:&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;Ecuación implícita: &lt;span class="dv" style="color: #40a070;"&gt;13&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;x &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; y &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;z &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;9&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;&lt;br&gt;Ecuación explícita: z&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;13&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;x&lt;span class="op" style="color: #666666;"&gt;/&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; y&lt;span class="op" style="color: #666666;"&gt;/&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;9&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;/&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Incluso podemos graficar nuestro plano utilizando la función &lt;code style="white-space: pre;"&gt;plot3d&lt;/code&gt; del módulo &lt;code style="white-space: pre;"&gt;plotting&lt;/code&gt;:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;from sympy import latex&lt;/span&gt;&lt;/code&gt;&lt;br&gt;&lt;code class="sourceCode python"&gt;&lt;span class="im"&gt;from&lt;/span&gt; sympy.plotting &lt;span class="im"&gt;import&lt;/span&gt; plot3d&lt;br&gt;&lt;br&gt;plot3d(sol[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;], (x,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;), (y,&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;,&lt;span class="dv" style="color: #40a070;"&gt;5&lt;/span&gt;), title&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;"$z = &lt;/span&gt;&lt;span class="sc" style="color: #4070a0;"&gt;%s&lt;/span&gt;&lt;span class="st" style="color: #4070a0;"&gt;$"&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;%&lt;/span&gt;(latex(sol[&lt;span class="dv" style="color: #40a070;"&gt;0&lt;/span&gt;])))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-q9746nrlTnw/VtiKBse1HBI/AAAAAAAAByY/npjCaWNgTRA/s1600/img_01.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="300" src="https://1.bp.blogspot.com/-q9746nrlTnw/VtiKBse1HBI/AAAAAAAAByY/npjCaWNgTRA/s400/img_01.png" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;</description><category>CAS</category><category>mathjax</category><category>sympy</category><guid>https://numython.github.io/posts/2016/03/sympy-es-una-de-esas-librerias-que-lo/</guid><pubDate>Fri, 04 Mar 2016 01:02:00 GMT</pubDate></item><item><title>Sympy live, una "consola" de Python online.</title><link>https://numython.github.io/posts/2016/02/sympy-live-una-consola-de-python-online/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;div style="text-align: justify;"&gt;Sympy live (&lt;a href="http://live.sympy.org/"&gt;http://live.sympy.org/&lt;/a&gt;) es una aplicación web que permite ejecutar código Python en línea, y claro, con la ventaja que permite utilizar la librería Sympy para realizar cálculos de computación simbólica.&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-5Blr-tcS2pw/VopXqOBMfRI/AAAAAAAABok/9qElSzxoku0/s1600/img_01.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="494" src="https://3.bp.blogspot.com/-5Blr-tcS2pw/VopXqOBMfRI/AAAAAAAABok/9qElSzxoku0/s640/img_01.PNG" width="640"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;A continuación se muestran algunas operaciones realizadas utilizando esta aplicación.&lt;br&gt;&lt;br&gt;&lt;b&gt;Manipulación algebraica&lt;/b&gt;&lt;br&gt;&lt;br&gt;Expandiendo la expresión $(x+1) ^2$ y factorizando $x^2+6x-16$:&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-BRQbsDTb82E/Vopbbk92tmI/AAAAAAAABo0/xjhaKkEQzmA/s1600/img_02.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-BRQbsDTb82E/Vopbbk92tmI/AAAAAAAABo0/xjhaKkEQzmA/s1600/img_02.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;b&gt;Resolviendo ecuaciones e inecuaciones&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-Yh_YU2wHOLc/VopfzJchnbI/AAAAAAAABpE/vA9ZagdGHb0/s1600/img_03.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-Yh_YU2wHOLc/VopfzJchnbI/AAAAAAAABpE/vA9ZagdGHb0/s1600/img_03.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sistemas de ecuaciones lineales&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-NYQtAAGXTC4/Vopf3AOHhVI/AAAAAAAABpM/F09PC_J7ZJg/s1600/img_04.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-NYQtAAGXTC4/Vopf3AOHhVI/AAAAAAAABpM/F09PC_J7ZJg/s1600/img_04.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Derivadas&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-wrN943SLJXQ/VophtmPZ88I/AAAAAAAABpY/fPMl18OxRFk/s1600/img_05.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-wrN943SLJXQ/VophtmPZ88I/AAAAAAAABpY/fPMl18OxRFk/s1600/img_05.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;b&gt;Integrales&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-BpmobKGJMD8/Vophu2QYH2I/AAAAAAAABpg/anefRm29pA0/s1600/img_06.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-BpmobKGJMD8/Vophu2QYH2I/AAAAAAAABpg/anefRm29pA0/s1600/img_06.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Integrales múltiples&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-C67lhgBWVrs/VopjGJyLH6I/AAAAAAAABps/e2F3Vx-_6iE/s1600/img_07.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-C67lhgBWVrs/VopjGJyLH6I/AAAAAAAABps/e2F3Vx-_6iE/s1600/img_07.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Ecuaciones diferenciales&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-fxu-0EXJlnQ/VopnQA-AqfI/AAAAAAAABqE/h-I3xc2BD6c/s1600/img_08.PNG" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-fxu-0EXJlnQ/VopnQA-AqfI/AAAAAAAABqE/h-I3xc2BD6c/s1600/img_08.PNG"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;</description><category>CAS</category><category>mathjax</category><category>sympy</category><guid>https://numython.github.io/posts/2016/02/sympy-live-una-consola-de-python-online/</guid><pubDate>Wed, 24 Feb 2016 22:46:00 GMT</pubDate></item><item><title>Una introducción a SymPy</title><link>https://numython.github.io/posts/2016/02/una-introduccion-sympy/</link><dc:creator>Pedro Jorge De Los Santos</dc:creator><description>&lt;p&gt;SymPy es una librería de Python desarrollada para resolver problemas de matemáticas simbólicas. Existen diversos software comerciales que realizan estas tareas: Maple, Mathematica, MATLAB, entre otros, pero requieren una licencia de uso que puede resultar poco accesible en algunos casos. En cambio, SymPy se distribuye bajo licencia BSD, que en resumen permite el uso libre de la misma.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;h3 id="importando-sympy"&gt;Importando SymPy&lt;/h3&gt;Para importar SymPy y disponer de todos los módulos y funciones que le componen puede hacerse de diversas formas:&lt;br&gt;&lt;ol&gt;&lt;li&gt;Forma tradicional&lt;/li&gt;&lt;/ol&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;import&lt;/span&gt; sympy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Es la manera más habitual, se carga toda la librería y se accede a cada una de las funciones mediante la sintaxis:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; r&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;sympy.funcion(args)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;&lt;li&gt;Importando funciones seleccionadas&lt;/li&gt;&lt;/ol&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy &lt;span class="im"&gt;import&lt;/span&gt; Symbol,integrate,sin,cos&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;De este modo se importan solamente las funciones que vayan a utilizarse, es recomendable cuando se utilizará un número reducido de las mismas. Proporciona cierta ventaja dado que para acceder a una función no es necesario anteponer el nombre de la librería (sympy), aunque esto mismo represente una desventaja en aquellos casos en los que existen funciones de diferentes librerías con el mismo nombre.&lt;br&gt;&lt;ol start="3"&gt;&lt;li&gt;Utilizando un alias o seudónimo&lt;/li&gt;&lt;/ol&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;import&lt;/span&gt; sympy &lt;span class="im"&gt;as&lt;/span&gt; sp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Funciona del mismo modo que para el primer caso, con la diferencia que el usuario puede asignarle un nombre más corto o bien más representativo para hacer las llamadas a funciones.&lt;br&gt;Para los ejemplos que se mostrarán en esta entrada se utilizará la segunda forma.&lt;br&gt;&lt;br&gt;&lt;h3 id="declarando-una-variable-simbólica"&gt;Declarando una variable simbólica&lt;/h3&gt;&lt;br&gt;Para declarar una variable simbólica podemos utilizar la función Symbol, para ello primero importamos la función y posteriormente declaramos una variable simbólica "x":&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy &lt;span class="im"&gt;import&lt;/span&gt; Symbol&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;Symbol(&lt;span class="st" style="color: #4070a0;"&gt;'x'&lt;/span&gt;)&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x&lt;br&gt;x&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x&lt;span class="dv" style="color: #40a070;"&gt;+2&lt;/span&gt;&lt;br&gt;x &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Como puede verse, una vez se ha declarado la variable simbólica podemos utilizarle para formar expresiones algebraicas de todo tipo. Existe una forma más "simple" de declarar una variable simbólica, para ello habrá de importarse del módulo "abc" la letra correspondiente, por ejemplo:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt; x&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;O bien:&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt; x,y,z&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Lo anterior en el caso de que se requieran múltiples variables simbólicas.&lt;br&gt;&lt;br&gt;&lt;h3 id="manipulaciones-algebraicas"&gt;Manipulaciones algebraicas&lt;/h3&gt;&lt;h4 id="factorizar-una-expresión-algebraica."&gt;&lt;br&gt;&lt;/h4&gt;&lt;h4 id="factorizar-una-expresión-algebraica."&gt;Factorizar una expresión algebraica.&lt;/h4&gt;Para factorizar una expresión algebraica podemos utilizar la función factor, por ejemplo suponga que se quiere factorizar la expresión (x^2+2x+1):&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy &lt;span class="im"&gt;import&lt;/span&gt; factor,Symbol&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;Symbol(&lt;span class="st" style="color: #4070a0;"&gt;'x'&lt;/span&gt;)&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; factor(x&lt;span class="op" style="color: #666666;"&gt;**&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2+2&lt;/span&gt;&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;x&lt;span class="dv" style="color: #40a070;"&gt;+1&lt;/span&gt;)&lt;br&gt;(x &lt;span class="op" style="color: #666666;"&gt;+&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;1&lt;/span&gt;)&lt;span class="op" style="color: #666666;"&gt;**&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="expandir-una-expresión-algebraica"&gt;&lt;br&gt;&lt;/h4&gt;&lt;h4 id="expandir-una-expresión-algebraica"&gt;Expandir una expresión algebraica&lt;/h4&gt;&lt;br&gt;Enseguida se muestra un ejemplo de cómo "expandir" o multiplicar dos expresiones algebraicas.&lt;br&gt;&lt;br&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy &lt;span class="im"&gt;import&lt;/span&gt; Symbol,expand&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x&lt;span class="op" style="color: #666666;"&gt;=&lt;/span&gt;Symbol(&lt;span class="st" style="color: #4070a0;"&gt;'x'&lt;/span&gt;)&lt;br&gt;&lt;span class="op" style="color: #666666;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; expand((x&lt;span class="dv" style="color: #40a070;"&gt;+2&lt;/span&gt;)&lt;span class="op" style="color: #666666;"&gt;*&lt;/span&gt;(x&lt;span class="dv" style="color: #40a070;"&gt;-3&lt;/span&gt;))&lt;br&gt;x&lt;span class="op" style="color: #666666;"&gt;**&lt;/span&gt;&lt;span class="dv" style="color: #40a070;"&gt;2&lt;/span&gt; &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt; x &lt;span class="op" style="color: #666666;"&gt;-&lt;/span&gt; &lt;span class="dv" style="color: #40a070;"&gt;6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>CAS</category><category>mathjax</category><category>sympy</category><guid>https://numython.github.io/posts/2016/02/una-introduccion-sympy/</guid><pubDate>Wed, 24 Feb 2016 13:58:00 GMT</pubDate></item></channel></rss>